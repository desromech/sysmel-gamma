Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BYTE_ARRAY_LEFT_BRACKET
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET

Grammar

Rule 0     S' -> expressionList
Rule 1     expressionList -> optionalExpression
Rule 2     expressionList -> expressionList DOT optionalExpression
Rule 3     optionalExpression -> <empty>
Rule 4     optionalExpression -> expression
Rule 5     primaryTerm -> IDENTIFIER
Rule 6     primaryTerm -> literal
Rule 7     primaryTerm -> block
Rule 8     primaryTerm -> LEFT_PARENT RIGHT_PARENT
Rule 9     primaryTerm -> LEFT_PARENT expression RIGHT_PARENT
Rule 10    primaryExpression -> primaryTerm
Rule 11    primaryExpression -> QUOTE primaryTerm
Rule 12    primaryExpression -> QUASI_QUOTE primaryTerm
Rule 13    primaryExpression -> QUASI_UNQUOTE primaryTerm
Rule 14    primaryExpression -> SPLICE primaryTerm
Rule 15    primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
Rule 16    primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
Rule 17    primaryExpression -> primaryExpression block
Rule 18    blockClosureHeader -> blockArguments blockResultType BAR
Rule 19    optionalBlockClosureHeader -> blockClosureHeader
Rule 20    optionalBlockClosureHeader -> <empty>
Rule 21    pragmaList -> <empty>
Rule 22    pragmaList -> pragmaList pragma
Rule 23    pragma -> LESS_THAN expandableIdentifier GREATER_THAN
Rule 24    pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN
Rule 25    pragmaKeywordArgument -> KEYWORD primaryExpression
Rule 26    pragmaKeywordArguments -> pragmaKeywordArgument
Rule 27    pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument
Rule 28    block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
Rule 29    blockArguments -> <empty>
Rule 30    blockArguments -> blockArguments blockArgument
Rule 31    optionalBlockArgumentType -> <empty>
Rule 32    optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT
Rule 33    blockArgument -> COLON optionalBlockArgumentType expandableIdentifier
Rule 34    blockResultType -> <empty>
Rule 35    blockResultType -> COLON_COLON primaryExpression
Rule 36    expandableIdentifier -> IDENTIFIER
Rule 37    expandableIdentifier -> QUASI_UNQUOTE primaryTerm
Rule 38    prefixUnaryExpression -> primaryExpression
Rule 39    prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression
Rule 40    binaryExpression -> prefixUnaryExpression
Rule 41    binaryExpression -> binaryExpression anyOperator prefixUnaryExpression
Rule 42    chainedMessageArgument -> KEYWORD binaryExpression
Rule 43    chainedMessageArguments -> chainedMessageArgument
Rule 44    chainedMessageArguments -> chainedMessageArguments chainedMessageArgument
Rule 45    chainedMessage -> chainedMessageArguments
Rule 46    chainedMessages -> chainedMessage
Rule 47    chainedMessages -> chainedMessages SEMICOLON chainedMessage
Rule 48    optionalChainedMessages -> <empty>
Rule 49    optionalChainedMessages -> chainedMessages
Rule 50    chainExpression -> binaryExpression optionalChainedMessages
Rule 51    chainExpression -> chainedMessages
Rule 52    lowPrecedenceExpression -> chainExpression
Rule 53    lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression
Rule 54    lowPrecedenceOperator -> COLON_COLON anyOperator
Rule 55    assignmentExpression -> lowPrecedenceExpression
Rule 56    assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression
Rule 57    commaExpressionContent -> assignmentExpression
Rule 58    commaExpressionContent -> commaExpressionContent COMMA assignmentExpression
Rule 59    commaExpression -> commaExpressionContent
Rule 60    commaExpression -> commaExpressionContent COMMA
Rule 61    expression -> commaExpression
Rule 62    literal -> FLOAT
Rule 63    literal -> INTEGER
Rule 64    literal -> CHARACTER
Rule 65    literal -> STRING
Rule 66    literal -> SYMBOL_IDENTIFIER
Rule 67    literal -> SYMBOL_KEYWORD
Rule 68    literal -> SYMBOL_OPERATOR
Rule 69    literal -> SYMBOL_STRING
Rule 70    literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
Rule 71    literalArrayElements -> <empty>
Rule 72    literalArrayElements -> literalArrayElements literalArrayElement
Rule 73    literalArrayElement -> literal
Rule 74    literalArrayElement -> IDENTIFIER
Rule 75    literalArrayElement -> anyKeyword
Rule 76    literalArrayElement -> anyOperator
Rule 77    literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT
Rule 78    anyOperator -> OPERATOR
Rule 79    anyOperator -> BAR
Rule 80    anyOperator -> LESS_THAN
Rule 81    anyOperator -> GREATER_THAN
Rule 82    anyPrefixOperator -> OPERATOR
Rule 83    anyKeyword -> KEYWORD
Rule 84    anyKeyword -> MULTI_KEYWORD

Terminals, with rules where they appear

ASSIGNMENT           : 56
BAR                  : 18 79
BYTE_ARRAY_LEFT_BRACKET : 
CHARACTER            : 64
COLON                : 33
COLON_COLON          : 35 54
COMMA                : 58 60
DICTIONARY_ARRAY_LEFT_CURLY_BRACKET : 
DOT                  : 2
FLOAT                : 62
GREATER_THAN         : 23 24 81
IDENTIFIER           : 5 36 74
INTEGER              : 63
KEYWORD              : 25 42 83
LEFT_BRACKET         : 16
LEFT_CURLY_BRACKET   : 28
LEFT_PARENT          : 8 9 15 32 77
LESS_THAN            : 23 24 80
LITERAL_ARRAY_LEFT_PARENT : 70
MULTI_KEYWORD        : 84
OPERATOR             : 78 82
QUASI_QUOTE          : 12
QUASI_UNQUOTE        : 13 37
QUOTE                : 11
RIGHT_BRACKET        : 16
RIGHT_CURLY_BRACKET  : 28
RIGHT_PARENT         : 8 9 15 32 70 77
SEMICOLON            : 47
SPLICE               : 14
STRING               : 65
SYMBOL_IDENTIFIER    : 66
SYMBOL_KEYWORD       : 67
SYMBOL_OPERATOR      : 68
SYMBOL_STRING        : 69
error                : 

Nonterminals, with rules where they appear

anyKeyword           : 75
anyOperator          : 41 54 76
anyPrefixOperator    : 39
assignmentExpression : 56 57 58
binaryExpression     : 41 42 50
block                : 7 17
blockArgument        : 30
blockArguments       : 18 30
blockClosureHeader   : 19
blockResultType      : 18
chainExpression      : 52 53
chainedMessage       : 46 47
chainedMessageArgument : 43 44
chainedMessageArguments : 44 45
chainedMessages      : 47 49 51
commaExpression      : 61
commaExpressionContent : 58 59 60
expandableIdentifier : 23 33
expression           : 4 9 32
expressionList       : 2 15 16 28 0
literal              : 6 73
literalArrayElement  : 72
literalArrayElements : 70 72 77
lowPrecedenceExpression : 53 55 56
lowPrecedenceOperator : 53
optionalBlockArgumentType : 33
optionalBlockClosureHeader : 28
optionalChainedMessages : 50
optionalExpression   : 1 2
pragma               : 22
pragmaKeywordArgument : 26 27
pragmaKeywordArguments : 24 27
pragmaList           : 22 28
prefixUnaryExpression : 39 40 41
primaryExpression    : 15 16 17 25 35 38
primaryTerm          : 10 11 12 13 14 37

Parsing method: LALR

state 0

    (0) S' -> . expressionList
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    DOT             reduce using rule 3 (optionalExpression -> .)
    $end            reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    expressionList                 shift and go to state 1
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 1

    (0) S' -> expressionList .
    (2) expressionList -> expressionList . DOT optionalExpression

    DOT             shift and go to state 38


state 2

    (1) expressionList -> optionalExpression .

    DOT             reduce using rule 1 (expressionList -> optionalExpression .)
    $end            reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_PARENT    reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_BRACKET   reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 1 (expressionList -> optionalExpression .)


state 3

    (4) optionalExpression -> expression .

    DOT             reduce using rule 4 (optionalExpression -> expression .)
    $end            reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_PARENT    reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_BRACKET   reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (optionalExpression -> expression .)


state 4

    (61) expression -> commaExpression .

    DOT             reduce using rule 61 (expression -> commaExpression .)
    $end            reduce using rule 61 (expression -> commaExpression .)
    RIGHT_PARENT    reduce using rule 61 (expression -> commaExpression .)
    RIGHT_BRACKET   reduce using rule 61 (expression -> commaExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 61 (expression -> commaExpression .)


state 5

    (59) commaExpression -> commaExpressionContent .
    (60) commaExpression -> commaExpressionContent . COMMA
    (58) commaExpressionContent -> commaExpressionContent . COMMA assignmentExpression

    DOT             reduce using rule 59 (commaExpression -> commaExpressionContent .)
    $end            reduce using rule 59 (commaExpression -> commaExpressionContent .)
    RIGHT_PARENT    reduce using rule 59 (commaExpression -> commaExpressionContent .)
    RIGHT_BRACKET   reduce using rule 59 (commaExpression -> commaExpressionContent .)
    RIGHT_CURLY_BRACKET reduce using rule 59 (commaExpression -> commaExpressionContent .)
    COMMA           shift and go to state 39


state 6

    (57) commaExpressionContent -> assignmentExpression .

    COMMA           reduce using rule 57 (commaExpressionContent -> assignmentExpression .)
    DOT             reduce using rule 57 (commaExpressionContent -> assignmentExpression .)
    $end            reduce using rule 57 (commaExpressionContent -> assignmentExpression .)
    RIGHT_PARENT    reduce using rule 57 (commaExpressionContent -> assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 57 (commaExpressionContent -> assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 57 (commaExpressionContent -> assignmentExpression .)


state 7

    (55) assignmentExpression -> lowPrecedenceExpression .
    (56) assignmentExpression -> lowPrecedenceExpression . ASSIGNMENT assignmentExpression
    (53) lowPrecedenceExpression -> lowPrecedenceExpression . lowPrecedenceOperator chainExpression
    (54) lowPrecedenceOperator -> . COLON_COLON anyOperator

    COMMA           reduce using rule 55 (assignmentExpression -> lowPrecedenceExpression .)
    DOT             reduce using rule 55 (assignmentExpression -> lowPrecedenceExpression .)
    $end            reduce using rule 55 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_PARENT    reduce using rule 55 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_BRACKET   reduce using rule 55 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 55 (assignmentExpression -> lowPrecedenceExpression .)
    ASSIGNMENT      shift and go to state 40
    COLON_COLON     shift and go to state 42

    lowPrecedenceOperator          shift and go to state 41

state 8

    (52) lowPrecedenceExpression -> chainExpression .

    ASSIGNMENT      reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    COLON_COLON     reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    COMMA           reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    DOT             reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    $end            reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_PARENT    reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_BRACKET   reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 52 (lowPrecedenceExpression -> chainExpression .)


state 9

    (50) chainExpression -> binaryExpression . optionalChainedMessages
    (41) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (48) optionalChainedMessages -> .
    (49) optionalChainedMessages -> . chainedMessages
    (78) anyOperator -> . OPERATOR
    (79) anyOperator -> . BAR
    (80) anyOperator -> . LESS_THAN
    (81) anyOperator -> . GREATER_THAN
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (45) chainedMessage -> . chainedMessageArguments
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (42) chainedMessageArgument -> . KEYWORD binaryExpression

    ASSIGNMENT      reduce using rule 48 (optionalChainedMessages -> .)
    COLON_COLON     reduce using rule 48 (optionalChainedMessages -> .)
    COMMA           reduce using rule 48 (optionalChainedMessages -> .)
    DOT             reduce using rule 48 (optionalChainedMessages -> .)
    $end            reduce using rule 48 (optionalChainedMessages -> .)
    RIGHT_PARENT    reduce using rule 48 (optionalChainedMessages -> .)
    RIGHT_BRACKET   reduce using rule 48 (optionalChainedMessages -> .)
    RIGHT_CURLY_BRACKET reduce using rule 48 (optionalChainedMessages -> .)
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49
    KEYWORD         shift and go to state 27

    optionalChainedMessages        shift and go to state 43
    anyOperator                    shift and go to state 44
    chainedMessages                shift and go to state 45
    chainedMessage                 shift and go to state 12
    chainedMessageArguments        shift and go to state 15
    chainedMessageArgument         shift and go to state 24

state 10

    (51) chainExpression -> chainedMessages .
    (47) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 51 (chainExpression -> chainedMessages .)
    COLON_COLON     reduce using rule 51 (chainExpression -> chainedMessages .)
    COMMA           reduce using rule 51 (chainExpression -> chainedMessages .)
    DOT             reduce using rule 51 (chainExpression -> chainedMessages .)
    $end            reduce using rule 51 (chainExpression -> chainedMessages .)
    RIGHT_PARENT    reduce using rule 51 (chainExpression -> chainedMessages .)
    RIGHT_BRACKET   reduce using rule 51 (chainExpression -> chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (chainExpression -> chainedMessages .)
    SEMICOLON       shift and go to state 50


state 11

    (40) binaryExpression -> prefixUnaryExpression .

    OPERATOR        reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    BAR             reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    LESS_THAN       reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    KEYWORD         reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    COLON_COLON     reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    DOT             reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    $end            reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    SEMICOLON       reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (binaryExpression -> prefixUnaryExpression .)


state 12

    (46) chainedMessages -> chainedMessage .

    SEMICOLON       reduce using rule 46 (chainedMessages -> chainedMessage .)
    ASSIGNMENT      reduce using rule 46 (chainedMessages -> chainedMessage .)
    COLON_COLON     reduce using rule 46 (chainedMessages -> chainedMessage .)
    COMMA           reduce using rule 46 (chainedMessages -> chainedMessage .)
    DOT             reduce using rule 46 (chainedMessages -> chainedMessage .)
    $end            reduce using rule 46 (chainedMessages -> chainedMessage .)
    RIGHT_PARENT    reduce using rule 46 (chainedMessages -> chainedMessage .)
    RIGHT_BRACKET   reduce using rule 46 (chainedMessages -> chainedMessage .)
    RIGHT_CURLY_BRACKET reduce using rule 46 (chainedMessages -> chainedMessage .)


state 13

    (38) prefixUnaryExpression -> primaryExpression .
    (15) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> primaryExpression . block
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    OPERATOR        reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    BAR             reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    LESS_THAN       reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    GREATER_THAN    reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    KEYWORD         reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    ASSIGNMENT      reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    COLON_COLON     reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    DOT             reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    $end            reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_PARENT    reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    SEMICOLON       reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_BRACKET   reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (prefixUnaryExpression -> primaryExpression .)
    LEFT_PARENT     shift and go to state 51
    LEFT_BRACKET    shift and go to state 52
    LEFT_CURLY_BRACKET shift and go to state 37

    block                          shift and go to state 53

state 14

    (39) prefixUnaryExpression -> anyPrefixOperator . prefixUnaryExpression
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    anyPrefixOperator              shift and go to state 14
    prefixUnaryExpression          shift and go to state 54
    primaryExpression              shift and go to state 13
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 15

    (45) chainedMessage -> chainedMessageArguments .
    (44) chainedMessageArguments -> chainedMessageArguments . chainedMessageArgument
    (42) chainedMessageArgument -> . KEYWORD binaryExpression

    SEMICOLON       reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    ASSIGNMENT      reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    COLON_COLON     reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    COMMA           reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    DOT             reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    $end            reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    RIGHT_PARENT    reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    RIGHT_BRACKET   reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    RIGHT_CURLY_BRACKET reduce using rule 45 (chainedMessage -> chainedMessageArguments .)
    KEYWORD         shift and go to state 27

    chainedMessageArgument         shift and go to state 55

state 16

    (10) primaryExpression -> primaryTerm .

    LEFT_PARENT     reduce using rule 10 (primaryExpression -> primaryTerm .)
    LEFT_BRACKET    reduce using rule 10 (primaryExpression -> primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 10 (primaryExpression -> primaryTerm .)
    OPERATOR        reduce using rule 10 (primaryExpression -> primaryTerm .)
    BAR             reduce using rule 10 (primaryExpression -> primaryTerm .)
    LESS_THAN       reduce using rule 10 (primaryExpression -> primaryTerm .)
    GREATER_THAN    reduce using rule 10 (primaryExpression -> primaryTerm .)
    KEYWORD         reduce using rule 10 (primaryExpression -> primaryTerm .)
    ASSIGNMENT      reduce using rule 10 (primaryExpression -> primaryTerm .)
    COLON_COLON     reduce using rule 10 (primaryExpression -> primaryTerm .)
    COMMA           reduce using rule 10 (primaryExpression -> primaryTerm .)
    DOT             reduce using rule 10 (primaryExpression -> primaryTerm .)
    $end            reduce using rule 10 (primaryExpression -> primaryTerm .)
    RIGHT_PARENT    reduce using rule 10 (primaryExpression -> primaryTerm .)
    SEMICOLON       reduce using rule 10 (primaryExpression -> primaryTerm .)
    RIGHT_BRACKET   reduce using rule 10 (primaryExpression -> primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (primaryExpression -> primaryTerm .)


state 17

    (11) primaryExpression -> QUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryTerm                    shift and go to state 56
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 18

    (12) primaryExpression -> QUASI_QUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryTerm                    shift and go to state 57
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 19

    (13) primaryExpression -> QUASI_UNQUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryTerm                    shift and go to state 58
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 20

    (14) primaryExpression -> SPLICE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryTerm                    shift and go to state 59
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 21

    (8) primaryTerm -> LEFT_PARENT . RIGHT_PARENT
    (9) primaryTerm -> LEFT_PARENT . expression RIGHT_PARENT
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    RIGHT_PARENT    shift and go to state 60
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    expression                     shift and go to state 61
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 22

    (7) primaryTerm -> block .

    LEFT_PARENT     reduce using rule 7 (primaryTerm -> block .)
    LEFT_BRACKET    reduce using rule 7 (primaryTerm -> block .)
    LEFT_CURLY_BRACKET reduce using rule 7 (primaryTerm -> block .)
    OPERATOR        reduce using rule 7 (primaryTerm -> block .)
    BAR             reduce using rule 7 (primaryTerm -> block .)
    LESS_THAN       reduce using rule 7 (primaryTerm -> block .)
    GREATER_THAN    reduce using rule 7 (primaryTerm -> block .)
    KEYWORD         reduce using rule 7 (primaryTerm -> block .)
    ASSIGNMENT      reduce using rule 7 (primaryTerm -> block .)
    COLON_COLON     reduce using rule 7 (primaryTerm -> block .)
    COMMA           reduce using rule 7 (primaryTerm -> block .)
    DOT             reduce using rule 7 (primaryTerm -> block .)
    $end            reduce using rule 7 (primaryTerm -> block .)
    RIGHT_PARENT    reduce using rule 7 (primaryTerm -> block .)
    SEMICOLON       reduce using rule 7 (primaryTerm -> block .)
    RIGHT_BRACKET   reduce using rule 7 (primaryTerm -> block .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (primaryTerm -> block .)
    COLON           reduce using rule 7 (primaryTerm -> block .)


state 23

    (82) anyPrefixOperator -> OPERATOR .

    QUOTE           reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    QUASI_QUOTE     reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    SPLICE          reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    OPERATOR        reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    IDENTIFIER      reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    LEFT_PARENT     reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    FLOAT           reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    INTEGER         reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    CHARACTER       reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    STRING          reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_STRING   reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 82 (anyPrefixOperator -> OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 82 (anyPrefixOperator -> OPERATOR .)


state 24

    (43) chainedMessageArguments -> chainedMessageArgument .

    KEYWORD         reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    SEMICOLON       reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    ASSIGNMENT      reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    COLON_COLON     reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    COMMA           reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    DOT             reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    $end            reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_PARENT    reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_BRACKET   reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_CURLY_BRACKET reduce using rule 43 (chainedMessageArguments -> chainedMessageArgument .)


state 25

    (5) primaryTerm -> IDENTIFIER .

    LEFT_PARENT     reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    BAR             reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LESS_THAN       reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    KEYWORD         reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COLON_COLON     reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COMMA           reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    DOT             reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    $end            reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COLON           reduce using rule 5 (primaryTerm -> IDENTIFIER .)


state 26

    (6) primaryTerm -> literal .

    LEFT_PARENT     reduce using rule 6 (primaryTerm -> literal .)
    LEFT_BRACKET    reduce using rule 6 (primaryTerm -> literal .)
    LEFT_CURLY_BRACKET reduce using rule 6 (primaryTerm -> literal .)
    OPERATOR        reduce using rule 6 (primaryTerm -> literal .)
    BAR             reduce using rule 6 (primaryTerm -> literal .)
    LESS_THAN       reduce using rule 6 (primaryTerm -> literal .)
    GREATER_THAN    reduce using rule 6 (primaryTerm -> literal .)
    KEYWORD         reduce using rule 6 (primaryTerm -> literal .)
    ASSIGNMENT      reduce using rule 6 (primaryTerm -> literal .)
    COLON_COLON     reduce using rule 6 (primaryTerm -> literal .)
    COMMA           reduce using rule 6 (primaryTerm -> literal .)
    DOT             reduce using rule 6 (primaryTerm -> literal .)
    $end            reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_PARENT    reduce using rule 6 (primaryTerm -> literal .)
    SEMICOLON       reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_BRACKET   reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (primaryTerm -> literal .)
    COLON           reduce using rule 6 (primaryTerm -> literal .)


state 27

    (42) chainedMessageArgument -> KEYWORD . binaryExpression
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    binaryExpression               shift and go to state 62
    prefixUnaryExpression          shift and go to state 11
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 28

    (62) literal -> FLOAT .

    LEFT_PARENT     reduce using rule 62 (literal -> FLOAT .)
    LEFT_BRACKET    reduce using rule 62 (literal -> FLOAT .)
    LEFT_CURLY_BRACKET reduce using rule 62 (literal -> FLOAT .)
    OPERATOR        reduce using rule 62 (literal -> FLOAT .)
    BAR             reduce using rule 62 (literal -> FLOAT .)
    LESS_THAN       reduce using rule 62 (literal -> FLOAT .)
    GREATER_THAN    reduce using rule 62 (literal -> FLOAT .)
    KEYWORD         reduce using rule 62 (literal -> FLOAT .)
    ASSIGNMENT      reduce using rule 62 (literal -> FLOAT .)
    COLON_COLON     reduce using rule 62 (literal -> FLOAT .)
    COMMA           reduce using rule 62 (literal -> FLOAT .)
    DOT             reduce using rule 62 (literal -> FLOAT .)
    $end            reduce using rule 62 (literal -> FLOAT .)
    RIGHT_PARENT    reduce using rule 62 (literal -> FLOAT .)
    SEMICOLON       reduce using rule 62 (literal -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 62 (literal -> FLOAT .)
    RIGHT_CURLY_BRACKET reduce using rule 62 (literal -> FLOAT .)
    IDENTIFIER      reduce using rule 62 (literal -> FLOAT .)
    FLOAT           reduce using rule 62 (literal -> FLOAT .)
    INTEGER         reduce using rule 62 (literal -> FLOAT .)
    CHARACTER       reduce using rule 62 (literal -> FLOAT .)
    STRING          reduce using rule 62 (literal -> FLOAT .)
    SYMBOL_IDENTIFIER reduce using rule 62 (literal -> FLOAT .)
    SYMBOL_KEYWORD  reduce using rule 62 (literal -> FLOAT .)
    SYMBOL_OPERATOR reduce using rule 62 (literal -> FLOAT .)
    SYMBOL_STRING   reduce using rule 62 (literal -> FLOAT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 62 (literal -> FLOAT .)
    MULTI_KEYWORD   reduce using rule 62 (literal -> FLOAT .)
    COLON           reduce using rule 62 (literal -> FLOAT .)


state 29

    (63) literal -> INTEGER .

    LEFT_PARENT     reduce using rule 63 (literal -> INTEGER .)
    LEFT_BRACKET    reduce using rule 63 (literal -> INTEGER .)
    LEFT_CURLY_BRACKET reduce using rule 63 (literal -> INTEGER .)
    OPERATOR        reduce using rule 63 (literal -> INTEGER .)
    BAR             reduce using rule 63 (literal -> INTEGER .)
    LESS_THAN       reduce using rule 63 (literal -> INTEGER .)
    GREATER_THAN    reduce using rule 63 (literal -> INTEGER .)
    KEYWORD         reduce using rule 63 (literal -> INTEGER .)
    ASSIGNMENT      reduce using rule 63 (literal -> INTEGER .)
    COLON_COLON     reduce using rule 63 (literal -> INTEGER .)
    COMMA           reduce using rule 63 (literal -> INTEGER .)
    DOT             reduce using rule 63 (literal -> INTEGER .)
    $end            reduce using rule 63 (literal -> INTEGER .)
    RIGHT_PARENT    reduce using rule 63 (literal -> INTEGER .)
    SEMICOLON       reduce using rule 63 (literal -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 63 (literal -> INTEGER .)
    RIGHT_CURLY_BRACKET reduce using rule 63 (literal -> INTEGER .)
    IDENTIFIER      reduce using rule 63 (literal -> INTEGER .)
    FLOAT           reduce using rule 63 (literal -> INTEGER .)
    INTEGER         reduce using rule 63 (literal -> INTEGER .)
    CHARACTER       reduce using rule 63 (literal -> INTEGER .)
    STRING          reduce using rule 63 (literal -> INTEGER .)
    SYMBOL_IDENTIFIER reduce using rule 63 (literal -> INTEGER .)
    SYMBOL_KEYWORD  reduce using rule 63 (literal -> INTEGER .)
    SYMBOL_OPERATOR reduce using rule 63 (literal -> INTEGER .)
    SYMBOL_STRING   reduce using rule 63 (literal -> INTEGER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 63 (literal -> INTEGER .)
    MULTI_KEYWORD   reduce using rule 63 (literal -> INTEGER .)
    COLON           reduce using rule 63 (literal -> INTEGER .)


state 30

    (64) literal -> CHARACTER .

    LEFT_PARENT     reduce using rule 64 (literal -> CHARACTER .)
    LEFT_BRACKET    reduce using rule 64 (literal -> CHARACTER .)
    LEFT_CURLY_BRACKET reduce using rule 64 (literal -> CHARACTER .)
    OPERATOR        reduce using rule 64 (literal -> CHARACTER .)
    BAR             reduce using rule 64 (literal -> CHARACTER .)
    LESS_THAN       reduce using rule 64 (literal -> CHARACTER .)
    GREATER_THAN    reduce using rule 64 (literal -> CHARACTER .)
    KEYWORD         reduce using rule 64 (literal -> CHARACTER .)
    ASSIGNMENT      reduce using rule 64 (literal -> CHARACTER .)
    COLON_COLON     reduce using rule 64 (literal -> CHARACTER .)
    COMMA           reduce using rule 64 (literal -> CHARACTER .)
    DOT             reduce using rule 64 (literal -> CHARACTER .)
    $end            reduce using rule 64 (literal -> CHARACTER .)
    RIGHT_PARENT    reduce using rule 64 (literal -> CHARACTER .)
    SEMICOLON       reduce using rule 64 (literal -> CHARACTER .)
    RIGHT_BRACKET   reduce using rule 64 (literal -> CHARACTER .)
    RIGHT_CURLY_BRACKET reduce using rule 64 (literal -> CHARACTER .)
    IDENTIFIER      reduce using rule 64 (literal -> CHARACTER .)
    FLOAT           reduce using rule 64 (literal -> CHARACTER .)
    INTEGER         reduce using rule 64 (literal -> CHARACTER .)
    CHARACTER       reduce using rule 64 (literal -> CHARACTER .)
    STRING          reduce using rule 64 (literal -> CHARACTER .)
    SYMBOL_IDENTIFIER reduce using rule 64 (literal -> CHARACTER .)
    SYMBOL_KEYWORD  reduce using rule 64 (literal -> CHARACTER .)
    SYMBOL_OPERATOR reduce using rule 64 (literal -> CHARACTER .)
    SYMBOL_STRING   reduce using rule 64 (literal -> CHARACTER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 64 (literal -> CHARACTER .)
    MULTI_KEYWORD   reduce using rule 64 (literal -> CHARACTER .)
    COLON           reduce using rule 64 (literal -> CHARACTER .)


state 31

    (65) literal -> STRING .

    LEFT_PARENT     reduce using rule 65 (literal -> STRING .)
    LEFT_BRACKET    reduce using rule 65 (literal -> STRING .)
    LEFT_CURLY_BRACKET reduce using rule 65 (literal -> STRING .)
    OPERATOR        reduce using rule 65 (literal -> STRING .)
    BAR             reduce using rule 65 (literal -> STRING .)
    LESS_THAN       reduce using rule 65 (literal -> STRING .)
    GREATER_THAN    reduce using rule 65 (literal -> STRING .)
    KEYWORD         reduce using rule 65 (literal -> STRING .)
    ASSIGNMENT      reduce using rule 65 (literal -> STRING .)
    COLON_COLON     reduce using rule 65 (literal -> STRING .)
    COMMA           reduce using rule 65 (literal -> STRING .)
    DOT             reduce using rule 65 (literal -> STRING .)
    $end            reduce using rule 65 (literal -> STRING .)
    RIGHT_PARENT    reduce using rule 65 (literal -> STRING .)
    SEMICOLON       reduce using rule 65 (literal -> STRING .)
    RIGHT_BRACKET   reduce using rule 65 (literal -> STRING .)
    RIGHT_CURLY_BRACKET reduce using rule 65 (literal -> STRING .)
    IDENTIFIER      reduce using rule 65 (literal -> STRING .)
    FLOAT           reduce using rule 65 (literal -> STRING .)
    INTEGER         reduce using rule 65 (literal -> STRING .)
    CHARACTER       reduce using rule 65 (literal -> STRING .)
    STRING          reduce using rule 65 (literal -> STRING .)
    SYMBOL_IDENTIFIER reduce using rule 65 (literal -> STRING .)
    SYMBOL_KEYWORD  reduce using rule 65 (literal -> STRING .)
    SYMBOL_OPERATOR reduce using rule 65 (literal -> STRING .)
    SYMBOL_STRING   reduce using rule 65 (literal -> STRING .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 65 (literal -> STRING .)
    MULTI_KEYWORD   reduce using rule 65 (literal -> STRING .)
    COLON           reduce using rule 65 (literal -> STRING .)


state 32

    (66) literal -> SYMBOL_IDENTIFIER .

    LEFT_PARENT     reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    OPERATOR        reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    BAR             reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    LESS_THAN       reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    GREATER_THAN    reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    KEYWORD         reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    ASSIGNMENT      reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    COLON_COLON     reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    COMMA           reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    DOT             reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    $end            reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    SEMICOLON       reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    IDENTIFIER      reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    FLOAT           reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    INTEGER         reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    CHARACTER       reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    STRING          reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_IDENTIFIER reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_KEYWORD  reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_OPERATOR reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_STRING   reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    MULTI_KEYWORD   reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)
    COLON           reduce using rule 66 (literal -> SYMBOL_IDENTIFIER .)


state 33

    (67) literal -> SYMBOL_KEYWORD .

    LEFT_PARENT     reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    LEFT_BRACKET    reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    LEFT_CURLY_BRACKET reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    OPERATOR        reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    BAR             reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    LESS_THAN       reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    GREATER_THAN    reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    KEYWORD         reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    ASSIGNMENT      reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    COLON_COLON     reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    COMMA           reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    DOT             reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    $end            reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    RIGHT_PARENT    reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    SEMICOLON       reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    RIGHT_BRACKET   reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    RIGHT_CURLY_BRACKET reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    IDENTIFIER      reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    FLOAT           reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    INTEGER         reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    CHARACTER       reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    STRING          reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_STRING   reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    MULTI_KEYWORD   reduce using rule 67 (literal -> SYMBOL_KEYWORD .)
    COLON           reduce using rule 67 (literal -> SYMBOL_KEYWORD .)


state 34

    (68) literal -> SYMBOL_OPERATOR .

    LEFT_PARENT     reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    LEFT_BRACKET    reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    OPERATOR        reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    BAR             reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    LESS_THAN       reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    GREATER_THAN    reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    KEYWORD         reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    ASSIGNMENT      reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    COLON_COLON     reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    COMMA           reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    DOT             reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    $end            reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    RIGHT_PARENT    reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    SEMICOLON       reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    RIGHT_BRACKET   reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    RIGHT_CURLY_BRACKET reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    IDENTIFIER      reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    FLOAT           reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    INTEGER         reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    CHARACTER       reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    STRING          reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_STRING   reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    MULTI_KEYWORD   reduce using rule 68 (literal -> SYMBOL_OPERATOR .)
    COLON           reduce using rule 68 (literal -> SYMBOL_OPERATOR .)


state 35

    (69) literal -> SYMBOL_STRING .

    LEFT_PARENT     reduce using rule 69 (literal -> SYMBOL_STRING .)
    LEFT_BRACKET    reduce using rule 69 (literal -> SYMBOL_STRING .)
    LEFT_CURLY_BRACKET reduce using rule 69 (literal -> SYMBOL_STRING .)
    OPERATOR        reduce using rule 69 (literal -> SYMBOL_STRING .)
    BAR             reduce using rule 69 (literal -> SYMBOL_STRING .)
    LESS_THAN       reduce using rule 69 (literal -> SYMBOL_STRING .)
    GREATER_THAN    reduce using rule 69 (literal -> SYMBOL_STRING .)
    KEYWORD         reduce using rule 69 (literal -> SYMBOL_STRING .)
    ASSIGNMENT      reduce using rule 69 (literal -> SYMBOL_STRING .)
    COLON_COLON     reduce using rule 69 (literal -> SYMBOL_STRING .)
    COMMA           reduce using rule 69 (literal -> SYMBOL_STRING .)
    DOT             reduce using rule 69 (literal -> SYMBOL_STRING .)
    $end            reduce using rule 69 (literal -> SYMBOL_STRING .)
    RIGHT_PARENT    reduce using rule 69 (literal -> SYMBOL_STRING .)
    SEMICOLON       reduce using rule 69 (literal -> SYMBOL_STRING .)
    RIGHT_BRACKET   reduce using rule 69 (literal -> SYMBOL_STRING .)
    RIGHT_CURLY_BRACKET reduce using rule 69 (literal -> SYMBOL_STRING .)
    IDENTIFIER      reduce using rule 69 (literal -> SYMBOL_STRING .)
    FLOAT           reduce using rule 69 (literal -> SYMBOL_STRING .)
    INTEGER         reduce using rule 69 (literal -> SYMBOL_STRING .)
    CHARACTER       reduce using rule 69 (literal -> SYMBOL_STRING .)
    STRING          reduce using rule 69 (literal -> SYMBOL_STRING .)
    SYMBOL_IDENTIFIER reduce using rule 69 (literal -> SYMBOL_STRING .)
    SYMBOL_KEYWORD  reduce using rule 69 (literal -> SYMBOL_STRING .)
    SYMBOL_OPERATOR reduce using rule 69 (literal -> SYMBOL_STRING .)
    SYMBOL_STRING   reduce using rule 69 (literal -> SYMBOL_STRING .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 69 (literal -> SYMBOL_STRING .)
    MULTI_KEYWORD   reduce using rule 69 (literal -> SYMBOL_STRING .)
    COLON           reduce using rule 69 (literal -> SYMBOL_STRING .)


state 36

    (70) literal -> LITERAL_ARRAY_LEFT_PARENT . literalArrayElements RIGHT_PARENT
    (71) literalArrayElements -> .
    (72) literalArrayElements -> . literalArrayElements literalArrayElement

    RIGHT_PARENT    reduce using rule 71 (literalArrayElements -> .)
    IDENTIFIER      reduce using rule 71 (literalArrayElements -> .)
    LEFT_PARENT     reduce using rule 71 (literalArrayElements -> .)
    FLOAT           reduce using rule 71 (literalArrayElements -> .)
    INTEGER         reduce using rule 71 (literalArrayElements -> .)
    CHARACTER       reduce using rule 71 (literalArrayElements -> .)
    STRING          reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_IDENTIFIER reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_KEYWORD  reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_OPERATOR reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_STRING   reduce using rule 71 (literalArrayElements -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 71 (literalArrayElements -> .)
    KEYWORD         reduce using rule 71 (literalArrayElements -> .)
    MULTI_KEYWORD   reduce using rule 71 (literalArrayElements -> .)
    OPERATOR        reduce using rule 71 (literalArrayElements -> .)
    BAR             reduce using rule 71 (literalArrayElements -> .)
    LESS_THAN       reduce using rule 71 (literalArrayElements -> .)
    GREATER_THAN    reduce using rule 71 (literalArrayElements -> .)

    literalArrayElements           shift and go to state 63

state 37

    (28) block -> LEFT_CURLY_BRACKET . optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (19) optionalBlockClosureHeader -> . blockClosureHeader
    (20) optionalBlockClosureHeader -> .
    (18) blockClosureHeader -> . blockArguments blockResultType BAR
    (29) blockArguments -> .
    (30) blockArguments -> . blockArguments blockArgument

    LESS_THAN       reduce using rule 20 (optionalBlockClosureHeader -> .)
    QUOTE           reduce using rule 20 (optionalBlockClosureHeader -> .)
    QUASI_QUOTE     reduce using rule 20 (optionalBlockClosureHeader -> .)
    QUASI_UNQUOTE   reduce using rule 20 (optionalBlockClosureHeader -> .)
    SPLICE          reduce using rule 20 (optionalBlockClosureHeader -> .)
    OPERATOR        reduce using rule 20 (optionalBlockClosureHeader -> .)
    IDENTIFIER      reduce using rule 20 (optionalBlockClosureHeader -> .)
    LEFT_PARENT     reduce using rule 20 (optionalBlockClosureHeader -> .)
    KEYWORD         reduce using rule 20 (optionalBlockClosureHeader -> .)
    FLOAT           reduce using rule 20 (optionalBlockClosureHeader -> .)
    INTEGER         reduce using rule 20 (optionalBlockClosureHeader -> .)
    CHARACTER       reduce using rule 20 (optionalBlockClosureHeader -> .)
    STRING          reduce using rule 20 (optionalBlockClosureHeader -> .)
    SYMBOL_IDENTIFIER reduce using rule 20 (optionalBlockClosureHeader -> .)
    SYMBOL_KEYWORD  reduce using rule 20 (optionalBlockClosureHeader -> .)
    SYMBOL_OPERATOR reduce using rule 20 (optionalBlockClosureHeader -> .)
    SYMBOL_STRING   reduce using rule 20 (optionalBlockClosureHeader -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 20 (optionalBlockClosureHeader -> .)
    LEFT_CURLY_BRACKET reduce using rule 20 (optionalBlockClosureHeader -> .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (optionalBlockClosureHeader -> .)
    DOT             reduce using rule 20 (optionalBlockClosureHeader -> .)
    COLON_COLON     reduce using rule 29 (blockArguments -> .)
    COLON           reduce using rule 29 (blockArguments -> .)
    BAR             reduce using rule 29 (blockArguments -> .)

    optionalBlockClosureHeader     shift and go to state 64
    blockClosureHeader             shift and go to state 65
    blockArguments                 shift and go to state 66

state 38

    (2) expressionList -> expressionList DOT . optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    DOT             reduce using rule 3 (optionalExpression -> .)
    $end            reduce using rule 3 (optionalExpression -> .)
    RIGHT_PARENT    reduce using rule 3 (optionalExpression -> .)
    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    optionalExpression             shift and go to state 67
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 39

    (60) commaExpression -> commaExpressionContent COMMA .
    (58) commaExpressionContent -> commaExpressionContent COMMA . assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    DOT             reduce using rule 60 (commaExpression -> commaExpressionContent COMMA .)
    $end            reduce using rule 60 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_PARENT    reduce using rule 60 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_BRACKET   reduce using rule 60 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_CURLY_BRACKET reduce using rule 60 (commaExpression -> commaExpressionContent COMMA .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    assignmentExpression           shift and go to state 68
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 40

    (56) assignmentExpression -> lowPrecedenceExpression ASSIGNMENT . assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    lowPrecedenceExpression        shift and go to state 7
    assignmentExpression           shift and go to state 69
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 41

    (53) lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator . chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    chainExpression                shift and go to state 70
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 42

    (54) lowPrecedenceOperator -> COLON_COLON . anyOperator
    (78) anyOperator -> . OPERATOR
    (79) anyOperator -> . BAR
    (80) anyOperator -> . LESS_THAN
    (81) anyOperator -> . GREATER_THAN

    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    anyOperator                    shift and go to state 71

state 43

    (50) chainExpression -> binaryExpression optionalChainedMessages .

    ASSIGNMENT      reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    COLON_COLON     reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    COMMA           reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    DOT             reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    $end            reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    RIGHT_PARENT    reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    RIGHT_BRACKET   reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 50 (chainExpression -> binaryExpression optionalChainedMessages .)


state 44

    (41) binaryExpression -> binaryExpression anyOperator . prefixUnaryExpression
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    prefixUnaryExpression          shift and go to state 72
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 45

    (49) optionalChainedMessages -> chainedMessages .
    (47) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    COLON_COLON     reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    COMMA           reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    DOT             reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    $end            reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    RIGHT_PARENT    reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    RIGHT_BRACKET   reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (optionalChainedMessages -> chainedMessages .)
    SEMICOLON       shift and go to state 50


state 46

    (78) anyOperator -> OPERATOR .

    QUOTE           reduce using rule 78 (anyOperator -> OPERATOR .)
    QUASI_QUOTE     reduce using rule 78 (anyOperator -> OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 78 (anyOperator -> OPERATOR .)
    SPLICE          reduce using rule 78 (anyOperator -> OPERATOR .)
    OPERATOR        reduce using rule 78 (anyOperator -> OPERATOR .)
    IDENTIFIER      reduce using rule 78 (anyOperator -> OPERATOR .)
    LEFT_PARENT     reduce using rule 78 (anyOperator -> OPERATOR .)
    FLOAT           reduce using rule 78 (anyOperator -> OPERATOR .)
    INTEGER         reduce using rule 78 (anyOperator -> OPERATOR .)
    CHARACTER       reduce using rule 78 (anyOperator -> OPERATOR .)
    STRING          reduce using rule 78 (anyOperator -> OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 78 (anyOperator -> OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 78 (anyOperator -> OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 78 (anyOperator -> OPERATOR .)
    SYMBOL_STRING   reduce using rule 78 (anyOperator -> OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 78 (anyOperator -> OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 78 (anyOperator -> OPERATOR .)
    KEYWORD         reduce using rule 78 (anyOperator -> OPERATOR .)
    RIGHT_PARENT    reduce using rule 78 (anyOperator -> OPERATOR .)
    MULTI_KEYWORD   reduce using rule 78 (anyOperator -> OPERATOR .)
    BAR             reduce using rule 78 (anyOperator -> OPERATOR .)
    LESS_THAN       reduce using rule 78 (anyOperator -> OPERATOR .)
    GREATER_THAN    reduce using rule 78 (anyOperator -> OPERATOR .)


state 47

    (79) anyOperator -> BAR .

    QUOTE           reduce using rule 79 (anyOperator -> BAR .)
    QUASI_QUOTE     reduce using rule 79 (anyOperator -> BAR .)
    QUASI_UNQUOTE   reduce using rule 79 (anyOperator -> BAR .)
    SPLICE          reduce using rule 79 (anyOperator -> BAR .)
    OPERATOR        reduce using rule 79 (anyOperator -> BAR .)
    IDENTIFIER      reduce using rule 79 (anyOperator -> BAR .)
    LEFT_PARENT     reduce using rule 79 (anyOperator -> BAR .)
    FLOAT           reduce using rule 79 (anyOperator -> BAR .)
    INTEGER         reduce using rule 79 (anyOperator -> BAR .)
    CHARACTER       reduce using rule 79 (anyOperator -> BAR .)
    STRING          reduce using rule 79 (anyOperator -> BAR .)
    SYMBOL_IDENTIFIER reduce using rule 79 (anyOperator -> BAR .)
    SYMBOL_KEYWORD  reduce using rule 79 (anyOperator -> BAR .)
    SYMBOL_OPERATOR reduce using rule 79 (anyOperator -> BAR .)
    SYMBOL_STRING   reduce using rule 79 (anyOperator -> BAR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 79 (anyOperator -> BAR .)
    LEFT_CURLY_BRACKET reduce using rule 79 (anyOperator -> BAR .)
    KEYWORD         reduce using rule 79 (anyOperator -> BAR .)
    RIGHT_PARENT    reduce using rule 79 (anyOperator -> BAR .)
    MULTI_KEYWORD   reduce using rule 79 (anyOperator -> BAR .)
    BAR             reduce using rule 79 (anyOperator -> BAR .)
    LESS_THAN       reduce using rule 79 (anyOperator -> BAR .)
    GREATER_THAN    reduce using rule 79 (anyOperator -> BAR .)


state 48

    (80) anyOperator -> LESS_THAN .

    QUOTE           reduce using rule 80 (anyOperator -> LESS_THAN .)
    QUASI_QUOTE     reduce using rule 80 (anyOperator -> LESS_THAN .)
    QUASI_UNQUOTE   reduce using rule 80 (anyOperator -> LESS_THAN .)
    SPLICE          reduce using rule 80 (anyOperator -> LESS_THAN .)
    OPERATOR        reduce using rule 80 (anyOperator -> LESS_THAN .)
    IDENTIFIER      reduce using rule 80 (anyOperator -> LESS_THAN .)
    LEFT_PARENT     reduce using rule 80 (anyOperator -> LESS_THAN .)
    FLOAT           reduce using rule 80 (anyOperator -> LESS_THAN .)
    INTEGER         reduce using rule 80 (anyOperator -> LESS_THAN .)
    CHARACTER       reduce using rule 80 (anyOperator -> LESS_THAN .)
    STRING          reduce using rule 80 (anyOperator -> LESS_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 80 (anyOperator -> LESS_THAN .)
    SYMBOL_KEYWORD  reduce using rule 80 (anyOperator -> LESS_THAN .)
    SYMBOL_OPERATOR reduce using rule 80 (anyOperator -> LESS_THAN .)
    SYMBOL_STRING   reduce using rule 80 (anyOperator -> LESS_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 80 (anyOperator -> LESS_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 80 (anyOperator -> LESS_THAN .)
    KEYWORD         reduce using rule 80 (anyOperator -> LESS_THAN .)
    RIGHT_PARENT    reduce using rule 80 (anyOperator -> LESS_THAN .)
    MULTI_KEYWORD   reduce using rule 80 (anyOperator -> LESS_THAN .)
    BAR             reduce using rule 80 (anyOperator -> LESS_THAN .)
    LESS_THAN       reduce using rule 80 (anyOperator -> LESS_THAN .)
    GREATER_THAN    reduce using rule 80 (anyOperator -> LESS_THAN .)


state 49

    (81) anyOperator -> GREATER_THAN .

    QUOTE           reduce using rule 81 (anyOperator -> GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 81 (anyOperator -> GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 81 (anyOperator -> GREATER_THAN .)
    SPLICE          reduce using rule 81 (anyOperator -> GREATER_THAN .)
    OPERATOR        reduce using rule 81 (anyOperator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 81 (anyOperator -> GREATER_THAN .)
    LEFT_PARENT     reduce using rule 81 (anyOperator -> GREATER_THAN .)
    FLOAT           reduce using rule 81 (anyOperator -> GREATER_THAN .)
    INTEGER         reduce using rule 81 (anyOperator -> GREATER_THAN .)
    CHARACTER       reduce using rule 81 (anyOperator -> GREATER_THAN .)
    STRING          reduce using rule 81 (anyOperator -> GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 81 (anyOperator -> GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 81 (anyOperator -> GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 81 (anyOperator -> GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 81 (anyOperator -> GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 81 (anyOperator -> GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 81 (anyOperator -> GREATER_THAN .)
    KEYWORD         reduce using rule 81 (anyOperator -> GREATER_THAN .)
    RIGHT_PARENT    reduce using rule 81 (anyOperator -> GREATER_THAN .)
    MULTI_KEYWORD   reduce using rule 81 (anyOperator -> GREATER_THAN .)
    BAR             reduce using rule 81 (anyOperator -> GREATER_THAN .)
    LESS_THAN       reduce using rule 81 (anyOperator -> GREATER_THAN .)
    GREATER_THAN    reduce using rule 81 (anyOperator -> GREATER_THAN .)


state 50

    (47) chainedMessages -> chainedMessages SEMICOLON . chainedMessage
    (45) chainedMessage -> . chainedMessageArguments
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (42) chainedMessageArgument -> . KEYWORD binaryExpression

    KEYWORD         shift and go to state 27

    chainedMessage                 shift and go to state 73
    chainedMessageArguments        shift and go to state 15
    chainedMessageArgument         shift and go to state 24

state 51

    (15) primaryExpression -> primaryExpression LEFT_PARENT . expressionList RIGHT_PARENT
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    RIGHT_PARENT    reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryExpression              shift and go to state 13
    expressionList                 shift and go to state 74
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 52

    (16) primaryExpression -> primaryExpression LEFT_BRACKET . expressionList RIGHT_BRACKET
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryExpression              shift and go to state 13
    expressionList                 shift and go to state 75
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 53

    (17) primaryExpression -> primaryExpression block .

    LEFT_PARENT     reduce using rule 17 (primaryExpression -> primaryExpression block .)
    LEFT_BRACKET    reduce using rule 17 (primaryExpression -> primaryExpression block .)
    LEFT_CURLY_BRACKET reduce using rule 17 (primaryExpression -> primaryExpression block .)
    OPERATOR        reduce using rule 17 (primaryExpression -> primaryExpression block .)
    BAR             reduce using rule 17 (primaryExpression -> primaryExpression block .)
    LESS_THAN       reduce using rule 17 (primaryExpression -> primaryExpression block .)
    GREATER_THAN    reduce using rule 17 (primaryExpression -> primaryExpression block .)
    KEYWORD         reduce using rule 17 (primaryExpression -> primaryExpression block .)
    ASSIGNMENT      reduce using rule 17 (primaryExpression -> primaryExpression block .)
    COLON_COLON     reduce using rule 17 (primaryExpression -> primaryExpression block .)
    COMMA           reduce using rule 17 (primaryExpression -> primaryExpression block .)
    DOT             reduce using rule 17 (primaryExpression -> primaryExpression block .)
    $end            reduce using rule 17 (primaryExpression -> primaryExpression block .)
    RIGHT_PARENT    reduce using rule 17 (primaryExpression -> primaryExpression block .)
    SEMICOLON       reduce using rule 17 (primaryExpression -> primaryExpression block .)
    RIGHT_BRACKET   reduce using rule 17 (primaryExpression -> primaryExpression block .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (primaryExpression -> primaryExpression block .)


state 54

    (39) prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .

    OPERATOR        reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    BAR             reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    LESS_THAN       reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    KEYWORD         reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COLON_COLON     reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COMMA           reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    DOT             reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    $end            reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    SEMICOLON       reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)


state 55

    (44) chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .

    KEYWORD         reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    SEMICOLON       reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    ASSIGNMENT      reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    COLON_COLON     reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    COMMA           reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    DOT             reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    $end            reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_PARENT    reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_BRACKET   reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_CURLY_BRACKET reduce using rule 44 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)


state 56

    (11) primaryExpression -> QUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    OPERATOR        reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    BAR             reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    LESS_THAN       reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    KEYWORD         reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    COLON_COLON     reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    COMMA           reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    DOT             reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    $end            reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    SEMICOLON       reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)


state 57

    (12) primaryExpression -> QUASI_QUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    OPERATOR        reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    BAR             reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LESS_THAN       reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    KEYWORD         reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COLON_COLON     reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COMMA           reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    DOT             reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    $end            reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    SEMICOLON       reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)


state 58

    (13) primaryExpression -> QUASI_UNQUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    OPERATOR        reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    BAR             reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LESS_THAN       reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    KEYWORD         reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COLON_COLON     reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COMMA           reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    DOT             reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    $end            reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    SEMICOLON       reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)


state 59

    (14) primaryExpression -> SPLICE primaryTerm .

    LEFT_PARENT     reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    LEFT_BRACKET    reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    OPERATOR        reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    BAR             reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    LESS_THAN       reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    GREATER_THAN    reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    KEYWORD         reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    ASSIGNMENT      reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    COLON_COLON     reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    COMMA           reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    DOT             reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    $end            reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_PARENT    reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    SEMICOLON       reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)


state 60

    (8) primaryTerm -> LEFT_PARENT RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    OPERATOR        reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    BAR             reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LESS_THAN       reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    KEYWORD         reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COLON_COLON     reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COMMA           reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    DOT             reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    $end            reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    SEMICOLON       reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COLON           reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)


state 61

    (9) primaryTerm -> LEFT_PARENT expression . RIGHT_PARENT

    RIGHT_PARENT    shift and go to state 76


state 62

    (42) chainedMessageArgument -> KEYWORD binaryExpression .
    (41) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (78) anyOperator -> . OPERATOR
    (79) anyOperator -> . BAR
    (80) anyOperator -> . LESS_THAN
    (81) anyOperator -> . GREATER_THAN

    KEYWORD         reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    SEMICOLON       reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    ASSIGNMENT      reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    COLON_COLON     reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    COMMA           reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    DOT             reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    $end            reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_PARENT    reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_BRACKET   reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (chainedMessageArgument -> KEYWORD binaryExpression .)
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    anyOperator                    shift and go to state 44

state 63

    (70) literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements . RIGHT_PARENT
    (72) literalArrayElements -> literalArrayElements . literalArrayElement
    (73) literalArrayElement -> . literal
    (74) literalArrayElement -> . IDENTIFIER
    (75) literalArrayElement -> . anyKeyword
    (76) literalArrayElement -> . anyOperator
    (77) literalArrayElement -> . LEFT_PARENT literalArrayElements RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (83) anyKeyword -> . KEYWORD
    (84) anyKeyword -> . MULTI_KEYWORD
    (78) anyOperator -> . OPERATOR
    (79) anyOperator -> . BAR
    (80) anyOperator -> . LESS_THAN
    (81) anyOperator -> . GREATER_THAN

    RIGHT_PARENT    shift and go to state 77
    IDENTIFIER      shift and go to state 80
    LEFT_PARENT     shift and go to state 83
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    KEYWORD         shift and go to state 84
    MULTI_KEYWORD   shift and go to state 85
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    literalArrayElement            shift and go to state 78
    literal                        shift and go to state 79
    anyKeyword                     shift and go to state 81
    anyOperator                    shift and go to state 82

state 64

    (28) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader . pragmaList expressionList RIGHT_CURLY_BRACKET
    (21) pragmaList -> .
    (22) pragmaList -> . pragmaList pragma

    LESS_THAN       reduce using rule 21 (pragmaList -> .)
    QUOTE           reduce using rule 21 (pragmaList -> .)
    QUASI_QUOTE     reduce using rule 21 (pragmaList -> .)
    QUASI_UNQUOTE   reduce using rule 21 (pragmaList -> .)
    SPLICE          reduce using rule 21 (pragmaList -> .)
    OPERATOR        reduce using rule 21 (pragmaList -> .)
    IDENTIFIER      reduce using rule 21 (pragmaList -> .)
    LEFT_PARENT     reduce using rule 21 (pragmaList -> .)
    KEYWORD         reduce using rule 21 (pragmaList -> .)
    FLOAT           reduce using rule 21 (pragmaList -> .)
    INTEGER         reduce using rule 21 (pragmaList -> .)
    CHARACTER       reduce using rule 21 (pragmaList -> .)
    STRING          reduce using rule 21 (pragmaList -> .)
    SYMBOL_IDENTIFIER reduce using rule 21 (pragmaList -> .)
    SYMBOL_KEYWORD  reduce using rule 21 (pragmaList -> .)
    SYMBOL_OPERATOR reduce using rule 21 (pragmaList -> .)
    SYMBOL_STRING   reduce using rule 21 (pragmaList -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 21 (pragmaList -> .)
    LEFT_CURLY_BRACKET reduce using rule 21 (pragmaList -> .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (pragmaList -> .)
    DOT             reduce using rule 21 (pragmaList -> .)

    pragmaList                     shift and go to state 86

state 65

    (19) optionalBlockClosureHeader -> blockClosureHeader .

    LESS_THAN       reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUOTE           reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUASI_QUOTE     reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUASI_UNQUOTE   reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    SPLICE          reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    OPERATOR        reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    IDENTIFIER      reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    LEFT_PARENT     reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    KEYWORD         reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    FLOAT           reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    INTEGER         reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    CHARACTER       reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    STRING          reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_IDENTIFIER reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_KEYWORD  reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_OPERATOR reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_STRING   reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    LEFT_CURLY_BRACKET reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    RIGHT_CURLY_BRACKET reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)
    DOT             reduce using rule 19 (optionalBlockClosureHeader -> blockClosureHeader .)


state 66

    (18) blockClosureHeader -> blockArguments . blockResultType BAR
    (30) blockArguments -> blockArguments . blockArgument
    (34) blockResultType -> .
    (35) blockResultType -> . COLON_COLON primaryExpression
    (33) blockArgument -> . COLON optionalBlockArgumentType expandableIdentifier

    BAR             reduce using rule 34 (blockResultType -> .)
    COLON_COLON     shift and go to state 89
    COLON           shift and go to state 90

    blockResultType                shift and go to state 87
    blockArgument                  shift and go to state 88

state 67

    (2) expressionList -> expressionList DOT optionalExpression .

    DOT             reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    $end            reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_PARENT    reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_BRACKET   reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)


state 68

    (58) commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .

    COMMA           reduce using rule 58 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    DOT             reduce using rule 58 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    $end            reduce using rule 58 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_PARENT    reduce using rule 58 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 58 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 58 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)


state 69

    (56) assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .

    COMMA           reduce using rule 56 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    DOT             reduce using rule 56 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    $end            reduce using rule 56 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_PARENT    reduce using rule 56 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 56 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 56 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)


state 70

    (53) lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .

    ASSIGNMENT      reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    COLON_COLON     reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    COMMA           reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    DOT             reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    $end            reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_PARENT    reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_BRACKET   reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 53 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)


state 71

    (54) lowPrecedenceOperator -> COLON_COLON anyOperator .

    QUOTE           reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    QUASI_QUOTE     reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    QUASI_UNQUOTE   reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SPLICE          reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    OPERATOR        reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    IDENTIFIER      reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LEFT_PARENT     reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    KEYWORD         reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    FLOAT           reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    INTEGER         reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    CHARACTER       reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    STRING          reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_IDENTIFIER reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_KEYWORD  reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_OPERATOR reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_STRING   reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LEFT_CURLY_BRACKET reduce using rule 54 (lowPrecedenceOperator -> COLON_COLON anyOperator .)


state 72

    (41) binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .

    OPERATOR        reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    BAR             reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    LESS_THAN       reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    KEYWORD         reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COLON_COLON     reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COMMA           reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    DOT             reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    $end            reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    SEMICOLON       reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)


state 73

    (47) chainedMessages -> chainedMessages SEMICOLON chainedMessage .

    SEMICOLON       reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    ASSIGNMENT      reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    COLON_COLON     reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    COMMA           reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    DOT             reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    $end            reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_PARENT    reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_BRACKET   reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_CURLY_BRACKET reduce using rule 47 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)


state 74

    (15) primaryExpression -> primaryExpression LEFT_PARENT expressionList . RIGHT_PARENT
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_PARENT    shift and go to state 91
    DOT             shift and go to state 38


state 75

    (16) primaryExpression -> primaryExpression LEFT_BRACKET expressionList . RIGHT_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_BRACKET   shift and go to state 92
    DOT             shift and go to state 38


state 76

    (9) primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    OPERATOR        reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    BAR             reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LESS_THAN       reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    KEYWORD         reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COLON_COLON     reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COMMA           reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    DOT             reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    $end            reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    SEMICOLON       reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COLON           reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)


state 77

    (70) literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    OPERATOR        reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    BAR             reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LESS_THAN       reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    KEYWORD         reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COLON_COLON     reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COMMA           reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    DOT             reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    $end            reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SEMICOLON       reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    FLOAT           reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    INTEGER         reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    CHARACTER       reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    STRING          reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_IDENTIFIER reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_KEYWORD  reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_OPERATOR reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_STRING   reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    MULTI_KEYWORD   reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COLON           reduce using rule 70 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)


state 78

    (72) literalArrayElements -> literalArrayElements literalArrayElement .

    RIGHT_PARENT    reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    IDENTIFIER      reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LEFT_PARENT     reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    FLOAT           reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    INTEGER         reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    CHARACTER       reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    STRING          reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_IDENTIFIER reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_KEYWORD  reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_OPERATOR reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_STRING   reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    KEYWORD         reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    MULTI_KEYWORD   reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    OPERATOR        reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    BAR             reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LESS_THAN       reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)
    GREATER_THAN    reduce using rule 72 (literalArrayElements -> literalArrayElements literalArrayElement .)


state 79

    (73) literalArrayElement -> literal .

    RIGHT_PARENT    reduce using rule 73 (literalArrayElement -> literal .)
    IDENTIFIER      reduce using rule 73 (literalArrayElement -> literal .)
    LEFT_PARENT     reduce using rule 73 (literalArrayElement -> literal .)
    FLOAT           reduce using rule 73 (literalArrayElement -> literal .)
    INTEGER         reduce using rule 73 (literalArrayElement -> literal .)
    CHARACTER       reduce using rule 73 (literalArrayElement -> literal .)
    STRING          reduce using rule 73 (literalArrayElement -> literal .)
    SYMBOL_IDENTIFIER reduce using rule 73 (literalArrayElement -> literal .)
    SYMBOL_KEYWORD  reduce using rule 73 (literalArrayElement -> literal .)
    SYMBOL_OPERATOR reduce using rule 73 (literalArrayElement -> literal .)
    SYMBOL_STRING   reduce using rule 73 (literalArrayElement -> literal .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 73 (literalArrayElement -> literal .)
    KEYWORD         reduce using rule 73 (literalArrayElement -> literal .)
    MULTI_KEYWORD   reduce using rule 73 (literalArrayElement -> literal .)
    OPERATOR        reduce using rule 73 (literalArrayElement -> literal .)
    BAR             reduce using rule 73 (literalArrayElement -> literal .)
    LESS_THAN       reduce using rule 73 (literalArrayElement -> literal .)
    GREATER_THAN    reduce using rule 73 (literalArrayElement -> literal .)


state 80

    (74) literalArrayElement -> IDENTIFIER .

    RIGHT_PARENT    reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    LEFT_PARENT     reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    FLOAT           reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    INTEGER         reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    CHARACTER       reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    STRING          reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_IDENTIFIER reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_KEYWORD  reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_OPERATOR reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_STRING   reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    KEYWORD         reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    MULTI_KEYWORD   reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    OPERATOR        reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    BAR             reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    LESS_THAN       reduce using rule 74 (literalArrayElement -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 74 (literalArrayElement -> IDENTIFIER .)


state 81

    (75) literalArrayElement -> anyKeyword .

    RIGHT_PARENT    reduce using rule 75 (literalArrayElement -> anyKeyword .)
    IDENTIFIER      reduce using rule 75 (literalArrayElement -> anyKeyword .)
    LEFT_PARENT     reduce using rule 75 (literalArrayElement -> anyKeyword .)
    FLOAT           reduce using rule 75 (literalArrayElement -> anyKeyword .)
    INTEGER         reduce using rule 75 (literalArrayElement -> anyKeyword .)
    CHARACTER       reduce using rule 75 (literalArrayElement -> anyKeyword .)
    STRING          reduce using rule 75 (literalArrayElement -> anyKeyword .)
    SYMBOL_IDENTIFIER reduce using rule 75 (literalArrayElement -> anyKeyword .)
    SYMBOL_KEYWORD  reduce using rule 75 (literalArrayElement -> anyKeyword .)
    SYMBOL_OPERATOR reduce using rule 75 (literalArrayElement -> anyKeyword .)
    SYMBOL_STRING   reduce using rule 75 (literalArrayElement -> anyKeyword .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 75 (literalArrayElement -> anyKeyword .)
    KEYWORD         reduce using rule 75 (literalArrayElement -> anyKeyword .)
    MULTI_KEYWORD   reduce using rule 75 (literalArrayElement -> anyKeyword .)
    OPERATOR        reduce using rule 75 (literalArrayElement -> anyKeyword .)
    BAR             reduce using rule 75 (literalArrayElement -> anyKeyword .)
    LESS_THAN       reduce using rule 75 (literalArrayElement -> anyKeyword .)
    GREATER_THAN    reduce using rule 75 (literalArrayElement -> anyKeyword .)


state 82

    (76) literalArrayElement -> anyOperator .

    RIGHT_PARENT    reduce using rule 76 (literalArrayElement -> anyOperator .)
    IDENTIFIER      reduce using rule 76 (literalArrayElement -> anyOperator .)
    LEFT_PARENT     reduce using rule 76 (literalArrayElement -> anyOperator .)
    FLOAT           reduce using rule 76 (literalArrayElement -> anyOperator .)
    INTEGER         reduce using rule 76 (literalArrayElement -> anyOperator .)
    CHARACTER       reduce using rule 76 (literalArrayElement -> anyOperator .)
    STRING          reduce using rule 76 (literalArrayElement -> anyOperator .)
    SYMBOL_IDENTIFIER reduce using rule 76 (literalArrayElement -> anyOperator .)
    SYMBOL_KEYWORD  reduce using rule 76 (literalArrayElement -> anyOperator .)
    SYMBOL_OPERATOR reduce using rule 76 (literalArrayElement -> anyOperator .)
    SYMBOL_STRING   reduce using rule 76 (literalArrayElement -> anyOperator .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 76 (literalArrayElement -> anyOperator .)
    KEYWORD         reduce using rule 76 (literalArrayElement -> anyOperator .)
    MULTI_KEYWORD   reduce using rule 76 (literalArrayElement -> anyOperator .)
    OPERATOR        reduce using rule 76 (literalArrayElement -> anyOperator .)
    BAR             reduce using rule 76 (literalArrayElement -> anyOperator .)
    LESS_THAN       reduce using rule 76 (literalArrayElement -> anyOperator .)
    GREATER_THAN    reduce using rule 76 (literalArrayElement -> anyOperator .)


state 83

    (77) literalArrayElement -> LEFT_PARENT . literalArrayElements RIGHT_PARENT
    (71) literalArrayElements -> .
    (72) literalArrayElements -> . literalArrayElements literalArrayElement

    RIGHT_PARENT    reduce using rule 71 (literalArrayElements -> .)
    IDENTIFIER      reduce using rule 71 (literalArrayElements -> .)
    LEFT_PARENT     reduce using rule 71 (literalArrayElements -> .)
    FLOAT           reduce using rule 71 (literalArrayElements -> .)
    INTEGER         reduce using rule 71 (literalArrayElements -> .)
    CHARACTER       reduce using rule 71 (literalArrayElements -> .)
    STRING          reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_IDENTIFIER reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_KEYWORD  reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_OPERATOR reduce using rule 71 (literalArrayElements -> .)
    SYMBOL_STRING   reduce using rule 71 (literalArrayElements -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 71 (literalArrayElements -> .)
    KEYWORD         reduce using rule 71 (literalArrayElements -> .)
    MULTI_KEYWORD   reduce using rule 71 (literalArrayElements -> .)
    OPERATOR        reduce using rule 71 (literalArrayElements -> .)
    BAR             reduce using rule 71 (literalArrayElements -> .)
    LESS_THAN       reduce using rule 71 (literalArrayElements -> .)
    GREATER_THAN    reduce using rule 71 (literalArrayElements -> .)

    literalArrayElements           shift and go to state 93

state 84

    (83) anyKeyword -> KEYWORD .

    RIGHT_PARENT    reduce using rule 83 (anyKeyword -> KEYWORD .)
    IDENTIFIER      reduce using rule 83 (anyKeyword -> KEYWORD .)
    LEFT_PARENT     reduce using rule 83 (anyKeyword -> KEYWORD .)
    FLOAT           reduce using rule 83 (anyKeyword -> KEYWORD .)
    INTEGER         reduce using rule 83 (anyKeyword -> KEYWORD .)
    CHARACTER       reduce using rule 83 (anyKeyword -> KEYWORD .)
    STRING          reduce using rule 83 (anyKeyword -> KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 83 (anyKeyword -> KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 83 (anyKeyword -> KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 83 (anyKeyword -> KEYWORD .)
    SYMBOL_STRING   reduce using rule 83 (anyKeyword -> KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 83 (anyKeyword -> KEYWORD .)
    KEYWORD         reduce using rule 83 (anyKeyword -> KEYWORD .)
    MULTI_KEYWORD   reduce using rule 83 (anyKeyword -> KEYWORD .)
    OPERATOR        reduce using rule 83 (anyKeyword -> KEYWORD .)
    BAR             reduce using rule 83 (anyKeyword -> KEYWORD .)
    LESS_THAN       reduce using rule 83 (anyKeyword -> KEYWORD .)
    GREATER_THAN    reduce using rule 83 (anyKeyword -> KEYWORD .)


state 85

    (84) anyKeyword -> MULTI_KEYWORD .

    RIGHT_PARENT    reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    IDENTIFIER      reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    LEFT_PARENT     reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    FLOAT           reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    INTEGER         reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    CHARACTER       reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    STRING          reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_STRING   reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    KEYWORD         reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    MULTI_KEYWORD   reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    OPERATOR        reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    BAR             reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    LESS_THAN       reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)
    GREATER_THAN    reduce using rule 84 (anyKeyword -> MULTI_KEYWORD .)


state 86

    (28) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList . expressionList RIGHT_CURLY_BRACKET
    (22) pragmaList -> pragmaList . pragma
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (23) pragma -> . LESS_THAN expandableIdentifier GREATER_THAN
    (24) pragma -> . LESS_THAN pragmaKeywordArguments GREATER_THAN
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    LESS_THAN       shift and go to state 96
    RIGHT_CURLY_BRACKET reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    expressionList                 shift and go to state 94
    pragma                         shift and go to state 95
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 87

    (18) blockClosureHeader -> blockArguments blockResultType . BAR

    BAR             shift and go to state 97


state 88

    (30) blockArguments -> blockArguments blockArgument .

    COLON_COLON     reduce using rule 30 (blockArguments -> blockArguments blockArgument .)
    COLON           reduce using rule 30 (blockArguments -> blockArguments blockArgument .)
    BAR             reduce using rule 30 (blockArguments -> blockArguments blockArgument .)


state 89

    (35) blockResultType -> COLON_COLON . primaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryExpression              shift and go to state 98
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 90

    (33) blockArgument -> COLON . optionalBlockArgumentType expandableIdentifier
    (31) optionalBlockArgumentType -> .
    (32) optionalBlockArgumentType -> . LEFT_PARENT expression RIGHT_PARENT

    IDENTIFIER      reduce using rule 31 (optionalBlockArgumentType -> .)
    QUASI_UNQUOTE   reduce using rule 31 (optionalBlockArgumentType -> .)
    LEFT_PARENT     shift and go to state 100

    optionalBlockArgumentType      shift and go to state 99

state 91

    (15) primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    OPERATOR        reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    BAR             reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LESS_THAN       reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    KEYWORD         reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COLON_COLON     reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COMMA           reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    DOT             reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    $end            reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    SEMICOLON       reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)


state 92

    (16) primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .

    LEFT_PARENT     reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    OPERATOR        reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    BAR             reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    KEYWORD         reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COLON_COLON     reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COMMA           reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    DOT             reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    $end            reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_PARENT    reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)


state 93

    (77) literalArrayElement -> LEFT_PARENT literalArrayElements . RIGHT_PARENT
    (72) literalArrayElements -> literalArrayElements . literalArrayElement
    (73) literalArrayElement -> . literal
    (74) literalArrayElement -> . IDENTIFIER
    (75) literalArrayElement -> . anyKeyword
    (76) literalArrayElement -> . anyOperator
    (77) literalArrayElement -> . LEFT_PARENT literalArrayElements RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (83) anyKeyword -> . KEYWORD
    (84) anyKeyword -> . MULTI_KEYWORD
    (78) anyOperator -> . OPERATOR
    (79) anyOperator -> . BAR
    (80) anyOperator -> . LESS_THAN
    (81) anyOperator -> . GREATER_THAN

    RIGHT_PARENT    shift and go to state 101
    IDENTIFIER      shift and go to state 80
    LEFT_PARENT     shift and go to state 83
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    KEYWORD         shift and go to state 84
    MULTI_KEYWORD   shift and go to state 85
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    literalArrayElement            shift and go to state 78
    literal                        shift and go to state 79
    anyKeyword                     shift and go to state 81
    anyOperator                    shift and go to state 82

state 94

    (28) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList . RIGHT_CURLY_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_CURLY_BRACKET shift and go to state 102
    DOT             shift and go to state 38


state 95

    (22) pragmaList -> pragmaList pragma .

    LESS_THAN       reduce using rule 22 (pragmaList -> pragmaList pragma .)
    QUOTE           reduce using rule 22 (pragmaList -> pragmaList pragma .)
    QUASI_QUOTE     reduce using rule 22 (pragmaList -> pragmaList pragma .)
    QUASI_UNQUOTE   reduce using rule 22 (pragmaList -> pragmaList pragma .)
    SPLICE          reduce using rule 22 (pragmaList -> pragmaList pragma .)
    OPERATOR        reduce using rule 22 (pragmaList -> pragmaList pragma .)
    IDENTIFIER      reduce using rule 22 (pragmaList -> pragmaList pragma .)
    LEFT_PARENT     reduce using rule 22 (pragmaList -> pragmaList pragma .)
    KEYWORD         reduce using rule 22 (pragmaList -> pragmaList pragma .)
    FLOAT           reduce using rule 22 (pragmaList -> pragmaList pragma .)
    INTEGER         reduce using rule 22 (pragmaList -> pragmaList pragma .)
    CHARACTER       reduce using rule 22 (pragmaList -> pragmaList pragma .)
    STRING          reduce using rule 22 (pragmaList -> pragmaList pragma .)
    SYMBOL_IDENTIFIER reduce using rule 22 (pragmaList -> pragmaList pragma .)
    SYMBOL_KEYWORD  reduce using rule 22 (pragmaList -> pragmaList pragma .)
    SYMBOL_OPERATOR reduce using rule 22 (pragmaList -> pragmaList pragma .)
    SYMBOL_STRING   reduce using rule 22 (pragmaList -> pragmaList pragma .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 22 (pragmaList -> pragmaList pragma .)
    LEFT_CURLY_BRACKET reduce using rule 22 (pragmaList -> pragmaList pragma .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (pragmaList -> pragmaList pragma .)
    DOT             reduce using rule 22 (pragmaList -> pragmaList pragma .)


state 96

    (23) pragma -> LESS_THAN . expandableIdentifier GREATER_THAN
    (24) pragma -> LESS_THAN . pragmaKeywordArguments GREATER_THAN
    (36) expandableIdentifier -> . IDENTIFIER
    (37) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (26) pragmaKeywordArguments -> . pragmaKeywordArgument
    (27) pragmaKeywordArguments -> . pragmaKeywordArguments pragmaKeywordArgument
    (25) pragmaKeywordArgument -> . KEYWORD primaryExpression

    IDENTIFIER      shift and go to state 105
    QUASI_UNQUOTE   shift and go to state 106
    KEYWORD         shift and go to state 108

    expandableIdentifier           shift and go to state 103
    pragmaKeywordArguments         shift and go to state 104
    pragmaKeywordArgument          shift and go to state 107

state 97

    (18) blockClosureHeader -> blockArguments blockResultType BAR .

    LESS_THAN       reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUOTE           reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUASI_QUOTE     reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUASI_UNQUOTE   reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SPLICE          reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    OPERATOR        reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    IDENTIFIER      reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LEFT_PARENT     reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    KEYWORD         reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    FLOAT           reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    INTEGER         reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    CHARACTER       reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    STRING          reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_IDENTIFIER reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_KEYWORD  reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_OPERATOR reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_STRING   reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LEFT_CURLY_BRACKET reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    RIGHT_CURLY_BRACKET reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)
    DOT             reduce using rule 18 (blockClosureHeader -> blockArguments blockResultType BAR .)


state 98

    (35) blockResultType -> COLON_COLON primaryExpression .
    (15) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> primaryExpression . block
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    BAR             reduce using rule 35 (blockResultType -> COLON_COLON primaryExpression .)
    LEFT_PARENT     shift and go to state 51
    LEFT_BRACKET    shift and go to state 52
    LEFT_CURLY_BRACKET shift and go to state 37

    block                          shift and go to state 53

state 99

    (33) blockArgument -> COLON optionalBlockArgumentType . expandableIdentifier
    (36) expandableIdentifier -> . IDENTIFIER
    (37) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm

    IDENTIFIER      shift and go to state 105
    QUASI_UNQUOTE   shift and go to state 106

    expandableIdentifier           shift and go to state 109

state 100

    (32) optionalBlockArgumentType -> LEFT_PARENT . expression RIGHT_PARENT
    (61) expression -> . commaExpression
    (59) commaExpression -> . commaExpressionContent
    (60) commaExpression -> . commaExpressionContent COMMA
    (57) commaExpressionContent -> . assignmentExpression
    (58) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (55) assignmentExpression -> . lowPrecedenceExpression
    (56) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (52) lowPrecedenceExpression -> . chainExpression
    (53) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (50) chainExpression -> . binaryExpression optionalChainedMessages
    (51) chainExpression -> . chainedMessages
    (40) binaryExpression -> . prefixUnaryExpression
    (41) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessages -> . chainedMessage
    (47) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (38) prefixUnaryExpression -> . primaryExpression
    (39) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (45) chainedMessage -> . chainedMessageArguments
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (82) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArguments -> . chainedMessageArgument
    (44) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (42) chainedMessageArgument -> . KEYWORD binaryExpression
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    KEYWORD         shift and go to state 27
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    expression                     shift and go to state 110
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessages                shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessage                 shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArguments        shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    chainedMessageArgument         shift and go to state 24
    literal                        shift and go to state 26

state 101

    (77) literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .

    RIGHT_PARENT    reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_PARENT     reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    FLOAT           reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    INTEGER         reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    CHARACTER       reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    STRING          reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_IDENTIFIER reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_KEYWORD  reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_OPERATOR reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_STRING   reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    KEYWORD         reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    MULTI_KEYWORD   reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    OPERATOR        reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    BAR             reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LESS_THAN       reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 77 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)


state 102

    (28) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .

    LEFT_PARENT     reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    OPERATOR        reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    BAR             reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LESS_THAN       reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    GREATER_THAN    reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    KEYWORD         reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    ASSIGNMENT      reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COLON_COLON     reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    DOT             reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_PARENT    reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 28 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)


state 103

    (23) pragma -> LESS_THAN expandableIdentifier . GREATER_THAN

    GREATER_THAN    shift and go to state 111


state 104

    (24) pragma -> LESS_THAN pragmaKeywordArguments . GREATER_THAN
    (27) pragmaKeywordArguments -> pragmaKeywordArguments . pragmaKeywordArgument
    (25) pragmaKeywordArgument -> . KEYWORD primaryExpression

    GREATER_THAN    shift and go to state 112
    KEYWORD         shift and go to state 108

    pragmaKeywordArgument          shift and go to state 113

state 105

    (36) expandableIdentifier -> IDENTIFIER .

    GREATER_THAN    reduce using rule 36 (expandableIdentifier -> IDENTIFIER .)
    COLON_COLON     reduce using rule 36 (expandableIdentifier -> IDENTIFIER .)
    COLON           reduce using rule 36 (expandableIdentifier -> IDENTIFIER .)
    BAR             reduce using rule 36 (expandableIdentifier -> IDENTIFIER .)


state 106

    (37) expandableIdentifier -> QUASI_UNQUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryTerm                    shift and go to state 114
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 107

    (26) pragmaKeywordArguments -> pragmaKeywordArgument .

    GREATER_THAN    reduce using rule 26 (pragmaKeywordArguments -> pragmaKeywordArgument .)
    KEYWORD         reduce using rule 26 (pragmaKeywordArguments -> pragmaKeywordArgument .)


state 108

    (25) pragmaKeywordArgument -> KEYWORD . primaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> . primaryExpression block
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (62) literal -> . FLOAT
    (63) literal -> . INTEGER
    (64) literal -> . CHARACTER
    (65) literal -> . STRING
    (66) literal -> . SYMBOL_IDENTIFIER
    (67) literal -> . SYMBOL_KEYWORD
    (68) literal -> . SYMBOL_OPERATOR
    (69) literal -> . SYMBOL_STRING
    (70) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 28
    INTEGER         shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    SYMBOL_IDENTIFIER shift and go to state 32
    SYMBOL_KEYWORD  shift and go to state 33
    SYMBOL_OPERATOR shift and go to state 34
    SYMBOL_STRING   shift and go to state 35
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 36
    LEFT_CURLY_BRACKET shift and go to state 37

    primaryExpression              shift and go to state 115
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 109

    (33) blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .

    COLON_COLON     reduce using rule 33 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)
    COLON           reduce using rule 33 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)
    BAR             reduce using rule 33 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)


state 110

    (32) optionalBlockArgumentType -> LEFT_PARENT expression . RIGHT_PARENT

    RIGHT_PARENT    shift and go to state 116


state 111

    (23) pragma -> LESS_THAN expandableIdentifier GREATER_THAN .

    LESS_THAN       reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUOTE           reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SPLICE          reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    OPERATOR        reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    IDENTIFIER      reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LEFT_PARENT     reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    KEYWORD         reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    FLOAT           reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    INTEGER         reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    CHARACTER       reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    STRING          reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    DOT             reduce using rule 23 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)


state 112

    (24) pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .

    LESS_THAN       reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUOTE           reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SPLICE          reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    OPERATOR        reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    IDENTIFIER      reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LEFT_PARENT     reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    KEYWORD         reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    FLOAT           reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    INTEGER         reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    CHARACTER       reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    STRING          reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    DOT             reduce using rule 24 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)


state 113

    (27) pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .

    GREATER_THAN    reduce using rule 27 (pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .)
    KEYWORD         reduce using rule 27 (pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .)


state 114

    (37) expandableIdentifier -> QUASI_UNQUOTE primaryTerm .

    GREATER_THAN    reduce using rule 37 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COLON_COLON     reduce using rule 37 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COLON           reduce using rule 37 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    BAR             reduce using rule 37 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)


state 115

    (25) pragmaKeywordArgument -> KEYWORD primaryExpression .
    (15) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (16) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (17) primaryExpression -> primaryExpression . block
    (28) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    GREATER_THAN    reduce using rule 25 (pragmaKeywordArgument -> KEYWORD primaryExpression .)
    KEYWORD         reduce using rule 25 (pragmaKeywordArgument -> KEYWORD primaryExpression .)
    LEFT_PARENT     shift and go to state 51
    LEFT_BRACKET    shift and go to state 52
    LEFT_CURLY_BRACKET shift and go to state 37

    block                          shift and go to state 53

state 116

    (32) optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .

    IDENTIFIER      reduce using rule 32 (optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 32 (optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .)

