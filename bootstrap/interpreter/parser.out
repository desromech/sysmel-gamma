Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BYTE_ARRAY_LEFT_BRACKET
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET

Grammar

Rule 0     S' -> expressionList
Rule 1     expressionList -> optionalExpression
Rule 2     expressionList -> expressionList DOT optionalExpression
Rule 3     optionalExpression -> <empty>
Rule 4     optionalExpression -> expression
Rule 5     primaryTerm -> IDENTIFIER
Rule 6     primaryTerm -> literal
Rule 7     primaryTerm -> block
Rule 8     primaryTerm -> LEFT_PARENT RIGHT_PARENT
Rule 9     primaryTerm -> LEFT_PARENT expression RIGHT_PARENT
Rule 10    primaryExpression -> primaryTerm
Rule 11    primaryExpression -> QUOTE primaryTerm
Rule 12    primaryExpression -> QUASI_QUOTE primaryTerm
Rule 13    primaryExpression -> QUASI_UNQUOTE primaryTerm
Rule 14    primaryExpression -> SPLICE primaryTerm
Rule 15    primaryExpression -> primaryExpression expandableIdentifier
Rule 16    primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
Rule 17    primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
Rule 18    primaryExpression -> primaryExpression block
Rule 19    blockClosureHeader -> blockArguments blockResultType BAR
Rule 20    optionalBlockClosureHeader -> blockClosureHeader
Rule 21    optionalBlockClosureHeader -> <empty>
Rule 22    pragmaList -> <empty>
Rule 23    pragmaList -> pragmaList pragma
Rule 24    pragma -> LESS_THAN expandableIdentifier GREATER_THAN
Rule 25    pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN
Rule 26    pragmaKeywordArgument -> KEYWORD primaryExpression
Rule 27    pragmaKeywordArguments -> pragmaKeywordArgument
Rule 28    pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument
Rule 29    block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
Rule 30    blockArguments -> <empty>
Rule 31    blockArguments -> blockArguments blockArgument
Rule 32    optionalBlockArgumentType -> <empty>
Rule 33    optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT
Rule 34    blockArgument -> COLON optionalBlockArgumentType expandableIdentifier
Rule 35    blockResultType -> <empty>
Rule 36    blockResultType -> COLON_COLON primaryExpression
Rule 37    expandableIdentifier -> IDENTIFIER
Rule 38    expandableIdentifier -> QUASI_UNQUOTE primaryTerm
Rule 39    prefixUnaryExpression -> primaryExpression
Rule 40    prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression
Rule 41    binaryExpression -> prefixUnaryExpression
Rule 42    binaryExpression -> binaryExpression anyOperator prefixUnaryExpression
Rule 43    chainedMessageArgument -> KEYWORD binaryExpression
Rule 44    chainedMessageArguments -> chainedMessageArgument
Rule 45    chainedMessageArguments -> chainedMessageArguments chainedMessageArgument
Rule 46    chainedMessageKeyword -> chainedMessageArguments
Rule 47    chainedMessage -> chainedMessageKeyword
Rule 48    chainedMessage -> expandableIdentifier
Rule 49    chainedMessages -> SEMICOLON chainedMessage
Rule 50    chainedMessages -> chainedMessages SEMICOLON chainedMessage
Rule 51    optionalKeywordChain -> <empty>
Rule 52    optionalKeywordChain -> chainedMessages
Rule 53    optionalKeywordChain -> chainedMessageKeyword
Rule 54    optionalKeywordChain -> chainedMessageKeyword chainedMessages
Rule 55    chainExpression -> binaryExpression optionalKeywordChain
Rule 56    chainExpression -> chainedMessageKeyword
Rule 57    chainExpression -> chainedMessageKeyword chainedMessages
Rule 58    lowPrecedenceExpression -> chainExpression
Rule 59    lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression
Rule 60    lowPrecedenceOperator -> COLON_COLON anyOperator
Rule 61    assignmentExpression -> lowPrecedenceExpression
Rule 62    assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression
Rule 63    commaExpressionContent -> assignmentExpression
Rule 64    commaExpressionContent -> commaExpressionContent COMMA assignmentExpression
Rule 65    commaExpression -> commaExpressionContent
Rule 66    commaExpression -> commaExpressionContent COMMA
Rule 67    expression -> commaExpression
Rule 68    literal -> FLOAT
Rule 69    literal -> INTEGER
Rule 70    literal -> CHARACTER
Rule 71    literal -> STRING
Rule 72    literal -> SYMBOL_IDENTIFIER
Rule 73    literal -> SYMBOL_KEYWORD
Rule 74    literal -> SYMBOL_OPERATOR
Rule 75    literal -> SYMBOL_STRING
Rule 76    literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
Rule 77    literalArrayElements -> <empty>
Rule 78    literalArrayElements -> literalArrayElements literalArrayElement
Rule 79    literalArrayElement -> literal
Rule 80    literalArrayElement -> IDENTIFIER
Rule 81    literalArrayElement -> anyKeyword
Rule 82    literalArrayElement -> anyOperator
Rule 83    literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT
Rule 84    anyOperator -> OPERATOR
Rule 85    anyOperator -> BAR
Rule 86    anyOperator -> LESS_THAN
Rule 87    anyOperator -> GREATER_THAN
Rule 88    anyPrefixOperator -> OPERATOR
Rule 89    anyKeyword -> KEYWORD
Rule 90    anyKeyword -> MULTI_KEYWORD

Terminals, with rules where they appear

ASSIGNMENT           : 62
BAR                  : 19 85
BYTE_ARRAY_LEFT_BRACKET : 
CHARACTER            : 70
COLON                : 34
COLON_COLON          : 36 60
COMMA                : 64 66
DICTIONARY_ARRAY_LEFT_CURLY_BRACKET : 
DOT                  : 2
FLOAT                : 68
GREATER_THAN         : 24 25 87
IDENTIFIER           : 5 37 80
INTEGER              : 69
KEYWORD              : 26 43 89
LEFT_BRACKET         : 17
LEFT_CURLY_BRACKET   : 29
LEFT_PARENT          : 8 9 16 33 83
LESS_THAN            : 24 25 86
LITERAL_ARRAY_LEFT_PARENT : 76
MULTI_KEYWORD        : 90
OPERATOR             : 84 88
QUASI_QUOTE          : 12
QUASI_UNQUOTE        : 13 38
QUOTE                : 11
RIGHT_BRACKET        : 17
RIGHT_CURLY_BRACKET  : 29
RIGHT_PARENT         : 8 9 16 33 76 83
SEMICOLON            : 49 50
SPLICE               : 14
STRING               : 71
SYMBOL_IDENTIFIER    : 72
SYMBOL_KEYWORD       : 73
SYMBOL_OPERATOR      : 74
SYMBOL_STRING        : 75
error                : 

Nonterminals, with rules where they appear

anyKeyword           : 81
anyOperator          : 42 60 82
anyPrefixOperator    : 40
assignmentExpression : 62 63 64
binaryExpression     : 42 43 55
block                : 7 18
blockArgument        : 31
blockArguments       : 19 31
blockClosureHeader   : 20
blockResultType      : 19
chainExpression      : 58 59
chainedMessage       : 49 50
chainedMessageArgument : 44 45
chainedMessageArguments : 45 46
chainedMessageKeyword : 47 53 54 56 57
chainedMessages      : 50 52 54 57
commaExpression      : 67
commaExpressionContent : 64 65 66
expandableIdentifier : 15 24 34 48
expression           : 4 9 33
expressionList       : 2 16 17 29 0
literal              : 6 79
literalArrayElement  : 78
literalArrayElements : 76 78 83
lowPrecedenceExpression : 59 61 62
lowPrecedenceOperator : 59
optionalBlockArgumentType : 34
optionalBlockClosureHeader : 29
optionalExpression   : 1 2
optionalKeywordChain : 55
pragma               : 23
pragmaKeywordArgument : 27 28
pragmaKeywordArguments : 25 28
pragmaList           : 23 29
prefixUnaryExpression : 40 41 42
primaryExpression    : 15 16 17 18 26 36 39
primaryTerm          : 10 11 12 13 14 38

Parsing method: LALR

state 0

    (0) S' -> . expressionList
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    DOT             reduce using rule 3 (optionalExpression -> .)
    $end            reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    expressionList                 shift and go to state 1
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 1

    (0) S' -> expressionList .
    (2) expressionList -> expressionList . DOT optionalExpression

    DOT             shift and go to state 37


state 2

    (1) expressionList -> optionalExpression .

    DOT             reduce using rule 1 (expressionList -> optionalExpression .)
    $end            reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_PARENT    reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_BRACKET   reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 1 (expressionList -> optionalExpression .)


state 3

    (4) optionalExpression -> expression .

    DOT             reduce using rule 4 (optionalExpression -> expression .)
    $end            reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_PARENT    reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_BRACKET   reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (optionalExpression -> expression .)


state 4

    (67) expression -> commaExpression .

    DOT             reduce using rule 67 (expression -> commaExpression .)
    $end            reduce using rule 67 (expression -> commaExpression .)
    RIGHT_PARENT    reduce using rule 67 (expression -> commaExpression .)
    RIGHT_BRACKET   reduce using rule 67 (expression -> commaExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 67 (expression -> commaExpression .)


state 5

    (65) commaExpression -> commaExpressionContent .
    (66) commaExpression -> commaExpressionContent . COMMA
    (64) commaExpressionContent -> commaExpressionContent . COMMA assignmentExpression

    DOT             reduce using rule 65 (commaExpression -> commaExpressionContent .)
    $end            reduce using rule 65 (commaExpression -> commaExpressionContent .)
    RIGHT_PARENT    reduce using rule 65 (commaExpression -> commaExpressionContent .)
    RIGHT_BRACKET   reduce using rule 65 (commaExpression -> commaExpressionContent .)
    RIGHT_CURLY_BRACKET reduce using rule 65 (commaExpression -> commaExpressionContent .)
    COMMA           shift and go to state 38


state 6

    (63) commaExpressionContent -> assignmentExpression .

    COMMA           reduce using rule 63 (commaExpressionContent -> assignmentExpression .)
    DOT             reduce using rule 63 (commaExpressionContent -> assignmentExpression .)
    $end            reduce using rule 63 (commaExpressionContent -> assignmentExpression .)
    RIGHT_PARENT    reduce using rule 63 (commaExpressionContent -> assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 63 (commaExpressionContent -> assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 63 (commaExpressionContent -> assignmentExpression .)


state 7

    (61) assignmentExpression -> lowPrecedenceExpression .
    (62) assignmentExpression -> lowPrecedenceExpression . ASSIGNMENT assignmentExpression
    (59) lowPrecedenceExpression -> lowPrecedenceExpression . lowPrecedenceOperator chainExpression
    (60) lowPrecedenceOperator -> . COLON_COLON anyOperator

    COMMA           reduce using rule 61 (assignmentExpression -> lowPrecedenceExpression .)
    DOT             reduce using rule 61 (assignmentExpression -> lowPrecedenceExpression .)
    $end            reduce using rule 61 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_PARENT    reduce using rule 61 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_BRACKET   reduce using rule 61 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 61 (assignmentExpression -> lowPrecedenceExpression .)
    ASSIGNMENT      shift and go to state 39
    COLON_COLON     shift and go to state 41

    lowPrecedenceOperator          shift and go to state 40

state 8

    (58) lowPrecedenceExpression -> chainExpression .

    ASSIGNMENT      reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    COLON_COLON     reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    COMMA           reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    DOT             reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    $end            reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_PARENT    reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_BRACKET   reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 58 (lowPrecedenceExpression -> chainExpression .)


state 9

    (55) chainExpression -> binaryExpression . optionalKeywordChain
    (42) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (51) optionalKeywordChain -> .
    (52) optionalKeywordChain -> . chainedMessages
    (53) optionalKeywordChain -> . chainedMessageKeyword
    (54) optionalKeywordChain -> . chainedMessageKeyword chainedMessages
    (84) anyOperator -> . OPERATOR
    (85) anyOperator -> . BAR
    (86) anyOperator -> . LESS_THAN
    (87) anyOperator -> . GREATER_THAN
    (49) chainedMessages -> . SEMICOLON chainedMessage
    (50) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (43) chainedMessageArgument -> . KEYWORD binaryExpression

    ASSIGNMENT      reduce using rule 51 (optionalKeywordChain -> .)
    COLON_COLON     reduce using rule 51 (optionalKeywordChain -> .)
    COMMA           reduce using rule 51 (optionalKeywordChain -> .)
    DOT             reduce using rule 51 (optionalKeywordChain -> .)
    $end            reduce using rule 51 (optionalKeywordChain -> .)
    RIGHT_PARENT    reduce using rule 51 (optionalKeywordChain -> .)
    RIGHT_BRACKET   reduce using rule 51 (optionalKeywordChain -> .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (optionalKeywordChain -> .)
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49
    SEMICOLON       shift and go to state 50
    KEYWORD         shift and go to state 24

    optionalKeywordChain           shift and go to state 42
    anyOperator                    shift and go to state 43
    chainedMessages                shift and go to state 44
    chainedMessageKeyword          shift and go to state 45
    chainedMessageArguments        shift and go to state 12
    chainedMessageArgument         shift and go to state 15

state 10

    (56) chainExpression -> chainedMessageKeyword .
    (57) chainExpression -> chainedMessageKeyword . chainedMessages
    (49) chainedMessages -> . SEMICOLON chainedMessage
    (50) chainedMessages -> . chainedMessages SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    COLON_COLON     reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    COMMA           reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    DOT             reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    $end            reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    RIGHT_PARENT    reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    RIGHT_BRACKET   reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    RIGHT_CURLY_BRACKET reduce using rule 56 (chainExpression -> chainedMessageKeyword .)
    SEMICOLON       shift and go to state 50

    chainedMessages                shift and go to state 51

state 11

    (41) binaryExpression -> prefixUnaryExpression .

    OPERATOR        reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    BAR             reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    LESS_THAN       reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    SEMICOLON       reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    KEYWORD         reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    COLON_COLON     reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    DOT             reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    $end            reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (binaryExpression -> prefixUnaryExpression .)


state 12

    (46) chainedMessageKeyword -> chainedMessageArguments .
    (45) chainedMessageArguments -> chainedMessageArguments . chainedMessageArgument
    (43) chainedMessageArgument -> . KEYWORD binaryExpression

    SEMICOLON       reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    ASSIGNMENT      reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    COLON_COLON     reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    COMMA           reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    DOT             reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    $end            reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    RIGHT_PARENT    reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    RIGHT_BRACKET   reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    RIGHT_CURLY_BRACKET reduce using rule 46 (chainedMessageKeyword -> chainedMessageArguments .)
    KEYWORD         shift and go to state 24

    chainedMessageArgument         shift and go to state 52

state 13

    (39) prefixUnaryExpression -> primaryExpression .
    (15) primaryExpression -> primaryExpression . expandableIdentifier
    (16) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> primaryExpression . block
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    OPERATOR        reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    BAR             reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    LESS_THAN       reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    GREATER_THAN    reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    SEMICOLON       reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    KEYWORD         reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    ASSIGNMENT      reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    COLON_COLON     reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    DOT             reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    $end            reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_PARENT    reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_BRACKET   reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (prefixUnaryExpression -> primaryExpression .)
    LEFT_PARENT     shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58
    LEFT_CURLY_BRACKET shift and go to state 36

    expandableIdentifier           shift and go to state 53
    block                          shift and go to state 56

state 14

    (40) prefixUnaryExpression -> anyPrefixOperator . prefixUnaryExpression
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    anyPrefixOperator              shift and go to state 14
    prefixUnaryExpression          shift and go to state 59
    primaryExpression              shift and go to state 13
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 15

    (44) chainedMessageArguments -> chainedMessageArgument .

    KEYWORD         reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    SEMICOLON       reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    ASSIGNMENT      reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    COLON_COLON     reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    COMMA           reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    DOT             reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    $end            reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_PARENT    reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_BRACKET   reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_CURLY_BRACKET reduce using rule 44 (chainedMessageArguments -> chainedMessageArgument .)


state 16

    (10) primaryExpression -> primaryTerm .

    LEFT_PARENT     reduce using rule 10 (primaryExpression -> primaryTerm .)
    LEFT_BRACKET    reduce using rule 10 (primaryExpression -> primaryTerm .)
    IDENTIFIER      reduce using rule 10 (primaryExpression -> primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 10 (primaryExpression -> primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 10 (primaryExpression -> primaryTerm .)
    OPERATOR        reduce using rule 10 (primaryExpression -> primaryTerm .)
    BAR             reduce using rule 10 (primaryExpression -> primaryTerm .)
    LESS_THAN       reduce using rule 10 (primaryExpression -> primaryTerm .)
    GREATER_THAN    reduce using rule 10 (primaryExpression -> primaryTerm .)
    SEMICOLON       reduce using rule 10 (primaryExpression -> primaryTerm .)
    KEYWORD         reduce using rule 10 (primaryExpression -> primaryTerm .)
    ASSIGNMENT      reduce using rule 10 (primaryExpression -> primaryTerm .)
    COLON_COLON     reduce using rule 10 (primaryExpression -> primaryTerm .)
    COMMA           reduce using rule 10 (primaryExpression -> primaryTerm .)
    DOT             reduce using rule 10 (primaryExpression -> primaryTerm .)
    $end            reduce using rule 10 (primaryExpression -> primaryTerm .)
    RIGHT_PARENT    reduce using rule 10 (primaryExpression -> primaryTerm .)
    RIGHT_BRACKET   reduce using rule 10 (primaryExpression -> primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (primaryExpression -> primaryTerm .)


state 17

    (11) primaryExpression -> QUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryTerm                    shift and go to state 60
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 18

    (12) primaryExpression -> QUASI_QUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryTerm                    shift and go to state 61
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 19

    (13) primaryExpression -> QUASI_UNQUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryTerm                    shift and go to state 62
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 20

    (14) primaryExpression -> SPLICE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryTerm                    shift and go to state 63
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 21

    (8) primaryTerm -> LEFT_PARENT . RIGHT_PARENT
    (9) primaryTerm -> LEFT_PARENT . expression RIGHT_PARENT
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    RIGHT_PARENT    shift and go to state 64
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    expression                     shift and go to state 65
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 22

    (7) primaryTerm -> block .

    LEFT_PARENT     reduce using rule 7 (primaryTerm -> block .)
    LEFT_BRACKET    reduce using rule 7 (primaryTerm -> block .)
    IDENTIFIER      reduce using rule 7 (primaryTerm -> block .)
    QUASI_UNQUOTE   reduce using rule 7 (primaryTerm -> block .)
    LEFT_CURLY_BRACKET reduce using rule 7 (primaryTerm -> block .)
    OPERATOR        reduce using rule 7 (primaryTerm -> block .)
    BAR             reduce using rule 7 (primaryTerm -> block .)
    LESS_THAN       reduce using rule 7 (primaryTerm -> block .)
    GREATER_THAN    reduce using rule 7 (primaryTerm -> block .)
    SEMICOLON       reduce using rule 7 (primaryTerm -> block .)
    KEYWORD         reduce using rule 7 (primaryTerm -> block .)
    ASSIGNMENT      reduce using rule 7 (primaryTerm -> block .)
    COLON_COLON     reduce using rule 7 (primaryTerm -> block .)
    COMMA           reduce using rule 7 (primaryTerm -> block .)
    DOT             reduce using rule 7 (primaryTerm -> block .)
    $end            reduce using rule 7 (primaryTerm -> block .)
    RIGHT_PARENT    reduce using rule 7 (primaryTerm -> block .)
    RIGHT_BRACKET   reduce using rule 7 (primaryTerm -> block .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (primaryTerm -> block .)
    COLON           reduce using rule 7 (primaryTerm -> block .)


state 23

    (88) anyPrefixOperator -> OPERATOR .

    QUOTE           reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    QUASI_QUOTE     reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    SPLICE          reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    OPERATOR        reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    IDENTIFIER      reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    LEFT_PARENT     reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    FLOAT           reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    INTEGER         reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    CHARACTER       reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    STRING          reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_STRING   reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 88 (anyPrefixOperator -> OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 88 (anyPrefixOperator -> OPERATOR .)


state 24

    (43) chainedMessageArgument -> KEYWORD . binaryExpression
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    binaryExpression               shift and go to state 66
    prefixUnaryExpression          shift and go to state 11
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 25

    (5) primaryTerm -> IDENTIFIER .

    LEFT_PARENT     reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    QUASI_UNQUOTE   reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    BAR             reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LESS_THAN       reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    KEYWORD         reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COLON_COLON     reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COMMA           reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    DOT             reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    $end            reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COLON           reduce using rule 5 (primaryTerm -> IDENTIFIER .)


state 26

    (6) primaryTerm -> literal .

    LEFT_PARENT     reduce using rule 6 (primaryTerm -> literal .)
    LEFT_BRACKET    reduce using rule 6 (primaryTerm -> literal .)
    IDENTIFIER      reduce using rule 6 (primaryTerm -> literal .)
    QUASI_UNQUOTE   reduce using rule 6 (primaryTerm -> literal .)
    LEFT_CURLY_BRACKET reduce using rule 6 (primaryTerm -> literal .)
    OPERATOR        reduce using rule 6 (primaryTerm -> literal .)
    BAR             reduce using rule 6 (primaryTerm -> literal .)
    LESS_THAN       reduce using rule 6 (primaryTerm -> literal .)
    GREATER_THAN    reduce using rule 6 (primaryTerm -> literal .)
    SEMICOLON       reduce using rule 6 (primaryTerm -> literal .)
    KEYWORD         reduce using rule 6 (primaryTerm -> literal .)
    ASSIGNMENT      reduce using rule 6 (primaryTerm -> literal .)
    COLON_COLON     reduce using rule 6 (primaryTerm -> literal .)
    COMMA           reduce using rule 6 (primaryTerm -> literal .)
    DOT             reduce using rule 6 (primaryTerm -> literal .)
    $end            reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_PARENT    reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_BRACKET   reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (primaryTerm -> literal .)
    COLON           reduce using rule 6 (primaryTerm -> literal .)


state 27

    (68) literal -> FLOAT .

    LEFT_PARENT     reduce using rule 68 (literal -> FLOAT .)
    LEFT_BRACKET    reduce using rule 68 (literal -> FLOAT .)
    IDENTIFIER      reduce using rule 68 (literal -> FLOAT .)
    QUASI_UNQUOTE   reduce using rule 68 (literal -> FLOAT .)
    LEFT_CURLY_BRACKET reduce using rule 68 (literal -> FLOAT .)
    OPERATOR        reduce using rule 68 (literal -> FLOAT .)
    BAR             reduce using rule 68 (literal -> FLOAT .)
    LESS_THAN       reduce using rule 68 (literal -> FLOAT .)
    GREATER_THAN    reduce using rule 68 (literal -> FLOAT .)
    SEMICOLON       reduce using rule 68 (literal -> FLOAT .)
    KEYWORD         reduce using rule 68 (literal -> FLOAT .)
    ASSIGNMENT      reduce using rule 68 (literal -> FLOAT .)
    COLON_COLON     reduce using rule 68 (literal -> FLOAT .)
    COMMA           reduce using rule 68 (literal -> FLOAT .)
    DOT             reduce using rule 68 (literal -> FLOAT .)
    $end            reduce using rule 68 (literal -> FLOAT .)
    RIGHT_PARENT    reduce using rule 68 (literal -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 68 (literal -> FLOAT .)
    RIGHT_CURLY_BRACKET reduce using rule 68 (literal -> FLOAT .)
    COLON           reduce using rule 68 (literal -> FLOAT .)
    FLOAT           reduce using rule 68 (literal -> FLOAT .)
    INTEGER         reduce using rule 68 (literal -> FLOAT .)
    CHARACTER       reduce using rule 68 (literal -> FLOAT .)
    STRING          reduce using rule 68 (literal -> FLOAT .)
    SYMBOL_IDENTIFIER reduce using rule 68 (literal -> FLOAT .)
    SYMBOL_KEYWORD  reduce using rule 68 (literal -> FLOAT .)
    SYMBOL_OPERATOR reduce using rule 68 (literal -> FLOAT .)
    SYMBOL_STRING   reduce using rule 68 (literal -> FLOAT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 68 (literal -> FLOAT .)
    MULTI_KEYWORD   reduce using rule 68 (literal -> FLOAT .)


state 28

    (69) literal -> INTEGER .

    LEFT_PARENT     reduce using rule 69 (literal -> INTEGER .)
    LEFT_BRACKET    reduce using rule 69 (literal -> INTEGER .)
    IDENTIFIER      reduce using rule 69 (literal -> INTEGER .)
    QUASI_UNQUOTE   reduce using rule 69 (literal -> INTEGER .)
    LEFT_CURLY_BRACKET reduce using rule 69 (literal -> INTEGER .)
    OPERATOR        reduce using rule 69 (literal -> INTEGER .)
    BAR             reduce using rule 69 (literal -> INTEGER .)
    LESS_THAN       reduce using rule 69 (literal -> INTEGER .)
    GREATER_THAN    reduce using rule 69 (literal -> INTEGER .)
    SEMICOLON       reduce using rule 69 (literal -> INTEGER .)
    KEYWORD         reduce using rule 69 (literal -> INTEGER .)
    ASSIGNMENT      reduce using rule 69 (literal -> INTEGER .)
    COLON_COLON     reduce using rule 69 (literal -> INTEGER .)
    COMMA           reduce using rule 69 (literal -> INTEGER .)
    DOT             reduce using rule 69 (literal -> INTEGER .)
    $end            reduce using rule 69 (literal -> INTEGER .)
    RIGHT_PARENT    reduce using rule 69 (literal -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 69 (literal -> INTEGER .)
    RIGHT_CURLY_BRACKET reduce using rule 69 (literal -> INTEGER .)
    COLON           reduce using rule 69 (literal -> INTEGER .)
    FLOAT           reduce using rule 69 (literal -> INTEGER .)
    INTEGER         reduce using rule 69 (literal -> INTEGER .)
    CHARACTER       reduce using rule 69 (literal -> INTEGER .)
    STRING          reduce using rule 69 (literal -> INTEGER .)
    SYMBOL_IDENTIFIER reduce using rule 69 (literal -> INTEGER .)
    SYMBOL_KEYWORD  reduce using rule 69 (literal -> INTEGER .)
    SYMBOL_OPERATOR reduce using rule 69 (literal -> INTEGER .)
    SYMBOL_STRING   reduce using rule 69 (literal -> INTEGER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 69 (literal -> INTEGER .)
    MULTI_KEYWORD   reduce using rule 69 (literal -> INTEGER .)


state 29

    (70) literal -> CHARACTER .

    LEFT_PARENT     reduce using rule 70 (literal -> CHARACTER .)
    LEFT_BRACKET    reduce using rule 70 (literal -> CHARACTER .)
    IDENTIFIER      reduce using rule 70 (literal -> CHARACTER .)
    QUASI_UNQUOTE   reduce using rule 70 (literal -> CHARACTER .)
    LEFT_CURLY_BRACKET reduce using rule 70 (literal -> CHARACTER .)
    OPERATOR        reduce using rule 70 (literal -> CHARACTER .)
    BAR             reduce using rule 70 (literal -> CHARACTER .)
    LESS_THAN       reduce using rule 70 (literal -> CHARACTER .)
    GREATER_THAN    reduce using rule 70 (literal -> CHARACTER .)
    SEMICOLON       reduce using rule 70 (literal -> CHARACTER .)
    KEYWORD         reduce using rule 70 (literal -> CHARACTER .)
    ASSIGNMENT      reduce using rule 70 (literal -> CHARACTER .)
    COLON_COLON     reduce using rule 70 (literal -> CHARACTER .)
    COMMA           reduce using rule 70 (literal -> CHARACTER .)
    DOT             reduce using rule 70 (literal -> CHARACTER .)
    $end            reduce using rule 70 (literal -> CHARACTER .)
    RIGHT_PARENT    reduce using rule 70 (literal -> CHARACTER .)
    RIGHT_BRACKET   reduce using rule 70 (literal -> CHARACTER .)
    RIGHT_CURLY_BRACKET reduce using rule 70 (literal -> CHARACTER .)
    COLON           reduce using rule 70 (literal -> CHARACTER .)
    FLOAT           reduce using rule 70 (literal -> CHARACTER .)
    INTEGER         reduce using rule 70 (literal -> CHARACTER .)
    CHARACTER       reduce using rule 70 (literal -> CHARACTER .)
    STRING          reduce using rule 70 (literal -> CHARACTER .)
    SYMBOL_IDENTIFIER reduce using rule 70 (literal -> CHARACTER .)
    SYMBOL_KEYWORD  reduce using rule 70 (literal -> CHARACTER .)
    SYMBOL_OPERATOR reduce using rule 70 (literal -> CHARACTER .)
    SYMBOL_STRING   reduce using rule 70 (literal -> CHARACTER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 70 (literal -> CHARACTER .)
    MULTI_KEYWORD   reduce using rule 70 (literal -> CHARACTER .)


state 30

    (71) literal -> STRING .

    LEFT_PARENT     reduce using rule 71 (literal -> STRING .)
    LEFT_BRACKET    reduce using rule 71 (literal -> STRING .)
    IDENTIFIER      reduce using rule 71 (literal -> STRING .)
    QUASI_UNQUOTE   reduce using rule 71 (literal -> STRING .)
    LEFT_CURLY_BRACKET reduce using rule 71 (literal -> STRING .)
    OPERATOR        reduce using rule 71 (literal -> STRING .)
    BAR             reduce using rule 71 (literal -> STRING .)
    LESS_THAN       reduce using rule 71 (literal -> STRING .)
    GREATER_THAN    reduce using rule 71 (literal -> STRING .)
    SEMICOLON       reduce using rule 71 (literal -> STRING .)
    KEYWORD         reduce using rule 71 (literal -> STRING .)
    ASSIGNMENT      reduce using rule 71 (literal -> STRING .)
    COLON_COLON     reduce using rule 71 (literal -> STRING .)
    COMMA           reduce using rule 71 (literal -> STRING .)
    DOT             reduce using rule 71 (literal -> STRING .)
    $end            reduce using rule 71 (literal -> STRING .)
    RIGHT_PARENT    reduce using rule 71 (literal -> STRING .)
    RIGHT_BRACKET   reduce using rule 71 (literal -> STRING .)
    RIGHT_CURLY_BRACKET reduce using rule 71 (literal -> STRING .)
    COLON           reduce using rule 71 (literal -> STRING .)
    FLOAT           reduce using rule 71 (literal -> STRING .)
    INTEGER         reduce using rule 71 (literal -> STRING .)
    CHARACTER       reduce using rule 71 (literal -> STRING .)
    STRING          reduce using rule 71 (literal -> STRING .)
    SYMBOL_IDENTIFIER reduce using rule 71 (literal -> STRING .)
    SYMBOL_KEYWORD  reduce using rule 71 (literal -> STRING .)
    SYMBOL_OPERATOR reduce using rule 71 (literal -> STRING .)
    SYMBOL_STRING   reduce using rule 71 (literal -> STRING .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 71 (literal -> STRING .)
    MULTI_KEYWORD   reduce using rule 71 (literal -> STRING .)


state 31

    (72) literal -> SYMBOL_IDENTIFIER .

    LEFT_PARENT     reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    IDENTIFIER      reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    QUASI_UNQUOTE   reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    OPERATOR        reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    BAR             reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    LESS_THAN       reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    GREATER_THAN    reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    SEMICOLON       reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    KEYWORD         reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    ASSIGNMENT      reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    COLON_COLON     reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    COMMA           reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    DOT             reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    $end            reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    COLON           reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    FLOAT           reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    INTEGER         reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    CHARACTER       reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    STRING          reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_IDENTIFIER reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_KEYWORD  reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_OPERATOR reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_STRING   reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)
    MULTI_KEYWORD   reduce using rule 72 (literal -> SYMBOL_IDENTIFIER .)


state 32

    (73) literal -> SYMBOL_KEYWORD .

    LEFT_PARENT     reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    LEFT_BRACKET    reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    IDENTIFIER      reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    QUASI_UNQUOTE   reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    LEFT_CURLY_BRACKET reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    OPERATOR        reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    BAR             reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    LESS_THAN       reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    GREATER_THAN    reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    SEMICOLON       reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    KEYWORD         reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    ASSIGNMENT      reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    COLON_COLON     reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    COMMA           reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    DOT             reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    $end            reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    RIGHT_PARENT    reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    RIGHT_BRACKET   reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    RIGHT_CURLY_BRACKET reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    COLON           reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    FLOAT           reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    INTEGER         reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    CHARACTER       reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    STRING          reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_STRING   reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 73 (literal -> SYMBOL_KEYWORD .)
    MULTI_KEYWORD   reduce using rule 73 (literal -> SYMBOL_KEYWORD .)


state 33

    (74) literal -> SYMBOL_OPERATOR .

    LEFT_PARENT     reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    LEFT_BRACKET    reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    IDENTIFIER      reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    OPERATOR        reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    BAR             reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    LESS_THAN       reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    GREATER_THAN    reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    SEMICOLON       reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    KEYWORD         reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    ASSIGNMENT      reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    COLON_COLON     reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    COMMA           reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    DOT             reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    $end            reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    RIGHT_PARENT    reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    RIGHT_BRACKET   reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    RIGHT_CURLY_BRACKET reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    COLON           reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    FLOAT           reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    INTEGER         reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    CHARACTER       reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    STRING          reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_STRING   reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 74 (literal -> SYMBOL_OPERATOR .)
    MULTI_KEYWORD   reduce using rule 74 (literal -> SYMBOL_OPERATOR .)


state 34

    (75) literal -> SYMBOL_STRING .

    LEFT_PARENT     reduce using rule 75 (literal -> SYMBOL_STRING .)
    LEFT_BRACKET    reduce using rule 75 (literal -> SYMBOL_STRING .)
    IDENTIFIER      reduce using rule 75 (literal -> SYMBOL_STRING .)
    QUASI_UNQUOTE   reduce using rule 75 (literal -> SYMBOL_STRING .)
    LEFT_CURLY_BRACKET reduce using rule 75 (literal -> SYMBOL_STRING .)
    OPERATOR        reduce using rule 75 (literal -> SYMBOL_STRING .)
    BAR             reduce using rule 75 (literal -> SYMBOL_STRING .)
    LESS_THAN       reduce using rule 75 (literal -> SYMBOL_STRING .)
    GREATER_THAN    reduce using rule 75 (literal -> SYMBOL_STRING .)
    SEMICOLON       reduce using rule 75 (literal -> SYMBOL_STRING .)
    KEYWORD         reduce using rule 75 (literal -> SYMBOL_STRING .)
    ASSIGNMENT      reduce using rule 75 (literal -> SYMBOL_STRING .)
    COLON_COLON     reduce using rule 75 (literal -> SYMBOL_STRING .)
    COMMA           reduce using rule 75 (literal -> SYMBOL_STRING .)
    DOT             reduce using rule 75 (literal -> SYMBOL_STRING .)
    $end            reduce using rule 75 (literal -> SYMBOL_STRING .)
    RIGHT_PARENT    reduce using rule 75 (literal -> SYMBOL_STRING .)
    RIGHT_BRACKET   reduce using rule 75 (literal -> SYMBOL_STRING .)
    RIGHT_CURLY_BRACKET reduce using rule 75 (literal -> SYMBOL_STRING .)
    COLON           reduce using rule 75 (literal -> SYMBOL_STRING .)
    FLOAT           reduce using rule 75 (literal -> SYMBOL_STRING .)
    INTEGER         reduce using rule 75 (literal -> SYMBOL_STRING .)
    CHARACTER       reduce using rule 75 (literal -> SYMBOL_STRING .)
    STRING          reduce using rule 75 (literal -> SYMBOL_STRING .)
    SYMBOL_IDENTIFIER reduce using rule 75 (literal -> SYMBOL_STRING .)
    SYMBOL_KEYWORD  reduce using rule 75 (literal -> SYMBOL_STRING .)
    SYMBOL_OPERATOR reduce using rule 75 (literal -> SYMBOL_STRING .)
    SYMBOL_STRING   reduce using rule 75 (literal -> SYMBOL_STRING .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 75 (literal -> SYMBOL_STRING .)
    MULTI_KEYWORD   reduce using rule 75 (literal -> SYMBOL_STRING .)


state 35

    (76) literal -> LITERAL_ARRAY_LEFT_PARENT . literalArrayElements RIGHT_PARENT
    (77) literalArrayElements -> .
    (78) literalArrayElements -> . literalArrayElements literalArrayElement

    RIGHT_PARENT    reduce using rule 77 (literalArrayElements -> .)
    IDENTIFIER      reduce using rule 77 (literalArrayElements -> .)
    LEFT_PARENT     reduce using rule 77 (literalArrayElements -> .)
    FLOAT           reduce using rule 77 (literalArrayElements -> .)
    INTEGER         reduce using rule 77 (literalArrayElements -> .)
    CHARACTER       reduce using rule 77 (literalArrayElements -> .)
    STRING          reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_IDENTIFIER reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_KEYWORD  reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_OPERATOR reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_STRING   reduce using rule 77 (literalArrayElements -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 77 (literalArrayElements -> .)
    KEYWORD         reduce using rule 77 (literalArrayElements -> .)
    MULTI_KEYWORD   reduce using rule 77 (literalArrayElements -> .)
    OPERATOR        reduce using rule 77 (literalArrayElements -> .)
    BAR             reduce using rule 77 (literalArrayElements -> .)
    LESS_THAN       reduce using rule 77 (literalArrayElements -> .)
    GREATER_THAN    reduce using rule 77 (literalArrayElements -> .)

    literalArrayElements           shift and go to state 67

state 36

    (29) block -> LEFT_CURLY_BRACKET . optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (20) optionalBlockClosureHeader -> . blockClosureHeader
    (21) optionalBlockClosureHeader -> .
    (19) blockClosureHeader -> . blockArguments blockResultType BAR
    (30) blockArguments -> .
    (31) blockArguments -> . blockArguments blockArgument

    LESS_THAN       reduce using rule 21 (optionalBlockClosureHeader -> .)
    QUOTE           reduce using rule 21 (optionalBlockClosureHeader -> .)
    QUASI_QUOTE     reduce using rule 21 (optionalBlockClosureHeader -> .)
    QUASI_UNQUOTE   reduce using rule 21 (optionalBlockClosureHeader -> .)
    SPLICE          reduce using rule 21 (optionalBlockClosureHeader -> .)
    OPERATOR        reduce using rule 21 (optionalBlockClosureHeader -> .)
    KEYWORD         reduce using rule 21 (optionalBlockClosureHeader -> .)
    IDENTIFIER      reduce using rule 21 (optionalBlockClosureHeader -> .)
    LEFT_PARENT     reduce using rule 21 (optionalBlockClosureHeader -> .)
    FLOAT           reduce using rule 21 (optionalBlockClosureHeader -> .)
    INTEGER         reduce using rule 21 (optionalBlockClosureHeader -> .)
    CHARACTER       reduce using rule 21 (optionalBlockClosureHeader -> .)
    STRING          reduce using rule 21 (optionalBlockClosureHeader -> .)
    SYMBOL_IDENTIFIER reduce using rule 21 (optionalBlockClosureHeader -> .)
    SYMBOL_KEYWORD  reduce using rule 21 (optionalBlockClosureHeader -> .)
    SYMBOL_OPERATOR reduce using rule 21 (optionalBlockClosureHeader -> .)
    SYMBOL_STRING   reduce using rule 21 (optionalBlockClosureHeader -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 21 (optionalBlockClosureHeader -> .)
    LEFT_CURLY_BRACKET reduce using rule 21 (optionalBlockClosureHeader -> .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (optionalBlockClosureHeader -> .)
    DOT             reduce using rule 21 (optionalBlockClosureHeader -> .)
    COLON_COLON     reduce using rule 30 (blockArguments -> .)
    COLON           reduce using rule 30 (blockArguments -> .)
    BAR             reduce using rule 30 (blockArguments -> .)

    optionalBlockClosureHeader     shift and go to state 68
    blockClosureHeader             shift and go to state 69
    blockArguments                 shift and go to state 70

state 37

    (2) expressionList -> expressionList DOT . optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    DOT             reduce using rule 3 (optionalExpression -> .)
    $end            reduce using rule 3 (optionalExpression -> .)
    RIGHT_PARENT    reduce using rule 3 (optionalExpression -> .)
    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    optionalExpression             shift and go to state 71
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 38

    (66) commaExpression -> commaExpressionContent COMMA .
    (64) commaExpressionContent -> commaExpressionContent COMMA . assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    DOT             reduce using rule 66 (commaExpression -> commaExpressionContent COMMA .)
    $end            reduce using rule 66 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_PARENT    reduce using rule 66 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_BRACKET   reduce using rule 66 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_CURLY_BRACKET reduce using rule 66 (commaExpression -> commaExpressionContent COMMA .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    assignmentExpression           shift and go to state 72
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 39

    (62) assignmentExpression -> lowPrecedenceExpression ASSIGNMENT . assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    lowPrecedenceExpression        shift and go to state 7
    assignmentExpression           shift and go to state 73
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 40

    (59) lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator . chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    chainExpression                shift and go to state 74
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 41

    (60) lowPrecedenceOperator -> COLON_COLON . anyOperator
    (84) anyOperator -> . OPERATOR
    (85) anyOperator -> . BAR
    (86) anyOperator -> . LESS_THAN
    (87) anyOperator -> . GREATER_THAN

    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    anyOperator                    shift and go to state 75

state 42

    (55) chainExpression -> binaryExpression optionalKeywordChain .

    ASSIGNMENT      reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    COLON_COLON     reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    COMMA           reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    DOT             reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    $end            reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    RIGHT_PARENT    reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    RIGHT_BRACKET   reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)
    RIGHT_CURLY_BRACKET reduce using rule 55 (chainExpression -> binaryExpression optionalKeywordChain .)


state 43

    (42) binaryExpression -> binaryExpression anyOperator . prefixUnaryExpression
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    prefixUnaryExpression          shift and go to state 76
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 44

    (52) optionalKeywordChain -> chainedMessages .
    (50) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    COLON_COLON     reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    COMMA           reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    DOT             reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    $end            reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    RIGHT_PARENT    reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    RIGHT_BRACKET   reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 52 (optionalKeywordChain -> chainedMessages .)
    SEMICOLON       shift and go to state 77


state 45

    (53) optionalKeywordChain -> chainedMessageKeyword .
    (54) optionalKeywordChain -> chainedMessageKeyword . chainedMessages
    (49) chainedMessages -> . SEMICOLON chainedMessage
    (50) chainedMessages -> . chainedMessages SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    COLON_COLON     reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    COMMA           reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    DOT             reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    $end            reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    RIGHT_PARENT    reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    RIGHT_BRACKET   reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    RIGHT_CURLY_BRACKET reduce using rule 53 (optionalKeywordChain -> chainedMessageKeyword .)
    SEMICOLON       shift and go to state 50

    chainedMessages                shift and go to state 78

state 46

    (84) anyOperator -> OPERATOR .

    QUOTE           reduce using rule 84 (anyOperator -> OPERATOR .)
    QUASI_QUOTE     reduce using rule 84 (anyOperator -> OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 84 (anyOperator -> OPERATOR .)
    SPLICE          reduce using rule 84 (anyOperator -> OPERATOR .)
    OPERATOR        reduce using rule 84 (anyOperator -> OPERATOR .)
    IDENTIFIER      reduce using rule 84 (anyOperator -> OPERATOR .)
    LEFT_PARENT     reduce using rule 84 (anyOperator -> OPERATOR .)
    FLOAT           reduce using rule 84 (anyOperator -> OPERATOR .)
    INTEGER         reduce using rule 84 (anyOperator -> OPERATOR .)
    CHARACTER       reduce using rule 84 (anyOperator -> OPERATOR .)
    STRING          reduce using rule 84 (anyOperator -> OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 84 (anyOperator -> OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 84 (anyOperator -> OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 84 (anyOperator -> OPERATOR .)
    SYMBOL_STRING   reduce using rule 84 (anyOperator -> OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 84 (anyOperator -> OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 84 (anyOperator -> OPERATOR .)
    KEYWORD         reduce using rule 84 (anyOperator -> OPERATOR .)
    RIGHT_PARENT    reduce using rule 84 (anyOperator -> OPERATOR .)
    MULTI_KEYWORD   reduce using rule 84 (anyOperator -> OPERATOR .)
    BAR             reduce using rule 84 (anyOperator -> OPERATOR .)
    LESS_THAN       reduce using rule 84 (anyOperator -> OPERATOR .)
    GREATER_THAN    reduce using rule 84 (anyOperator -> OPERATOR .)


state 47

    (85) anyOperator -> BAR .

    QUOTE           reduce using rule 85 (anyOperator -> BAR .)
    QUASI_QUOTE     reduce using rule 85 (anyOperator -> BAR .)
    QUASI_UNQUOTE   reduce using rule 85 (anyOperator -> BAR .)
    SPLICE          reduce using rule 85 (anyOperator -> BAR .)
    OPERATOR        reduce using rule 85 (anyOperator -> BAR .)
    IDENTIFIER      reduce using rule 85 (anyOperator -> BAR .)
    LEFT_PARENT     reduce using rule 85 (anyOperator -> BAR .)
    FLOAT           reduce using rule 85 (anyOperator -> BAR .)
    INTEGER         reduce using rule 85 (anyOperator -> BAR .)
    CHARACTER       reduce using rule 85 (anyOperator -> BAR .)
    STRING          reduce using rule 85 (anyOperator -> BAR .)
    SYMBOL_IDENTIFIER reduce using rule 85 (anyOperator -> BAR .)
    SYMBOL_KEYWORD  reduce using rule 85 (anyOperator -> BAR .)
    SYMBOL_OPERATOR reduce using rule 85 (anyOperator -> BAR .)
    SYMBOL_STRING   reduce using rule 85 (anyOperator -> BAR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 85 (anyOperator -> BAR .)
    LEFT_CURLY_BRACKET reduce using rule 85 (anyOperator -> BAR .)
    KEYWORD         reduce using rule 85 (anyOperator -> BAR .)
    RIGHT_PARENT    reduce using rule 85 (anyOperator -> BAR .)
    MULTI_KEYWORD   reduce using rule 85 (anyOperator -> BAR .)
    BAR             reduce using rule 85 (anyOperator -> BAR .)
    LESS_THAN       reduce using rule 85 (anyOperator -> BAR .)
    GREATER_THAN    reduce using rule 85 (anyOperator -> BAR .)


state 48

    (86) anyOperator -> LESS_THAN .

    QUOTE           reduce using rule 86 (anyOperator -> LESS_THAN .)
    QUASI_QUOTE     reduce using rule 86 (anyOperator -> LESS_THAN .)
    QUASI_UNQUOTE   reduce using rule 86 (anyOperator -> LESS_THAN .)
    SPLICE          reduce using rule 86 (anyOperator -> LESS_THAN .)
    OPERATOR        reduce using rule 86 (anyOperator -> LESS_THAN .)
    IDENTIFIER      reduce using rule 86 (anyOperator -> LESS_THAN .)
    LEFT_PARENT     reduce using rule 86 (anyOperator -> LESS_THAN .)
    FLOAT           reduce using rule 86 (anyOperator -> LESS_THAN .)
    INTEGER         reduce using rule 86 (anyOperator -> LESS_THAN .)
    CHARACTER       reduce using rule 86 (anyOperator -> LESS_THAN .)
    STRING          reduce using rule 86 (anyOperator -> LESS_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 86 (anyOperator -> LESS_THAN .)
    SYMBOL_KEYWORD  reduce using rule 86 (anyOperator -> LESS_THAN .)
    SYMBOL_OPERATOR reduce using rule 86 (anyOperator -> LESS_THAN .)
    SYMBOL_STRING   reduce using rule 86 (anyOperator -> LESS_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 86 (anyOperator -> LESS_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 86 (anyOperator -> LESS_THAN .)
    KEYWORD         reduce using rule 86 (anyOperator -> LESS_THAN .)
    RIGHT_PARENT    reduce using rule 86 (anyOperator -> LESS_THAN .)
    MULTI_KEYWORD   reduce using rule 86 (anyOperator -> LESS_THAN .)
    BAR             reduce using rule 86 (anyOperator -> LESS_THAN .)
    LESS_THAN       reduce using rule 86 (anyOperator -> LESS_THAN .)
    GREATER_THAN    reduce using rule 86 (anyOperator -> LESS_THAN .)


state 49

    (87) anyOperator -> GREATER_THAN .

    QUOTE           reduce using rule 87 (anyOperator -> GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 87 (anyOperator -> GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 87 (anyOperator -> GREATER_THAN .)
    SPLICE          reduce using rule 87 (anyOperator -> GREATER_THAN .)
    OPERATOR        reduce using rule 87 (anyOperator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 87 (anyOperator -> GREATER_THAN .)
    LEFT_PARENT     reduce using rule 87 (anyOperator -> GREATER_THAN .)
    FLOAT           reduce using rule 87 (anyOperator -> GREATER_THAN .)
    INTEGER         reduce using rule 87 (anyOperator -> GREATER_THAN .)
    CHARACTER       reduce using rule 87 (anyOperator -> GREATER_THAN .)
    STRING          reduce using rule 87 (anyOperator -> GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 87 (anyOperator -> GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 87 (anyOperator -> GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 87 (anyOperator -> GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 87 (anyOperator -> GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 87 (anyOperator -> GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 87 (anyOperator -> GREATER_THAN .)
    KEYWORD         reduce using rule 87 (anyOperator -> GREATER_THAN .)
    RIGHT_PARENT    reduce using rule 87 (anyOperator -> GREATER_THAN .)
    MULTI_KEYWORD   reduce using rule 87 (anyOperator -> GREATER_THAN .)
    BAR             reduce using rule 87 (anyOperator -> GREATER_THAN .)
    LESS_THAN       reduce using rule 87 (anyOperator -> GREATER_THAN .)
    GREATER_THAN    reduce using rule 87 (anyOperator -> GREATER_THAN .)


state 50

    (49) chainedMessages -> SEMICOLON . chainedMessage
    (47) chainedMessage -> . chainedMessageKeyword
    (48) chainedMessage -> . expandableIdentifier
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (43) chainedMessageArgument -> . KEYWORD binaryExpression

    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58
    KEYWORD         shift and go to state 24

    chainedMessage                 shift and go to state 79
    chainedMessageKeyword          shift and go to state 80
    expandableIdentifier           shift and go to state 81
    chainedMessageArguments        shift and go to state 12
    chainedMessageArgument         shift and go to state 15

state 51

    (57) chainExpression -> chainedMessageKeyword chainedMessages .
    (50) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    COLON_COLON     reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    COMMA           reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    DOT             reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    $end            reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    RIGHT_PARENT    reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    RIGHT_BRACKET   reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 57 (chainExpression -> chainedMessageKeyword chainedMessages .)
    SEMICOLON       shift and go to state 77


state 52

    (45) chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .

    KEYWORD         reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    SEMICOLON       reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    ASSIGNMENT      reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    COLON_COLON     reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    COMMA           reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    DOT             reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    $end            reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_PARENT    reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_BRACKET   reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_CURLY_BRACKET reduce using rule 45 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)


state 53

    (15) primaryExpression -> primaryExpression expandableIdentifier .

    LEFT_PARENT     reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    LEFT_BRACKET    reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    IDENTIFIER      reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    QUASI_UNQUOTE   reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    LEFT_CURLY_BRACKET reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    OPERATOR        reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    BAR             reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    LESS_THAN       reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    GREATER_THAN    reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    SEMICOLON       reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    KEYWORD         reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    ASSIGNMENT      reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    COLON_COLON     reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    COMMA           reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    DOT             reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    $end            reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    RIGHT_PARENT    reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    RIGHT_BRACKET   reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (primaryExpression -> primaryExpression expandableIdentifier .)


state 54

    (16) primaryExpression -> primaryExpression LEFT_PARENT . expressionList RIGHT_PARENT
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    RIGHT_PARENT    reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryExpression              shift and go to state 13
    expressionList                 shift and go to state 82
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 55

    (17) primaryExpression -> primaryExpression LEFT_BRACKET . expressionList RIGHT_BRACKET
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryExpression              shift and go to state 13
    expressionList                 shift and go to state 83
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 56

    (18) primaryExpression -> primaryExpression block .

    LEFT_PARENT     reduce using rule 18 (primaryExpression -> primaryExpression block .)
    LEFT_BRACKET    reduce using rule 18 (primaryExpression -> primaryExpression block .)
    IDENTIFIER      reduce using rule 18 (primaryExpression -> primaryExpression block .)
    QUASI_UNQUOTE   reduce using rule 18 (primaryExpression -> primaryExpression block .)
    LEFT_CURLY_BRACKET reduce using rule 18 (primaryExpression -> primaryExpression block .)
    OPERATOR        reduce using rule 18 (primaryExpression -> primaryExpression block .)
    BAR             reduce using rule 18 (primaryExpression -> primaryExpression block .)
    LESS_THAN       reduce using rule 18 (primaryExpression -> primaryExpression block .)
    GREATER_THAN    reduce using rule 18 (primaryExpression -> primaryExpression block .)
    SEMICOLON       reduce using rule 18 (primaryExpression -> primaryExpression block .)
    KEYWORD         reduce using rule 18 (primaryExpression -> primaryExpression block .)
    ASSIGNMENT      reduce using rule 18 (primaryExpression -> primaryExpression block .)
    COLON_COLON     reduce using rule 18 (primaryExpression -> primaryExpression block .)
    COMMA           reduce using rule 18 (primaryExpression -> primaryExpression block .)
    DOT             reduce using rule 18 (primaryExpression -> primaryExpression block .)
    $end            reduce using rule 18 (primaryExpression -> primaryExpression block .)
    RIGHT_PARENT    reduce using rule 18 (primaryExpression -> primaryExpression block .)
    RIGHT_BRACKET   reduce using rule 18 (primaryExpression -> primaryExpression block .)
    RIGHT_CURLY_BRACKET reduce using rule 18 (primaryExpression -> primaryExpression block .)


state 57

    (37) expandableIdentifier -> IDENTIFIER .

    LEFT_PARENT     reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    QUASI_UNQUOTE   reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    OPERATOR        reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    BAR             reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    LESS_THAN       reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    KEYWORD         reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    COLON_COLON     reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    COMMA           reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    DOT             reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    $end            reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)
    COLON           reduce using rule 37 (expandableIdentifier -> IDENTIFIER .)


state 58

    (38) expandableIdentifier -> QUASI_UNQUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryTerm                    shift and go to state 84
    literal                        shift and go to state 26
    block                          shift and go to state 22

state 59

    (40) prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .

    OPERATOR        reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    BAR             reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    LESS_THAN       reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    SEMICOLON       reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    KEYWORD         reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COLON_COLON     reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COMMA           reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    DOT             reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    $end            reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)


state 60

    (11) primaryExpression -> QUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    OPERATOR        reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    BAR             reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    LESS_THAN       reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    SEMICOLON       reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    KEYWORD         reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    COLON_COLON     reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    COMMA           reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    DOT             reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    $end            reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (primaryExpression -> QUOTE primaryTerm .)


state 61

    (12) primaryExpression -> QUASI_QUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    OPERATOR        reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    BAR             reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LESS_THAN       reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    SEMICOLON       reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    KEYWORD         reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COLON_COLON     reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COMMA           reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    DOT             reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    $end            reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (primaryExpression -> QUASI_QUOTE primaryTerm .)


state 62

    (13) primaryExpression -> QUASI_UNQUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    OPERATOR        reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    BAR             reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LESS_THAN       reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    SEMICOLON       reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    KEYWORD         reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COLON_COLON     reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COMMA           reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    DOT             reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    $end            reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)


state 63

    (14) primaryExpression -> SPLICE primaryTerm .

    LEFT_PARENT     reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    LEFT_BRACKET    reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    IDENTIFIER      reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    OPERATOR        reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    BAR             reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    LESS_THAN       reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    GREATER_THAN    reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    SEMICOLON       reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    KEYWORD         reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    ASSIGNMENT      reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    COLON_COLON     reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    COMMA           reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    DOT             reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    $end            reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_PARENT    reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (primaryExpression -> SPLICE primaryTerm .)


state 64

    (8) primaryTerm -> LEFT_PARENT RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    OPERATOR        reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    BAR             reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LESS_THAN       reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    SEMICOLON       reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    KEYWORD         reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COLON_COLON     reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COMMA           reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    DOT             reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    $end            reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COLON           reduce using rule 8 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)


state 65

    (9) primaryTerm -> LEFT_PARENT expression . RIGHT_PARENT

    RIGHT_PARENT    shift and go to state 85


state 66

    (43) chainedMessageArgument -> KEYWORD binaryExpression .
    (42) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (84) anyOperator -> . OPERATOR
    (85) anyOperator -> . BAR
    (86) anyOperator -> . LESS_THAN
    (87) anyOperator -> . GREATER_THAN

    KEYWORD         reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    SEMICOLON       reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    ASSIGNMENT      reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    COLON_COLON     reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    COMMA           reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    DOT             reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    $end            reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_PARENT    reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_BRACKET   reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 43 (chainedMessageArgument -> KEYWORD binaryExpression .)
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    anyOperator                    shift and go to state 43

state 67

    (76) literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements . RIGHT_PARENT
    (78) literalArrayElements -> literalArrayElements . literalArrayElement
    (79) literalArrayElement -> . literal
    (80) literalArrayElement -> . IDENTIFIER
    (81) literalArrayElement -> . anyKeyword
    (82) literalArrayElement -> . anyOperator
    (83) literalArrayElement -> . LEFT_PARENT literalArrayElements RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (89) anyKeyword -> . KEYWORD
    (90) anyKeyword -> . MULTI_KEYWORD
    (84) anyOperator -> . OPERATOR
    (85) anyOperator -> . BAR
    (86) anyOperator -> . LESS_THAN
    (87) anyOperator -> . GREATER_THAN

    RIGHT_PARENT    shift and go to state 86
    IDENTIFIER      shift and go to state 89
    LEFT_PARENT     shift and go to state 92
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    KEYWORD         shift and go to state 93
    MULTI_KEYWORD   shift and go to state 94
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    literalArrayElement            shift and go to state 87
    literal                        shift and go to state 88
    anyKeyword                     shift and go to state 90
    anyOperator                    shift and go to state 91

state 68

    (29) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader . pragmaList expressionList RIGHT_CURLY_BRACKET
    (22) pragmaList -> .
    (23) pragmaList -> . pragmaList pragma

    LESS_THAN       reduce using rule 22 (pragmaList -> .)
    QUOTE           reduce using rule 22 (pragmaList -> .)
    QUASI_QUOTE     reduce using rule 22 (pragmaList -> .)
    QUASI_UNQUOTE   reduce using rule 22 (pragmaList -> .)
    SPLICE          reduce using rule 22 (pragmaList -> .)
    OPERATOR        reduce using rule 22 (pragmaList -> .)
    KEYWORD         reduce using rule 22 (pragmaList -> .)
    IDENTIFIER      reduce using rule 22 (pragmaList -> .)
    LEFT_PARENT     reduce using rule 22 (pragmaList -> .)
    FLOAT           reduce using rule 22 (pragmaList -> .)
    INTEGER         reduce using rule 22 (pragmaList -> .)
    CHARACTER       reduce using rule 22 (pragmaList -> .)
    STRING          reduce using rule 22 (pragmaList -> .)
    SYMBOL_IDENTIFIER reduce using rule 22 (pragmaList -> .)
    SYMBOL_KEYWORD  reduce using rule 22 (pragmaList -> .)
    SYMBOL_OPERATOR reduce using rule 22 (pragmaList -> .)
    SYMBOL_STRING   reduce using rule 22 (pragmaList -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 22 (pragmaList -> .)
    LEFT_CURLY_BRACKET reduce using rule 22 (pragmaList -> .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (pragmaList -> .)
    DOT             reduce using rule 22 (pragmaList -> .)

    pragmaList                     shift and go to state 95

state 69

    (20) optionalBlockClosureHeader -> blockClosureHeader .

    LESS_THAN       reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUOTE           reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUASI_QUOTE     reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUASI_UNQUOTE   reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    SPLICE          reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    OPERATOR        reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    KEYWORD         reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    IDENTIFIER      reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    LEFT_PARENT     reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    FLOAT           reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    INTEGER         reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    CHARACTER       reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    STRING          reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_IDENTIFIER reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_KEYWORD  reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_OPERATOR reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_STRING   reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    LEFT_CURLY_BRACKET reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)
    DOT             reduce using rule 20 (optionalBlockClosureHeader -> blockClosureHeader .)


state 70

    (19) blockClosureHeader -> blockArguments . blockResultType BAR
    (31) blockArguments -> blockArguments . blockArgument
    (35) blockResultType -> .
    (36) blockResultType -> . COLON_COLON primaryExpression
    (34) blockArgument -> . COLON optionalBlockArgumentType expandableIdentifier

    BAR             reduce using rule 35 (blockResultType -> .)
    COLON_COLON     shift and go to state 98
    COLON           shift and go to state 99

    blockResultType                shift and go to state 96
    blockArgument                  shift and go to state 97

state 71

    (2) expressionList -> expressionList DOT optionalExpression .

    DOT             reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    $end            reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_PARENT    reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_BRACKET   reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)


state 72

    (64) commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .

    COMMA           reduce using rule 64 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    DOT             reduce using rule 64 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    $end            reduce using rule 64 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_PARENT    reduce using rule 64 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 64 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 64 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)


state 73

    (62) assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .

    COMMA           reduce using rule 62 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    DOT             reduce using rule 62 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    $end            reduce using rule 62 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_PARENT    reduce using rule 62 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 62 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 62 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)


state 74

    (59) lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .

    ASSIGNMENT      reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    COLON_COLON     reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    COMMA           reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    DOT             reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    $end            reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_PARENT    reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_BRACKET   reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 59 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)


state 75

    (60) lowPrecedenceOperator -> COLON_COLON anyOperator .

    QUOTE           reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    QUASI_QUOTE     reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    QUASI_UNQUOTE   reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SPLICE          reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    OPERATOR        reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    KEYWORD         reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    IDENTIFIER      reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LEFT_PARENT     reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    FLOAT           reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    INTEGER         reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    CHARACTER       reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    STRING          reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_IDENTIFIER reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_KEYWORD  reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_OPERATOR reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_STRING   reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LEFT_CURLY_BRACKET reduce using rule 60 (lowPrecedenceOperator -> COLON_COLON anyOperator .)


state 76

    (42) binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .

    OPERATOR        reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    BAR             reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    LESS_THAN       reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    SEMICOLON       reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    KEYWORD         reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COLON_COLON     reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COMMA           reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    DOT             reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    $end            reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)


state 77

    (50) chainedMessages -> chainedMessages SEMICOLON . chainedMessage
    (47) chainedMessage -> . chainedMessageKeyword
    (48) chainedMessage -> . expandableIdentifier
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (43) chainedMessageArgument -> . KEYWORD binaryExpression

    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58
    KEYWORD         shift and go to state 24

    chainedMessage                 shift and go to state 100
    chainedMessageKeyword          shift and go to state 80
    expandableIdentifier           shift and go to state 81
    chainedMessageArguments        shift and go to state 12
    chainedMessageArgument         shift and go to state 15

state 78

    (54) optionalKeywordChain -> chainedMessageKeyword chainedMessages .
    (50) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    COLON_COLON     reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    COMMA           reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    DOT             reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    $end            reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    RIGHT_PARENT    reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    RIGHT_BRACKET   reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 54 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    SEMICOLON       shift and go to state 77


state 79

    (49) chainedMessages -> SEMICOLON chainedMessage .

    SEMICOLON       reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    ASSIGNMENT      reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    COLON_COLON     reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    COMMA           reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    DOT             reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    $end            reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    RIGHT_PARENT    reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    RIGHT_BRACKET   reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (chainedMessages -> SEMICOLON chainedMessage .)


state 80

    (47) chainedMessage -> chainedMessageKeyword .

    SEMICOLON       reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    ASSIGNMENT      reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    COLON_COLON     reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    COMMA           reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    DOT             reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    $end            reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    RIGHT_PARENT    reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    RIGHT_BRACKET   reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)
    RIGHT_CURLY_BRACKET reduce using rule 47 (chainedMessage -> chainedMessageKeyword .)


state 81

    (48) chainedMessage -> expandableIdentifier .

    SEMICOLON       reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    ASSIGNMENT      reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    COLON_COLON     reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    COMMA           reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    DOT             reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    $end            reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    RIGHT_PARENT    reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    RIGHT_BRACKET   reduce using rule 48 (chainedMessage -> expandableIdentifier .)
    RIGHT_CURLY_BRACKET reduce using rule 48 (chainedMessage -> expandableIdentifier .)


state 82

    (16) primaryExpression -> primaryExpression LEFT_PARENT expressionList . RIGHT_PARENT
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_PARENT    shift and go to state 101
    DOT             shift and go to state 37


state 83

    (17) primaryExpression -> primaryExpression LEFT_BRACKET expressionList . RIGHT_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_BRACKET   shift and go to state 102
    DOT             shift and go to state 37


state 84

    (38) expandableIdentifier -> QUASI_UNQUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    OPERATOR        reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    BAR             reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    LESS_THAN       reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    SEMICOLON       reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    KEYWORD         reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COLON_COLON     reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COMMA           reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    DOT             reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    $end            reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COLON           reduce using rule 38 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)


state 85

    (9) primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    OPERATOR        reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    BAR             reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LESS_THAN       reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    SEMICOLON       reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    KEYWORD         reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COLON_COLON     reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COMMA           reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    DOT             reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    $end            reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COLON           reduce using rule 9 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)


state 86

    (76) literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    OPERATOR        reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    BAR             reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LESS_THAN       reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SEMICOLON       reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    KEYWORD         reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COLON_COLON     reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COMMA           reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    DOT             reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    $end            reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COLON           reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    FLOAT           reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    INTEGER         reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    CHARACTER       reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    STRING          reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_IDENTIFIER reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_KEYWORD  reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_OPERATOR reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_STRING   reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    MULTI_KEYWORD   reduce using rule 76 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)


state 87

    (78) literalArrayElements -> literalArrayElements literalArrayElement .

    RIGHT_PARENT    reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    IDENTIFIER      reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LEFT_PARENT     reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    FLOAT           reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    INTEGER         reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    CHARACTER       reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    STRING          reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_IDENTIFIER reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_KEYWORD  reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_OPERATOR reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_STRING   reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    KEYWORD         reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    MULTI_KEYWORD   reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    OPERATOR        reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    BAR             reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LESS_THAN       reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)
    GREATER_THAN    reduce using rule 78 (literalArrayElements -> literalArrayElements literalArrayElement .)


state 88

    (79) literalArrayElement -> literal .

    RIGHT_PARENT    reduce using rule 79 (literalArrayElement -> literal .)
    IDENTIFIER      reduce using rule 79 (literalArrayElement -> literal .)
    LEFT_PARENT     reduce using rule 79 (literalArrayElement -> literal .)
    FLOAT           reduce using rule 79 (literalArrayElement -> literal .)
    INTEGER         reduce using rule 79 (literalArrayElement -> literal .)
    CHARACTER       reduce using rule 79 (literalArrayElement -> literal .)
    STRING          reduce using rule 79 (literalArrayElement -> literal .)
    SYMBOL_IDENTIFIER reduce using rule 79 (literalArrayElement -> literal .)
    SYMBOL_KEYWORD  reduce using rule 79 (literalArrayElement -> literal .)
    SYMBOL_OPERATOR reduce using rule 79 (literalArrayElement -> literal .)
    SYMBOL_STRING   reduce using rule 79 (literalArrayElement -> literal .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 79 (literalArrayElement -> literal .)
    KEYWORD         reduce using rule 79 (literalArrayElement -> literal .)
    MULTI_KEYWORD   reduce using rule 79 (literalArrayElement -> literal .)
    OPERATOR        reduce using rule 79 (literalArrayElement -> literal .)
    BAR             reduce using rule 79 (literalArrayElement -> literal .)
    LESS_THAN       reduce using rule 79 (literalArrayElement -> literal .)
    GREATER_THAN    reduce using rule 79 (literalArrayElement -> literal .)


state 89

    (80) literalArrayElement -> IDENTIFIER .

    RIGHT_PARENT    reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    LEFT_PARENT     reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    FLOAT           reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    INTEGER         reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    CHARACTER       reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    STRING          reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_IDENTIFIER reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_KEYWORD  reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_OPERATOR reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_STRING   reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    KEYWORD         reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    MULTI_KEYWORD   reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    OPERATOR        reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    BAR             reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    LESS_THAN       reduce using rule 80 (literalArrayElement -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 80 (literalArrayElement -> IDENTIFIER .)


state 90

    (81) literalArrayElement -> anyKeyword .

    RIGHT_PARENT    reduce using rule 81 (literalArrayElement -> anyKeyword .)
    IDENTIFIER      reduce using rule 81 (literalArrayElement -> anyKeyword .)
    LEFT_PARENT     reduce using rule 81 (literalArrayElement -> anyKeyword .)
    FLOAT           reduce using rule 81 (literalArrayElement -> anyKeyword .)
    INTEGER         reduce using rule 81 (literalArrayElement -> anyKeyword .)
    CHARACTER       reduce using rule 81 (literalArrayElement -> anyKeyword .)
    STRING          reduce using rule 81 (literalArrayElement -> anyKeyword .)
    SYMBOL_IDENTIFIER reduce using rule 81 (literalArrayElement -> anyKeyword .)
    SYMBOL_KEYWORD  reduce using rule 81 (literalArrayElement -> anyKeyword .)
    SYMBOL_OPERATOR reduce using rule 81 (literalArrayElement -> anyKeyword .)
    SYMBOL_STRING   reduce using rule 81 (literalArrayElement -> anyKeyword .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 81 (literalArrayElement -> anyKeyword .)
    KEYWORD         reduce using rule 81 (literalArrayElement -> anyKeyword .)
    MULTI_KEYWORD   reduce using rule 81 (literalArrayElement -> anyKeyword .)
    OPERATOR        reduce using rule 81 (literalArrayElement -> anyKeyword .)
    BAR             reduce using rule 81 (literalArrayElement -> anyKeyword .)
    LESS_THAN       reduce using rule 81 (literalArrayElement -> anyKeyword .)
    GREATER_THAN    reduce using rule 81 (literalArrayElement -> anyKeyword .)


state 91

    (82) literalArrayElement -> anyOperator .

    RIGHT_PARENT    reduce using rule 82 (literalArrayElement -> anyOperator .)
    IDENTIFIER      reduce using rule 82 (literalArrayElement -> anyOperator .)
    LEFT_PARENT     reduce using rule 82 (literalArrayElement -> anyOperator .)
    FLOAT           reduce using rule 82 (literalArrayElement -> anyOperator .)
    INTEGER         reduce using rule 82 (literalArrayElement -> anyOperator .)
    CHARACTER       reduce using rule 82 (literalArrayElement -> anyOperator .)
    STRING          reduce using rule 82 (literalArrayElement -> anyOperator .)
    SYMBOL_IDENTIFIER reduce using rule 82 (literalArrayElement -> anyOperator .)
    SYMBOL_KEYWORD  reduce using rule 82 (literalArrayElement -> anyOperator .)
    SYMBOL_OPERATOR reduce using rule 82 (literalArrayElement -> anyOperator .)
    SYMBOL_STRING   reduce using rule 82 (literalArrayElement -> anyOperator .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 82 (literalArrayElement -> anyOperator .)
    KEYWORD         reduce using rule 82 (literalArrayElement -> anyOperator .)
    MULTI_KEYWORD   reduce using rule 82 (literalArrayElement -> anyOperator .)
    OPERATOR        reduce using rule 82 (literalArrayElement -> anyOperator .)
    BAR             reduce using rule 82 (literalArrayElement -> anyOperator .)
    LESS_THAN       reduce using rule 82 (literalArrayElement -> anyOperator .)
    GREATER_THAN    reduce using rule 82 (literalArrayElement -> anyOperator .)


state 92

    (83) literalArrayElement -> LEFT_PARENT . literalArrayElements RIGHT_PARENT
    (77) literalArrayElements -> .
    (78) literalArrayElements -> . literalArrayElements literalArrayElement

    RIGHT_PARENT    reduce using rule 77 (literalArrayElements -> .)
    IDENTIFIER      reduce using rule 77 (literalArrayElements -> .)
    LEFT_PARENT     reduce using rule 77 (literalArrayElements -> .)
    FLOAT           reduce using rule 77 (literalArrayElements -> .)
    INTEGER         reduce using rule 77 (literalArrayElements -> .)
    CHARACTER       reduce using rule 77 (literalArrayElements -> .)
    STRING          reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_IDENTIFIER reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_KEYWORD  reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_OPERATOR reduce using rule 77 (literalArrayElements -> .)
    SYMBOL_STRING   reduce using rule 77 (literalArrayElements -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 77 (literalArrayElements -> .)
    KEYWORD         reduce using rule 77 (literalArrayElements -> .)
    MULTI_KEYWORD   reduce using rule 77 (literalArrayElements -> .)
    OPERATOR        reduce using rule 77 (literalArrayElements -> .)
    BAR             reduce using rule 77 (literalArrayElements -> .)
    LESS_THAN       reduce using rule 77 (literalArrayElements -> .)
    GREATER_THAN    reduce using rule 77 (literalArrayElements -> .)

    literalArrayElements           shift and go to state 103

state 93

    (89) anyKeyword -> KEYWORD .

    RIGHT_PARENT    reduce using rule 89 (anyKeyword -> KEYWORD .)
    IDENTIFIER      reduce using rule 89 (anyKeyword -> KEYWORD .)
    LEFT_PARENT     reduce using rule 89 (anyKeyword -> KEYWORD .)
    FLOAT           reduce using rule 89 (anyKeyword -> KEYWORD .)
    INTEGER         reduce using rule 89 (anyKeyword -> KEYWORD .)
    CHARACTER       reduce using rule 89 (anyKeyword -> KEYWORD .)
    STRING          reduce using rule 89 (anyKeyword -> KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 89 (anyKeyword -> KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 89 (anyKeyword -> KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 89 (anyKeyword -> KEYWORD .)
    SYMBOL_STRING   reduce using rule 89 (anyKeyword -> KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 89 (anyKeyword -> KEYWORD .)
    KEYWORD         reduce using rule 89 (anyKeyword -> KEYWORD .)
    MULTI_KEYWORD   reduce using rule 89 (anyKeyword -> KEYWORD .)
    OPERATOR        reduce using rule 89 (anyKeyword -> KEYWORD .)
    BAR             reduce using rule 89 (anyKeyword -> KEYWORD .)
    LESS_THAN       reduce using rule 89 (anyKeyword -> KEYWORD .)
    GREATER_THAN    reduce using rule 89 (anyKeyword -> KEYWORD .)


state 94

    (90) anyKeyword -> MULTI_KEYWORD .

    RIGHT_PARENT    reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    IDENTIFIER      reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    LEFT_PARENT     reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    FLOAT           reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    INTEGER         reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    CHARACTER       reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    STRING          reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_STRING   reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    KEYWORD         reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    MULTI_KEYWORD   reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    OPERATOR        reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    BAR             reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    LESS_THAN       reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)
    GREATER_THAN    reduce using rule 90 (anyKeyword -> MULTI_KEYWORD .)


state 95

    (29) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList . expressionList RIGHT_CURLY_BRACKET
    (23) pragmaList -> pragmaList . pragma
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (24) pragma -> . LESS_THAN expandableIdentifier GREATER_THAN
    (25) pragma -> . LESS_THAN pragmaKeywordArguments GREATER_THAN
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    LESS_THAN       shift and go to state 106
    RIGHT_CURLY_BRACKET reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    expressionList                 shift and go to state 104
    pragma                         shift and go to state 105
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 96

    (19) blockClosureHeader -> blockArguments blockResultType . BAR

    BAR             shift and go to state 107


state 97

    (31) blockArguments -> blockArguments blockArgument .

    COLON_COLON     reduce using rule 31 (blockArguments -> blockArguments blockArgument .)
    COLON           reduce using rule 31 (blockArguments -> blockArguments blockArgument .)
    BAR             reduce using rule 31 (blockArguments -> blockArguments blockArgument .)


state 98

    (36) blockResultType -> COLON_COLON . primaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryExpression              shift and go to state 108
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 99

    (34) blockArgument -> COLON . optionalBlockArgumentType expandableIdentifier
    (32) optionalBlockArgumentType -> .
    (33) optionalBlockArgumentType -> . LEFT_PARENT expression RIGHT_PARENT

    IDENTIFIER      reduce using rule 32 (optionalBlockArgumentType -> .)
    QUASI_UNQUOTE   reduce using rule 32 (optionalBlockArgumentType -> .)
    LEFT_PARENT     shift and go to state 110

    optionalBlockArgumentType      shift and go to state 109

state 100

    (50) chainedMessages -> chainedMessages SEMICOLON chainedMessage .

    SEMICOLON       reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    ASSIGNMENT      reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    COLON_COLON     reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    COMMA           reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    DOT             reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    $end            reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_PARENT    reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_BRACKET   reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_CURLY_BRACKET reduce using rule 50 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)


state 101

    (16) primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    OPERATOR        reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    BAR             reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LESS_THAN       reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    SEMICOLON       reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    KEYWORD         reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COLON_COLON     reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COMMA           reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    DOT             reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    $end            reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)


state 102

    (17) primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .

    LEFT_PARENT     reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    QUASI_UNQUOTE   reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    OPERATOR        reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    BAR             reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    KEYWORD         reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COLON_COLON     reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COMMA           reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    DOT             reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    $end            reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_PARENT    reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)


state 103

    (83) literalArrayElement -> LEFT_PARENT literalArrayElements . RIGHT_PARENT
    (78) literalArrayElements -> literalArrayElements . literalArrayElement
    (79) literalArrayElement -> . literal
    (80) literalArrayElement -> . IDENTIFIER
    (81) literalArrayElement -> . anyKeyword
    (82) literalArrayElement -> . anyOperator
    (83) literalArrayElement -> . LEFT_PARENT literalArrayElements RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (89) anyKeyword -> . KEYWORD
    (90) anyKeyword -> . MULTI_KEYWORD
    (84) anyOperator -> . OPERATOR
    (85) anyOperator -> . BAR
    (86) anyOperator -> . LESS_THAN
    (87) anyOperator -> . GREATER_THAN

    RIGHT_PARENT    shift and go to state 111
    IDENTIFIER      shift and go to state 89
    LEFT_PARENT     shift and go to state 92
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    KEYWORD         shift and go to state 93
    MULTI_KEYWORD   shift and go to state 94
    OPERATOR        shift and go to state 46
    BAR             shift and go to state 47
    LESS_THAN       shift and go to state 48
    GREATER_THAN    shift and go to state 49

    literalArrayElement            shift and go to state 87
    literal                        shift and go to state 88
    anyKeyword                     shift and go to state 90
    anyOperator                    shift and go to state 91

state 104

    (29) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList . RIGHT_CURLY_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_CURLY_BRACKET shift and go to state 112
    DOT             shift and go to state 37


state 105

    (23) pragmaList -> pragmaList pragma .

    LESS_THAN       reduce using rule 23 (pragmaList -> pragmaList pragma .)
    QUOTE           reduce using rule 23 (pragmaList -> pragmaList pragma .)
    QUASI_QUOTE     reduce using rule 23 (pragmaList -> pragmaList pragma .)
    QUASI_UNQUOTE   reduce using rule 23 (pragmaList -> pragmaList pragma .)
    SPLICE          reduce using rule 23 (pragmaList -> pragmaList pragma .)
    OPERATOR        reduce using rule 23 (pragmaList -> pragmaList pragma .)
    KEYWORD         reduce using rule 23 (pragmaList -> pragmaList pragma .)
    IDENTIFIER      reduce using rule 23 (pragmaList -> pragmaList pragma .)
    LEFT_PARENT     reduce using rule 23 (pragmaList -> pragmaList pragma .)
    FLOAT           reduce using rule 23 (pragmaList -> pragmaList pragma .)
    INTEGER         reduce using rule 23 (pragmaList -> pragmaList pragma .)
    CHARACTER       reduce using rule 23 (pragmaList -> pragmaList pragma .)
    STRING          reduce using rule 23 (pragmaList -> pragmaList pragma .)
    SYMBOL_IDENTIFIER reduce using rule 23 (pragmaList -> pragmaList pragma .)
    SYMBOL_KEYWORD  reduce using rule 23 (pragmaList -> pragmaList pragma .)
    SYMBOL_OPERATOR reduce using rule 23 (pragmaList -> pragmaList pragma .)
    SYMBOL_STRING   reduce using rule 23 (pragmaList -> pragmaList pragma .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 23 (pragmaList -> pragmaList pragma .)
    LEFT_CURLY_BRACKET reduce using rule 23 (pragmaList -> pragmaList pragma .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (pragmaList -> pragmaList pragma .)
    DOT             reduce using rule 23 (pragmaList -> pragmaList pragma .)


state 106

    (24) pragma -> LESS_THAN . expandableIdentifier GREATER_THAN
    (25) pragma -> LESS_THAN . pragmaKeywordArguments GREATER_THAN
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (27) pragmaKeywordArguments -> . pragmaKeywordArgument
    (28) pragmaKeywordArguments -> . pragmaKeywordArguments pragmaKeywordArgument
    (26) pragmaKeywordArgument -> . KEYWORD primaryExpression

    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58
    KEYWORD         shift and go to state 116

    expandableIdentifier           shift and go to state 113
    pragmaKeywordArguments         shift and go to state 114
    pragmaKeywordArgument          shift and go to state 115

state 107

    (19) blockClosureHeader -> blockArguments blockResultType BAR .

    LESS_THAN       reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUOTE           reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUASI_QUOTE     reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUASI_UNQUOTE   reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SPLICE          reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    OPERATOR        reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    KEYWORD         reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    IDENTIFIER      reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LEFT_PARENT     reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    FLOAT           reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    INTEGER         reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    CHARACTER       reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    STRING          reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_IDENTIFIER reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_KEYWORD  reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_OPERATOR reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_STRING   reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LEFT_CURLY_BRACKET reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    RIGHT_CURLY_BRACKET reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)
    DOT             reduce using rule 19 (blockClosureHeader -> blockArguments blockResultType BAR .)


state 108

    (36) blockResultType -> COLON_COLON primaryExpression .
    (15) primaryExpression -> primaryExpression . expandableIdentifier
    (16) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> primaryExpression . block
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    BAR             reduce using rule 36 (blockResultType -> COLON_COLON primaryExpression .)
    LEFT_PARENT     shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58
    LEFT_CURLY_BRACKET shift and go to state 36

    expandableIdentifier           shift and go to state 53
    block                          shift and go to state 56

state 109

    (34) blockArgument -> COLON optionalBlockArgumentType . expandableIdentifier
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm

    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58

    expandableIdentifier           shift and go to state 117

state 110

    (33) optionalBlockArgumentType -> LEFT_PARENT . expression RIGHT_PARENT
    (67) expression -> . commaExpression
    (65) commaExpression -> . commaExpressionContent
    (66) commaExpression -> . commaExpressionContent COMMA
    (63) commaExpressionContent -> . assignmentExpression
    (64) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (61) assignmentExpression -> . lowPrecedenceExpression
    (62) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (58) lowPrecedenceExpression -> . chainExpression
    (59) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (55) chainExpression -> . binaryExpression optionalKeywordChain
    (56) chainExpression -> . chainedMessageKeyword
    (57) chainExpression -> . chainedMessageKeyword chainedMessages
    (41) binaryExpression -> . prefixUnaryExpression
    (42) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (46) chainedMessageKeyword -> . chainedMessageArguments
    (39) prefixUnaryExpression -> . primaryExpression
    (40) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (44) chainedMessageArguments -> . chainedMessageArgument
    (45) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (88) anyPrefixOperator -> . OPERATOR
    (43) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    expression                     shift and go to state 118
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 111

    (83) literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .

    RIGHT_PARENT    reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_PARENT     reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    FLOAT           reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    INTEGER         reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    CHARACTER       reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    STRING          reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_IDENTIFIER reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_KEYWORD  reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_OPERATOR reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_STRING   reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    KEYWORD         reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    MULTI_KEYWORD   reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    OPERATOR        reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    BAR             reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LESS_THAN       reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 83 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)


state 112

    (29) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .

    LEFT_PARENT     reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    QUASI_UNQUOTE   reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    OPERATOR        reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    BAR             reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LESS_THAN       reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    GREATER_THAN    reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    KEYWORD         reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    ASSIGNMENT      reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COLON_COLON     reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    DOT             reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_PARENT    reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 29 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)


state 113

    (24) pragma -> LESS_THAN expandableIdentifier . GREATER_THAN

    GREATER_THAN    shift and go to state 119


state 114

    (25) pragma -> LESS_THAN pragmaKeywordArguments . GREATER_THAN
    (28) pragmaKeywordArguments -> pragmaKeywordArguments . pragmaKeywordArgument
    (26) pragmaKeywordArgument -> . KEYWORD primaryExpression

    GREATER_THAN    shift and go to state 120
    KEYWORD         shift and go to state 116

    pragmaKeywordArgument          shift and go to state 121

state 115

    (27) pragmaKeywordArguments -> pragmaKeywordArgument .

    GREATER_THAN    reduce using rule 27 (pragmaKeywordArguments -> pragmaKeywordArgument .)
    KEYWORD         reduce using rule 27 (pragmaKeywordArguments -> pragmaKeywordArgument .)


state 116

    (26) pragmaKeywordArgument -> KEYWORD . primaryExpression
    (10) primaryExpression -> . primaryTerm
    (11) primaryExpression -> . QUOTE primaryTerm
    (12) primaryExpression -> . QUASI_QUOTE primaryTerm
    (13) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (14) primaryExpression -> . SPLICE primaryTerm
    (15) primaryExpression -> . primaryExpression expandableIdentifier
    (16) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> . primaryExpression block
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (9) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (68) literal -> . FLOAT
    (69) literal -> . INTEGER
    (70) literal -> . CHARACTER
    (71) literal -> . STRING
    (72) literal -> . SYMBOL_IDENTIFIER
    (73) literal -> . SYMBOL_KEYWORD
    (74) literal -> . SYMBOL_OPERATOR
    (75) literal -> . SYMBOL_STRING
    (76) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 27
    INTEGER         shift and go to state 28
    CHARACTER       shift and go to state 29
    STRING          shift and go to state 30
    SYMBOL_IDENTIFIER shift and go to state 31
    SYMBOL_KEYWORD  shift and go to state 32
    SYMBOL_OPERATOR shift and go to state 33
    SYMBOL_STRING   shift and go to state 34
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 35
    LEFT_CURLY_BRACKET shift and go to state 36

    primaryExpression              shift and go to state 122
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26

state 117

    (34) blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .

    COLON_COLON     reduce using rule 34 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)
    COLON           reduce using rule 34 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)
    BAR             reduce using rule 34 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)


state 118

    (33) optionalBlockArgumentType -> LEFT_PARENT expression . RIGHT_PARENT

    RIGHT_PARENT    shift and go to state 123


state 119

    (24) pragma -> LESS_THAN expandableIdentifier GREATER_THAN .

    LESS_THAN       reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUOTE           reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SPLICE          reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    OPERATOR        reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    KEYWORD         reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    IDENTIFIER      reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LEFT_PARENT     reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    FLOAT           reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    INTEGER         reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    CHARACTER       reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    STRING          reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    DOT             reduce using rule 24 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)


state 120

    (25) pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .

    LESS_THAN       reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUOTE           reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SPLICE          reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    OPERATOR        reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    KEYWORD         reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    IDENTIFIER      reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LEFT_PARENT     reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    FLOAT           reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    INTEGER         reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    CHARACTER       reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    STRING          reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    DOT             reduce using rule 25 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)


state 121

    (28) pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .

    GREATER_THAN    reduce using rule 28 (pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .)
    KEYWORD         reduce using rule 28 (pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .)


state 122

    (26) pragmaKeywordArgument -> KEYWORD primaryExpression .
    (15) primaryExpression -> primaryExpression . expandableIdentifier
    (16) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (17) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (18) primaryExpression -> primaryExpression . block
    (37) expandableIdentifier -> . IDENTIFIER
    (38) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (29) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    GREATER_THAN    reduce using rule 26 (pragmaKeywordArgument -> KEYWORD primaryExpression .)
    KEYWORD         reduce using rule 26 (pragmaKeywordArgument -> KEYWORD primaryExpression .)
    LEFT_PARENT     shift and go to state 54
    LEFT_BRACKET    shift and go to state 55
    IDENTIFIER      shift and go to state 57
    QUASI_UNQUOTE   shift and go to state 58
    LEFT_CURLY_BRACKET shift and go to state 36

    expandableIdentifier           shift and go to state 53
    block                          shift and go to state 56

state 123

    (33) optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .

    IDENTIFIER      reduce using rule 33 (optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 33 (optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .)

