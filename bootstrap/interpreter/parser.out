Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expressionList
Rule 1     expressionList -> optionalExpression
Rule 2     expressionList -> expressionList DOT optionalExpression
Rule 3     optionalExpression -> <empty>
Rule 4     optionalExpression -> expression
Rule 5     primaryTerm -> IDENTIFIER
Rule 6     primaryTerm -> literal
Rule 7     primaryTerm -> block
Rule 8     primaryTerm -> makeDictionary
Rule 9     primaryTerm -> makeByteArray
Rule 10    primaryTerm -> LEFT_PARENT RIGHT_PARENT
Rule 11    primaryTerm -> LEFT_PARENT expression RIGHT_PARENT
Rule 12    primaryExpression -> primaryTerm
Rule 13    primaryExpression -> QUOTE primaryTerm
Rule 14    primaryExpression -> QUASI_QUOTE primaryTerm
Rule 15    primaryExpression -> QUASI_UNQUOTE primaryTerm
Rule 16    primaryExpression -> SPLICE primaryTerm
Rule 17    primaryExpression -> primaryExpression expandableIdentifier
Rule 18    primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
Rule 19    primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
Rule 20    primaryExpression -> primaryExpression block
Rule 21    blockClosureHeader -> blockArguments blockResultType BAR
Rule 22    optionalBlockClosureHeader -> blockClosureHeader
Rule 23    optionalBlockClosureHeader -> <empty>
Rule 24    pragmaList -> <empty>
Rule 25    pragmaList -> pragmaList pragma
Rule 26    pragma -> LESS_THAN expandableIdentifier GREATER_THAN
Rule 27    pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN
Rule 28    pragmaKeywordArgument -> KEYWORD primaryExpression
Rule 29    pragmaKeywordArguments -> pragmaKeywordArgument
Rule 30    pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument
Rule 31    block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
Rule 32    blockArguments -> <empty>
Rule 33    blockArguments -> blockArguments blockArgument
Rule 34    optionalBlockArgumentType -> <empty>
Rule 35    optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT
Rule 36    blockArgument -> COLON optionalBlockArgumentType expandableIdentifier
Rule 37    blockResultType -> <empty>
Rule 38    blockResultType -> COLON_COLON primaryExpression
Rule 39    expandableIdentifier -> IDENTIFIER
Rule 40    expandableIdentifier -> QUASI_UNQUOTE primaryTerm
Rule 41    prefixUnaryExpression -> primaryExpression
Rule 42    prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression
Rule 43    binaryExpression -> prefixUnaryExpression
Rule 44    binaryExpression -> binaryExpression anyOperator prefixUnaryExpression
Rule 45    chainedMessageArgument -> KEYWORD binaryExpression
Rule 46    chainedMessageArguments -> chainedMessageArgument
Rule 47    chainedMessageArguments -> chainedMessageArguments chainedMessageArgument
Rule 48    chainedMessageKeyword -> chainedMessageArguments
Rule 49    chainedMessage -> chainedMessageKeyword
Rule 50    chainedMessage -> expandableIdentifier
Rule 51    chainedMessages -> SEMICOLON chainedMessage
Rule 52    chainedMessages -> chainedMessages SEMICOLON chainedMessage
Rule 53    optionalKeywordChain -> <empty>
Rule 54    optionalKeywordChain -> chainedMessages
Rule 55    optionalKeywordChain -> chainedMessageKeyword
Rule 56    optionalKeywordChain -> chainedMessageKeyword chainedMessages
Rule 57    chainExpression -> binaryExpression optionalKeywordChain
Rule 58    chainExpression -> chainedMessageKeyword
Rule 59    chainExpression -> chainedMessageKeyword chainedMessages
Rule 60    lowPrecedenceExpression -> chainExpression
Rule 61    lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression
Rule 62    lowPrecedenceOperator -> COLON_COLON anyOperator
Rule 63    assignmentExpression -> lowPrecedenceExpression
Rule 64    assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression
Rule 65    commaExpressionContent -> assignmentExpression
Rule 66    commaExpressionContent -> commaExpressionContent COMMA assignmentExpression
Rule 67    commaExpression -> commaExpressionContent
Rule 68    commaExpression -> commaExpressionContent COMMA
Rule 69    expression -> commaExpression
Rule 70    literal -> FLOAT
Rule 71    literal -> INTEGER
Rule 72    literal -> CHARACTER
Rule 73    literal -> STRING
Rule 74    literal -> SYMBOL_IDENTIFIER
Rule 75    literal -> SYMBOL_KEYWORD
Rule 76    literal -> SYMBOL_OPERATOR
Rule 77    literal -> SYMBOL_STRING
Rule 78    literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
Rule 79    literalArrayElements -> <empty>
Rule 80    literalArrayElements -> literalArrayElements literalArrayElement
Rule 81    literalArrayElement -> literal
Rule 82    literalArrayElement -> IDENTIFIER
Rule 83    literalArrayElement -> anyKeyword
Rule 84    literalArrayElement -> anyOperator
Rule 85    literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT
Rule 86    dictionaryKey -> KEYWORD
Rule 87    dictionaryKey -> binaryExpression COLON
Rule 88    dictionaryElement -> dictionaryKey
Rule 89    dictionaryElement -> dictionaryKey expression
Rule 90    dictionaryElements -> <empty>
Rule 91    dictionaryElements -> dictionaryElement
Rule 92    dictionaryElements -> dictionaryElements DOT dictionaryElement
Rule 93    dictionaryElements -> dictionaryElements DOT
Rule 94    makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
Rule 95    makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET
Rule 96    anyOperator -> OPERATOR
Rule 97    anyOperator -> BAR
Rule 98    anyOperator -> LESS_THAN
Rule 99    anyOperator -> GREATER_THAN
Rule 100   anyPrefixOperator -> OPERATOR
Rule 101   anyKeyword -> KEYWORD
Rule 102   anyKeyword -> MULTI_KEYWORD

Terminals, with rules where they appear

ASSIGNMENT           : 64
BAR                  : 21 97
BYTE_ARRAY_LEFT_BRACKET : 95
CHARACTER            : 72
COLON                : 36 87
COLON_COLON          : 38 62
COMMA                : 66 68
DICTIONARY_ARRAY_LEFT_CURLY_BRACKET : 94
DOT                  : 2 92 93
FLOAT                : 70
GREATER_THAN         : 26 27 99
IDENTIFIER           : 5 39 82
INTEGER              : 71
KEYWORD              : 28 45 86 101
LEFT_BRACKET         : 19
LEFT_CURLY_BRACKET   : 31
LEFT_PARENT          : 10 11 18 35 85
LESS_THAN            : 26 27 98
LITERAL_ARRAY_LEFT_PARENT : 78
MULTI_KEYWORD        : 102
OPERATOR             : 96 100
QUASI_QUOTE          : 14
QUASI_UNQUOTE        : 15 40
QUOTE                : 13
RIGHT_BRACKET        : 19 95
RIGHT_CURLY_BRACKET  : 31 94
RIGHT_PARENT         : 10 11 18 35 78 85
SEMICOLON            : 51 52
SPLICE               : 16
STRING               : 73
SYMBOL_IDENTIFIER    : 74
SYMBOL_KEYWORD       : 75
SYMBOL_OPERATOR      : 76
SYMBOL_STRING        : 77
error                : 

Nonterminals, with rules where they appear

anyKeyword           : 83
anyOperator          : 44 62 84
anyPrefixOperator    : 42
assignmentExpression : 64 65 66
binaryExpression     : 44 45 57 87
block                : 7 20
blockArgument        : 33
blockArguments       : 21 33
blockClosureHeader   : 22
blockResultType      : 21
chainExpression      : 60 61
chainedMessage       : 51 52
chainedMessageArgument : 46 47
chainedMessageArguments : 47 48
chainedMessageKeyword : 49 55 56 58 59
chainedMessages      : 52 54 56 59
commaExpression      : 69
commaExpressionContent : 66 67 68
dictionaryElement    : 91 92
dictionaryElements   : 92 93 94
dictionaryKey        : 88 89
expandableIdentifier : 17 26 36 50
expression           : 4 11 35 89
expressionList       : 2 18 19 31 95 0
literal              : 6 81
literalArrayElement  : 80
literalArrayElements : 78 80 85
lowPrecedenceExpression : 61 63 64
lowPrecedenceOperator : 61
makeByteArray        : 9
makeDictionary       : 8
optionalBlockArgumentType : 36
optionalBlockClosureHeader : 31
optionalExpression   : 1 2
optionalKeywordChain : 57
pragma               : 25
pragmaKeywordArgument : 29 30
pragmaKeywordArguments : 27 30
pragmaList           : 25 31
prefixUnaryExpression : 42 43 44
primaryExpression    : 17 18 19 20 28 38 41
primaryTerm          : 12 13 14 15 16 40

Parsing method: LALR

state 0

    (0) S' -> . expressionList
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    DOT             reduce using rule 3 (optionalExpression -> .)
    $end            reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    expressionList                 shift and go to state 1
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 1

    (0) S' -> expressionList .
    (2) expressionList -> expressionList . DOT optionalExpression

    DOT             shift and go to state 41


state 2

    (1) expressionList -> optionalExpression .

    DOT             reduce using rule 1 (expressionList -> optionalExpression .)
    $end            reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_BRACKET   reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_PARENT    reduce using rule 1 (expressionList -> optionalExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 1 (expressionList -> optionalExpression .)


state 3

    (4) optionalExpression -> expression .

    DOT             reduce using rule 4 (optionalExpression -> expression .)
    $end            reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_BRACKET   reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_PARENT    reduce using rule 4 (optionalExpression -> expression .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (optionalExpression -> expression .)


state 4

    (69) expression -> commaExpression .

    DOT             reduce using rule 69 (expression -> commaExpression .)
    $end            reduce using rule 69 (expression -> commaExpression .)
    RIGHT_PARENT    reduce using rule 69 (expression -> commaExpression .)
    RIGHT_BRACKET   reduce using rule 69 (expression -> commaExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 69 (expression -> commaExpression .)


state 5

    (67) commaExpression -> commaExpressionContent .
    (68) commaExpression -> commaExpressionContent . COMMA
    (66) commaExpressionContent -> commaExpressionContent . COMMA assignmentExpression

    DOT             reduce using rule 67 (commaExpression -> commaExpressionContent .)
    $end            reduce using rule 67 (commaExpression -> commaExpressionContent .)
    RIGHT_PARENT    reduce using rule 67 (commaExpression -> commaExpressionContent .)
    RIGHT_BRACKET   reduce using rule 67 (commaExpression -> commaExpressionContent .)
    RIGHT_CURLY_BRACKET reduce using rule 67 (commaExpression -> commaExpressionContent .)
    COMMA           shift and go to state 42


state 6

    (65) commaExpressionContent -> assignmentExpression .

    COMMA           reduce using rule 65 (commaExpressionContent -> assignmentExpression .)
    DOT             reduce using rule 65 (commaExpressionContent -> assignmentExpression .)
    $end            reduce using rule 65 (commaExpressionContent -> assignmentExpression .)
    RIGHT_PARENT    reduce using rule 65 (commaExpressionContent -> assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 65 (commaExpressionContent -> assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 65 (commaExpressionContent -> assignmentExpression .)


state 7

    (63) assignmentExpression -> lowPrecedenceExpression .
    (64) assignmentExpression -> lowPrecedenceExpression . ASSIGNMENT assignmentExpression
    (61) lowPrecedenceExpression -> lowPrecedenceExpression . lowPrecedenceOperator chainExpression
    (62) lowPrecedenceOperator -> . COLON_COLON anyOperator

    COMMA           reduce using rule 63 (assignmentExpression -> lowPrecedenceExpression .)
    DOT             reduce using rule 63 (assignmentExpression -> lowPrecedenceExpression .)
    $end            reduce using rule 63 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_PARENT    reduce using rule 63 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_BRACKET   reduce using rule 63 (assignmentExpression -> lowPrecedenceExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 63 (assignmentExpression -> lowPrecedenceExpression .)
    ASSIGNMENT      shift and go to state 43
    COLON_COLON     shift and go to state 45

    lowPrecedenceOperator          shift and go to state 44

state 8

    (60) lowPrecedenceExpression -> chainExpression .

    ASSIGNMENT      reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    COLON_COLON     reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    COMMA           reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    DOT             reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    $end            reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_PARENT    reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_BRACKET   reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 60 (lowPrecedenceExpression -> chainExpression .)


state 9

    (57) chainExpression -> binaryExpression . optionalKeywordChain
    (44) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (53) optionalKeywordChain -> .
    (54) optionalKeywordChain -> . chainedMessages
    (55) optionalKeywordChain -> . chainedMessageKeyword
    (56) optionalKeywordChain -> . chainedMessageKeyword chainedMessages
    (96) anyOperator -> . OPERATOR
    (97) anyOperator -> . BAR
    (98) anyOperator -> . LESS_THAN
    (99) anyOperator -> . GREATER_THAN
    (51) chainedMessages -> . SEMICOLON chainedMessage
    (52) chainedMessages -> . chainedMessages SEMICOLON chainedMessage
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (45) chainedMessageArgument -> . KEYWORD binaryExpression

    ASSIGNMENT      reduce using rule 53 (optionalKeywordChain -> .)
    COLON_COLON     reduce using rule 53 (optionalKeywordChain -> .)
    COMMA           reduce using rule 53 (optionalKeywordChain -> .)
    DOT             reduce using rule 53 (optionalKeywordChain -> .)
    $end            reduce using rule 53 (optionalKeywordChain -> .)
    RIGHT_PARENT    reduce using rule 53 (optionalKeywordChain -> .)
    RIGHT_BRACKET   reduce using rule 53 (optionalKeywordChain -> .)
    RIGHT_CURLY_BRACKET reduce using rule 53 (optionalKeywordChain -> .)
    OPERATOR        shift and go to state 50
    BAR             shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_THAN    shift and go to state 53
    SEMICOLON       shift and go to state 54
    KEYWORD         shift and go to state 24

    optionalKeywordChain           shift and go to state 46
    anyOperator                    shift and go to state 47
    chainedMessages                shift and go to state 48
    chainedMessageKeyword          shift and go to state 49
    chainedMessageArguments        shift and go to state 12
    chainedMessageArgument         shift and go to state 15

state 10

    (58) chainExpression -> chainedMessageKeyword .
    (59) chainExpression -> chainedMessageKeyword . chainedMessages
    (51) chainedMessages -> . SEMICOLON chainedMessage
    (52) chainedMessages -> . chainedMessages SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    COLON_COLON     reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    COMMA           reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    DOT             reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    $end            reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    RIGHT_PARENT    reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    RIGHT_BRACKET   reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    RIGHT_CURLY_BRACKET reduce using rule 58 (chainExpression -> chainedMessageKeyword .)
    SEMICOLON       shift and go to state 54

    chainedMessages                shift and go to state 55

state 11

    (43) binaryExpression -> prefixUnaryExpression .

    OPERATOR        reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    BAR             reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    LESS_THAN       reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    SEMICOLON       reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    KEYWORD         reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    COLON_COLON     reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    COMMA           reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    DOT             reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    $end            reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)
    COLON           reduce using rule 43 (binaryExpression -> prefixUnaryExpression .)


state 12

    (48) chainedMessageKeyword -> chainedMessageArguments .
    (47) chainedMessageArguments -> chainedMessageArguments . chainedMessageArgument
    (45) chainedMessageArgument -> . KEYWORD binaryExpression

    SEMICOLON       reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    ASSIGNMENT      reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    COLON_COLON     reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    COMMA           reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    DOT             reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    $end            reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    RIGHT_PARENT    reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    RIGHT_BRACKET   reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    RIGHT_CURLY_BRACKET reduce using rule 48 (chainedMessageKeyword -> chainedMessageArguments .)
    KEYWORD         shift and go to state 24

    chainedMessageArgument         shift and go to state 56

state 13

    (41) prefixUnaryExpression -> primaryExpression .
    (17) primaryExpression -> primaryExpression . expandableIdentifier
    (18) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> primaryExpression . block
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    OPERATOR        reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    BAR             reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    LESS_THAN       reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    GREATER_THAN    reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    SEMICOLON       reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    KEYWORD         reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    ASSIGNMENT      reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    COLON_COLON     reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    COMMA           reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    DOT             reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    $end            reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_PARENT    reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_BRACKET   reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    COLON           reduce using rule 41 (prefixUnaryExpression -> primaryExpression .)
    LEFT_PARENT     shift and go to state 58
    LEFT_BRACKET    shift and go to state 59
    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62
    LEFT_CURLY_BRACKET shift and go to state 38

    expandableIdentifier           shift and go to state 57
    block                          shift and go to state 60

state 14

    (42) prefixUnaryExpression -> anyPrefixOperator . prefixUnaryExpression
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    anyPrefixOperator              shift and go to state 14
    prefixUnaryExpression          shift and go to state 63
    primaryExpression              shift and go to state 13
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 15

    (46) chainedMessageArguments -> chainedMessageArgument .

    KEYWORD         reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    SEMICOLON       reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    ASSIGNMENT      reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    COLON_COLON     reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    COMMA           reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    DOT             reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    $end            reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_PARENT    reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_BRACKET   reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)
    RIGHT_CURLY_BRACKET reduce using rule 46 (chainedMessageArguments -> chainedMessageArgument .)


state 16

    (12) primaryExpression -> primaryTerm .

    LEFT_PARENT     reduce using rule 12 (primaryExpression -> primaryTerm .)
    LEFT_BRACKET    reduce using rule 12 (primaryExpression -> primaryTerm .)
    IDENTIFIER      reduce using rule 12 (primaryExpression -> primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 12 (primaryExpression -> primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 12 (primaryExpression -> primaryTerm .)
    OPERATOR        reduce using rule 12 (primaryExpression -> primaryTerm .)
    BAR             reduce using rule 12 (primaryExpression -> primaryTerm .)
    LESS_THAN       reduce using rule 12 (primaryExpression -> primaryTerm .)
    GREATER_THAN    reduce using rule 12 (primaryExpression -> primaryTerm .)
    SEMICOLON       reduce using rule 12 (primaryExpression -> primaryTerm .)
    KEYWORD         reduce using rule 12 (primaryExpression -> primaryTerm .)
    ASSIGNMENT      reduce using rule 12 (primaryExpression -> primaryTerm .)
    COLON_COLON     reduce using rule 12 (primaryExpression -> primaryTerm .)
    COMMA           reduce using rule 12 (primaryExpression -> primaryTerm .)
    DOT             reduce using rule 12 (primaryExpression -> primaryTerm .)
    $end            reduce using rule 12 (primaryExpression -> primaryTerm .)
    RIGHT_PARENT    reduce using rule 12 (primaryExpression -> primaryTerm .)
    RIGHT_BRACKET   reduce using rule 12 (primaryExpression -> primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (primaryExpression -> primaryTerm .)
    COLON           reduce using rule 12 (primaryExpression -> primaryTerm .)


state 17

    (13) primaryExpression -> QUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryTerm                    shift and go to state 64
    literal                        shift and go to state 26
    block                          shift and go to state 22
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 18

    (14) primaryExpression -> QUASI_QUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryTerm                    shift and go to state 65
    literal                        shift and go to state 26
    block                          shift and go to state 22
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 19

    (15) primaryExpression -> QUASI_UNQUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryTerm                    shift and go to state 66
    literal                        shift and go to state 26
    block                          shift and go to state 22
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 20

    (16) primaryExpression -> SPLICE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryTerm                    shift and go to state 67
    literal                        shift and go to state 26
    block                          shift and go to state 22
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 21

    (10) primaryTerm -> LEFT_PARENT . RIGHT_PARENT
    (11) primaryTerm -> LEFT_PARENT . expression RIGHT_PARENT
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_PARENT    shift and go to state 68
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    expression                     shift and go to state 69
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 22

    (7) primaryTerm -> block .

    LEFT_PARENT     reduce using rule 7 (primaryTerm -> block .)
    LEFT_BRACKET    reduce using rule 7 (primaryTerm -> block .)
    IDENTIFIER      reduce using rule 7 (primaryTerm -> block .)
    QUASI_UNQUOTE   reduce using rule 7 (primaryTerm -> block .)
    LEFT_CURLY_BRACKET reduce using rule 7 (primaryTerm -> block .)
    OPERATOR        reduce using rule 7 (primaryTerm -> block .)
    BAR             reduce using rule 7 (primaryTerm -> block .)
    LESS_THAN       reduce using rule 7 (primaryTerm -> block .)
    GREATER_THAN    reduce using rule 7 (primaryTerm -> block .)
    SEMICOLON       reduce using rule 7 (primaryTerm -> block .)
    KEYWORD         reduce using rule 7 (primaryTerm -> block .)
    ASSIGNMENT      reduce using rule 7 (primaryTerm -> block .)
    COLON_COLON     reduce using rule 7 (primaryTerm -> block .)
    COMMA           reduce using rule 7 (primaryTerm -> block .)
    DOT             reduce using rule 7 (primaryTerm -> block .)
    $end            reduce using rule 7 (primaryTerm -> block .)
    RIGHT_PARENT    reduce using rule 7 (primaryTerm -> block .)
    RIGHT_BRACKET   reduce using rule 7 (primaryTerm -> block .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (primaryTerm -> block .)
    COLON           reduce using rule 7 (primaryTerm -> block .)


state 23

    (100) anyPrefixOperator -> OPERATOR .

    QUOTE           reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    QUASI_QUOTE     reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    SPLICE          reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    OPERATOR        reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    IDENTIFIER      reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    LEFT_PARENT     reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    FLOAT           reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    INTEGER         reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    CHARACTER       reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    STRING          reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    SYMBOL_STRING   reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 100 (anyPrefixOperator -> OPERATOR .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 100 (anyPrefixOperator -> OPERATOR .)


state 24

    (45) chainedMessageArgument -> KEYWORD . binaryExpression
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    binaryExpression               shift and go to state 70
    prefixUnaryExpression          shift and go to state 11
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 25

    (5) primaryTerm -> IDENTIFIER .

    LEFT_PARENT     reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    QUASI_UNQUOTE   reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    OPERATOR        reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    BAR             reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    LESS_THAN       reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    SEMICOLON       reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    KEYWORD         reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COLON_COLON     reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COMMA           reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    DOT             reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    $end            reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (primaryTerm -> IDENTIFIER .)
    COLON           reduce using rule 5 (primaryTerm -> IDENTIFIER .)


state 26

    (6) primaryTerm -> literal .

    LEFT_PARENT     reduce using rule 6 (primaryTerm -> literal .)
    LEFT_BRACKET    reduce using rule 6 (primaryTerm -> literal .)
    IDENTIFIER      reduce using rule 6 (primaryTerm -> literal .)
    QUASI_UNQUOTE   reduce using rule 6 (primaryTerm -> literal .)
    LEFT_CURLY_BRACKET reduce using rule 6 (primaryTerm -> literal .)
    OPERATOR        reduce using rule 6 (primaryTerm -> literal .)
    BAR             reduce using rule 6 (primaryTerm -> literal .)
    LESS_THAN       reduce using rule 6 (primaryTerm -> literal .)
    GREATER_THAN    reduce using rule 6 (primaryTerm -> literal .)
    SEMICOLON       reduce using rule 6 (primaryTerm -> literal .)
    KEYWORD         reduce using rule 6 (primaryTerm -> literal .)
    ASSIGNMENT      reduce using rule 6 (primaryTerm -> literal .)
    COLON_COLON     reduce using rule 6 (primaryTerm -> literal .)
    COMMA           reduce using rule 6 (primaryTerm -> literal .)
    DOT             reduce using rule 6 (primaryTerm -> literal .)
    $end            reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_PARENT    reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_BRACKET   reduce using rule 6 (primaryTerm -> literal .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (primaryTerm -> literal .)
    COLON           reduce using rule 6 (primaryTerm -> literal .)


state 27

    (8) primaryTerm -> makeDictionary .

    LEFT_PARENT     reduce using rule 8 (primaryTerm -> makeDictionary .)
    LEFT_BRACKET    reduce using rule 8 (primaryTerm -> makeDictionary .)
    IDENTIFIER      reduce using rule 8 (primaryTerm -> makeDictionary .)
    QUASI_UNQUOTE   reduce using rule 8 (primaryTerm -> makeDictionary .)
    LEFT_CURLY_BRACKET reduce using rule 8 (primaryTerm -> makeDictionary .)
    OPERATOR        reduce using rule 8 (primaryTerm -> makeDictionary .)
    BAR             reduce using rule 8 (primaryTerm -> makeDictionary .)
    LESS_THAN       reduce using rule 8 (primaryTerm -> makeDictionary .)
    GREATER_THAN    reduce using rule 8 (primaryTerm -> makeDictionary .)
    SEMICOLON       reduce using rule 8 (primaryTerm -> makeDictionary .)
    KEYWORD         reduce using rule 8 (primaryTerm -> makeDictionary .)
    ASSIGNMENT      reduce using rule 8 (primaryTerm -> makeDictionary .)
    COLON_COLON     reduce using rule 8 (primaryTerm -> makeDictionary .)
    COMMA           reduce using rule 8 (primaryTerm -> makeDictionary .)
    DOT             reduce using rule 8 (primaryTerm -> makeDictionary .)
    $end            reduce using rule 8 (primaryTerm -> makeDictionary .)
    RIGHT_PARENT    reduce using rule 8 (primaryTerm -> makeDictionary .)
    RIGHT_BRACKET   reduce using rule 8 (primaryTerm -> makeDictionary .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (primaryTerm -> makeDictionary .)
    COLON           reduce using rule 8 (primaryTerm -> makeDictionary .)


state 28

    (9) primaryTerm -> makeByteArray .

    LEFT_PARENT     reduce using rule 9 (primaryTerm -> makeByteArray .)
    LEFT_BRACKET    reduce using rule 9 (primaryTerm -> makeByteArray .)
    IDENTIFIER      reduce using rule 9 (primaryTerm -> makeByteArray .)
    QUASI_UNQUOTE   reduce using rule 9 (primaryTerm -> makeByteArray .)
    LEFT_CURLY_BRACKET reduce using rule 9 (primaryTerm -> makeByteArray .)
    OPERATOR        reduce using rule 9 (primaryTerm -> makeByteArray .)
    BAR             reduce using rule 9 (primaryTerm -> makeByteArray .)
    LESS_THAN       reduce using rule 9 (primaryTerm -> makeByteArray .)
    GREATER_THAN    reduce using rule 9 (primaryTerm -> makeByteArray .)
    SEMICOLON       reduce using rule 9 (primaryTerm -> makeByteArray .)
    KEYWORD         reduce using rule 9 (primaryTerm -> makeByteArray .)
    ASSIGNMENT      reduce using rule 9 (primaryTerm -> makeByteArray .)
    COLON_COLON     reduce using rule 9 (primaryTerm -> makeByteArray .)
    COMMA           reduce using rule 9 (primaryTerm -> makeByteArray .)
    DOT             reduce using rule 9 (primaryTerm -> makeByteArray .)
    $end            reduce using rule 9 (primaryTerm -> makeByteArray .)
    RIGHT_PARENT    reduce using rule 9 (primaryTerm -> makeByteArray .)
    RIGHT_BRACKET   reduce using rule 9 (primaryTerm -> makeByteArray .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (primaryTerm -> makeByteArray .)
    COLON           reduce using rule 9 (primaryTerm -> makeByteArray .)


state 29

    (70) literal -> FLOAT .

    LEFT_PARENT     reduce using rule 70 (literal -> FLOAT .)
    LEFT_BRACKET    reduce using rule 70 (literal -> FLOAT .)
    IDENTIFIER      reduce using rule 70 (literal -> FLOAT .)
    QUASI_UNQUOTE   reduce using rule 70 (literal -> FLOAT .)
    LEFT_CURLY_BRACKET reduce using rule 70 (literal -> FLOAT .)
    OPERATOR        reduce using rule 70 (literal -> FLOAT .)
    BAR             reduce using rule 70 (literal -> FLOAT .)
    LESS_THAN       reduce using rule 70 (literal -> FLOAT .)
    GREATER_THAN    reduce using rule 70 (literal -> FLOAT .)
    SEMICOLON       reduce using rule 70 (literal -> FLOAT .)
    KEYWORD         reduce using rule 70 (literal -> FLOAT .)
    ASSIGNMENT      reduce using rule 70 (literal -> FLOAT .)
    COLON_COLON     reduce using rule 70 (literal -> FLOAT .)
    COMMA           reduce using rule 70 (literal -> FLOAT .)
    DOT             reduce using rule 70 (literal -> FLOAT .)
    $end            reduce using rule 70 (literal -> FLOAT .)
    RIGHT_PARENT    reduce using rule 70 (literal -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 70 (literal -> FLOAT .)
    RIGHT_CURLY_BRACKET reduce using rule 70 (literal -> FLOAT .)
    COLON           reduce using rule 70 (literal -> FLOAT .)
    FLOAT           reduce using rule 70 (literal -> FLOAT .)
    INTEGER         reduce using rule 70 (literal -> FLOAT .)
    CHARACTER       reduce using rule 70 (literal -> FLOAT .)
    STRING          reduce using rule 70 (literal -> FLOAT .)
    SYMBOL_IDENTIFIER reduce using rule 70 (literal -> FLOAT .)
    SYMBOL_KEYWORD  reduce using rule 70 (literal -> FLOAT .)
    SYMBOL_OPERATOR reduce using rule 70 (literal -> FLOAT .)
    SYMBOL_STRING   reduce using rule 70 (literal -> FLOAT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 70 (literal -> FLOAT .)
    MULTI_KEYWORD   reduce using rule 70 (literal -> FLOAT .)


state 30

    (71) literal -> INTEGER .

    LEFT_PARENT     reduce using rule 71 (literal -> INTEGER .)
    LEFT_BRACKET    reduce using rule 71 (literal -> INTEGER .)
    IDENTIFIER      reduce using rule 71 (literal -> INTEGER .)
    QUASI_UNQUOTE   reduce using rule 71 (literal -> INTEGER .)
    LEFT_CURLY_BRACKET reduce using rule 71 (literal -> INTEGER .)
    OPERATOR        reduce using rule 71 (literal -> INTEGER .)
    BAR             reduce using rule 71 (literal -> INTEGER .)
    LESS_THAN       reduce using rule 71 (literal -> INTEGER .)
    GREATER_THAN    reduce using rule 71 (literal -> INTEGER .)
    SEMICOLON       reduce using rule 71 (literal -> INTEGER .)
    KEYWORD         reduce using rule 71 (literal -> INTEGER .)
    ASSIGNMENT      reduce using rule 71 (literal -> INTEGER .)
    COLON_COLON     reduce using rule 71 (literal -> INTEGER .)
    COMMA           reduce using rule 71 (literal -> INTEGER .)
    DOT             reduce using rule 71 (literal -> INTEGER .)
    $end            reduce using rule 71 (literal -> INTEGER .)
    RIGHT_PARENT    reduce using rule 71 (literal -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 71 (literal -> INTEGER .)
    RIGHT_CURLY_BRACKET reduce using rule 71 (literal -> INTEGER .)
    COLON           reduce using rule 71 (literal -> INTEGER .)
    FLOAT           reduce using rule 71 (literal -> INTEGER .)
    INTEGER         reduce using rule 71 (literal -> INTEGER .)
    CHARACTER       reduce using rule 71 (literal -> INTEGER .)
    STRING          reduce using rule 71 (literal -> INTEGER .)
    SYMBOL_IDENTIFIER reduce using rule 71 (literal -> INTEGER .)
    SYMBOL_KEYWORD  reduce using rule 71 (literal -> INTEGER .)
    SYMBOL_OPERATOR reduce using rule 71 (literal -> INTEGER .)
    SYMBOL_STRING   reduce using rule 71 (literal -> INTEGER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 71 (literal -> INTEGER .)
    MULTI_KEYWORD   reduce using rule 71 (literal -> INTEGER .)


state 31

    (72) literal -> CHARACTER .

    LEFT_PARENT     reduce using rule 72 (literal -> CHARACTER .)
    LEFT_BRACKET    reduce using rule 72 (literal -> CHARACTER .)
    IDENTIFIER      reduce using rule 72 (literal -> CHARACTER .)
    QUASI_UNQUOTE   reduce using rule 72 (literal -> CHARACTER .)
    LEFT_CURLY_BRACKET reduce using rule 72 (literal -> CHARACTER .)
    OPERATOR        reduce using rule 72 (literal -> CHARACTER .)
    BAR             reduce using rule 72 (literal -> CHARACTER .)
    LESS_THAN       reduce using rule 72 (literal -> CHARACTER .)
    GREATER_THAN    reduce using rule 72 (literal -> CHARACTER .)
    SEMICOLON       reduce using rule 72 (literal -> CHARACTER .)
    KEYWORD         reduce using rule 72 (literal -> CHARACTER .)
    ASSIGNMENT      reduce using rule 72 (literal -> CHARACTER .)
    COLON_COLON     reduce using rule 72 (literal -> CHARACTER .)
    COMMA           reduce using rule 72 (literal -> CHARACTER .)
    DOT             reduce using rule 72 (literal -> CHARACTER .)
    $end            reduce using rule 72 (literal -> CHARACTER .)
    RIGHT_PARENT    reduce using rule 72 (literal -> CHARACTER .)
    RIGHT_BRACKET   reduce using rule 72 (literal -> CHARACTER .)
    RIGHT_CURLY_BRACKET reduce using rule 72 (literal -> CHARACTER .)
    COLON           reduce using rule 72 (literal -> CHARACTER .)
    FLOAT           reduce using rule 72 (literal -> CHARACTER .)
    INTEGER         reduce using rule 72 (literal -> CHARACTER .)
    CHARACTER       reduce using rule 72 (literal -> CHARACTER .)
    STRING          reduce using rule 72 (literal -> CHARACTER .)
    SYMBOL_IDENTIFIER reduce using rule 72 (literal -> CHARACTER .)
    SYMBOL_KEYWORD  reduce using rule 72 (literal -> CHARACTER .)
    SYMBOL_OPERATOR reduce using rule 72 (literal -> CHARACTER .)
    SYMBOL_STRING   reduce using rule 72 (literal -> CHARACTER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 72 (literal -> CHARACTER .)
    MULTI_KEYWORD   reduce using rule 72 (literal -> CHARACTER .)


state 32

    (73) literal -> STRING .

    LEFT_PARENT     reduce using rule 73 (literal -> STRING .)
    LEFT_BRACKET    reduce using rule 73 (literal -> STRING .)
    IDENTIFIER      reduce using rule 73 (literal -> STRING .)
    QUASI_UNQUOTE   reduce using rule 73 (literal -> STRING .)
    LEFT_CURLY_BRACKET reduce using rule 73 (literal -> STRING .)
    OPERATOR        reduce using rule 73 (literal -> STRING .)
    BAR             reduce using rule 73 (literal -> STRING .)
    LESS_THAN       reduce using rule 73 (literal -> STRING .)
    GREATER_THAN    reduce using rule 73 (literal -> STRING .)
    SEMICOLON       reduce using rule 73 (literal -> STRING .)
    KEYWORD         reduce using rule 73 (literal -> STRING .)
    ASSIGNMENT      reduce using rule 73 (literal -> STRING .)
    COLON_COLON     reduce using rule 73 (literal -> STRING .)
    COMMA           reduce using rule 73 (literal -> STRING .)
    DOT             reduce using rule 73 (literal -> STRING .)
    $end            reduce using rule 73 (literal -> STRING .)
    RIGHT_PARENT    reduce using rule 73 (literal -> STRING .)
    RIGHT_BRACKET   reduce using rule 73 (literal -> STRING .)
    RIGHT_CURLY_BRACKET reduce using rule 73 (literal -> STRING .)
    COLON           reduce using rule 73 (literal -> STRING .)
    FLOAT           reduce using rule 73 (literal -> STRING .)
    INTEGER         reduce using rule 73 (literal -> STRING .)
    CHARACTER       reduce using rule 73 (literal -> STRING .)
    STRING          reduce using rule 73 (literal -> STRING .)
    SYMBOL_IDENTIFIER reduce using rule 73 (literal -> STRING .)
    SYMBOL_KEYWORD  reduce using rule 73 (literal -> STRING .)
    SYMBOL_OPERATOR reduce using rule 73 (literal -> STRING .)
    SYMBOL_STRING   reduce using rule 73 (literal -> STRING .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 73 (literal -> STRING .)
    MULTI_KEYWORD   reduce using rule 73 (literal -> STRING .)


state 33

    (74) literal -> SYMBOL_IDENTIFIER .

    LEFT_PARENT     reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    IDENTIFIER      reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    QUASI_UNQUOTE   reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    OPERATOR        reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    BAR             reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    LESS_THAN       reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    GREATER_THAN    reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    SEMICOLON       reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    KEYWORD         reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    ASSIGNMENT      reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    COLON_COLON     reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    COMMA           reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    DOT             reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    $end            reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    COLON           reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    FLOAT           reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    INTEGER         reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    CHARACTER       reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    STRING          reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_IDENTIFIER reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_KEYWORD  reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_OPERATOR reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    SYMBOL_STRING   reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)
    MULTI_KEYWORD   reduce using rule 74 (literal -> SYMBOL_IDENTIFIER .)


state 34

    (75) literal -> SYMBOL_KEYWORD .

    LEFT_PARENT     reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    LEFT_BRACKET    reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    IDENTIFIER      reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    QUASI_UNQUOTE   reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    LEFT_CURLY_BRACKET reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    OPERATOR        reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    BAR             reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    LESS_THAN       reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    GREATER_THAN    reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    SEMICOLON       reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    KEYWORD         reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    ASSIGNMENT      reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    COLON_COLON     reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    COMMA           reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    DOT             reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    $end            reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    RIGHT_PARENT    reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    RIGHT_BRACKET   reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    RIGHT_CURLY_BRACKET reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    COLON           reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    FLOAT           reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    INTEGER         reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    CHARACTER       reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    STRING          reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    SYMBOL_STRING   reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 75 (literal -> SYMBOL_KEYWORD .)
    MULTI_KEYWORD   reduce using rule 75 (literal -> SYMBOL_KEYWORD .)


state 35

    (76) literal -> SYMBOL_OPERATOR .

    LEFT_PARENT     reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    LEFT_BRACKET    reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    IDENTIFIER      reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    OPERATOR        reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    BAR             reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    LESS_THAN       reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    GREATER_THAN    reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    SEMICOLON       reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    KEYWORD         reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    ASSIGNMENT      reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    COLON_COLON     reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    COMMA           reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    DOT             reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    $end            reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    RIGHT_PARENT    reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    RIGHT_BRACKET   reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    RIGHT_CURLY_BRACKET reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    COLON           reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    FLOAT           reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    INTEGER         reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    CHARACTER       reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    STRING          reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    SYMBOL_STRING   reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 76 (literal -> SYMBOL_OPERATOR .)
    MULTI_KEYWORD   reduce using rule 76 (literal -> SYMBOL_OPERATOR .)


state 36

    (77) literal -> SYMBOL_STRING .

    LEFT_PARENT     reduce using rule 77 (literal -> SYMBOL_STRING .)
    LEFT_BRACKET    reduce using rule 77 (literal -> SYMBOL_STRING .)
    IDENTIFIER      reduce using rule 77 (literal -> SYMBOL_STRING .)
    QUASI_UNQUOTE   reduce using rule 77 (literal -> SYMBOL_STRING .)
    LEFT_CURLY_BRACKET reduce using rule 77 (literal -> SYMBOL_STRING .)
    OPERATOR        reduce using rule 77 (literal -> SYMBOL_STRING .)
    BAR             reduce using rule 77 (literal -> SYMBOL_STRING .)
    LESS_THAN       reduce using rule 77 (literal -> SYMBOL_STRING .)
    GREATER_THAN    reduce using rule 77 (literal -> SYMBOL_STRING .)
    SEMICOLON       reduce using rule 77 (literal -> SYMBOL_STRING .)
    KEYWORD         reduce using rule 77 (literal -> SYMBOL_STRING .)
    ASSIGNMENT      reduce using rule 77 (literal -> SYMBOL_STRING .)
    COLON_COLON     reduce using rule 77 (literal -> SYMBOL_STRING .)
    COMMA           reduce using rule 77 (literal -> SYMBOL_STRING .)
    DOT             reduce using rule 77 (literal -> SYMBOL_STRING .)
    $end            reduce using rule 77 (literal -> SYMBOL_STRING .)
    RIGHT_PARENT    reduce using rule 77 (literal -> SYMBOL_STRING .)
    RIGHT_BRACKET   reduce using rule 77 (literal -> SYMBOL_STRING .)
    RIGHT_CURLY_BRACKET reduce using rule 77 (literal -> SYMBOL_STRING .)
    COLON           reduce using rule 77 (literal -> SYMBOL_STRING .)
    FLOAT           reduce using rule 77 (literal -> SYMBOL_STRING .)
    INTEGER         reduce using rule 77 (literal -> SYMBOL_STRING .)
    CHARACTER       reduce using rule 77 (literal -> SYMBOL_STRING .)
    STRING          reduce using rule 77 (literal -> SYMBOL_STRING .)
    SYMBOL_IDENTIFIER reduce using rule 77 (literal -> SYMBOL_STRING .)
    SYMBOL_KEYWORD  reduce using rule 77 (literal -> SYMBOL_STRING .)
    SYMBOL_OPERATOR reduce using rule 77 (literal -> SYMBOL_STRING .)
    SYMBOL_STRING   reduce using rule 77 (literal -> SYMBOL_STRING .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 77 (literal -> SYMBOL_STRING .)
    MULTI_KEYWORD   reduce using rule 77 (literal -> SYMBOL_STRING .)


state 37

    (78) literal -> LITERAL_ARRAY_LEFT_PARENT . literalArrayElements RIGHT_PARENT
    (79) literalArrayElements -> .
    (80) literalArrayElements -> . literalArrayElements literalArrayElement

    RIGHT_PARENT    reduce using rule 79 (literalArrayElements -> .)
    IDENTIFIER      reduce using rule 79 (literalArrayElements -> .)
    LEFT_PARENT     reduce using rule 79 (literalArrayElements -> .)
    FLOAT           reduce using rule 79 (literalArrayElements -> .)
    INTEGER         reduce using rule 79 (literalArrayElements -> .)
    CHARACTER       reduce using rule 79 (literalArrayElements -> .)
    STRING          reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_IDENTIFIER reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_KEYWORD  reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_OPERATOR reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_STRING   reduce using rule 79 (literalArrayElements -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 79 (literalArrayElements -> .)
    KEYWORD         reduce using rule 79 (literalArrayElements -> .)
    MULTI_KEYWORD   reduce using rule 79 (literalArrayElements -> .)
    OPERATOR        reduce using rule 79 (literalArrayElements -> .)
    BAR             reduce using rule 79 (literalArrayElements -> .)
    LESS_THAN       reduce using rule 79 (literalArrayElements -> .)
    GREATER_THAN    reduce using rule 79 (literalArrayElements -> .)

    literalArrayElements           shift and go to state 71

state 38

    (31) block -> LEFT_CURLY_BRACKET . optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (22) optionalBlockClosureHeader -> . blockClosureHeader
    (23) optionalBlockClosureHeader -> .
    (21) blockClosureHeader -> . blockArguments blockResultType BAR
    (32) blockArguments -> .
    (33) blockArguments -> . blockArguments blockArgument

    LESS_THAN       reduce using rule 23 (optionalBlockClosureHeader -> .)
    QUOTE           reduce using rule 23 (optionalBlockClosureHeader -> .)
    QUASI_QUOTE     reduce using rule 23 (optionalBlockClosureHeader -> .)
    QUASI_UNQUOTE   reduce using rule 23 (optionalBlockClosureHeader -> .)
    SPLICE          reduce using rule 23 (optionalBlockClosureHeader -> .)
    OPERATOR        reduce using rule 23 (optionalBlockClosureHeader -> .)
    KEYWORD         reduce using rule 23 (optionalBlockClosureHeader -> .)
    IDENTIFIER      reduce using rule 23 (optionalBlockClosureHeader -> .)
    LEFT_PARENT     reduce using rule 23 (optionalBlockClosureHeader -> .)
    FLOAT           reduce using rule 23 (optionalBlockClosureHeader -> .)
    INTEGER         reduce using rule 23 (optionalBlockClosureHeader -> .)
    CHARACTER       reduce using rule 23 (optionalBlockClosureHeader -> .)
    STRING          reduce using rule 23 (optionalBlockClosureHeader -> .)
    SYMBOL_IDENTIFIER reduce using rule 23 (optionalBlockClosureHeader -> .)
    SYMBOL_KEYWORD  reduce using rule 23 (optionalBlockClosureHeader -> .)
    SYMBOL_OPERATOR reduce using rule 23 (optionalBlockClosureHeader -> .)
    SYMBOL_STRING   reduce using rule 23 (optionalBlockClosureHeader -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 23 (optionalBlockClosureHeader -> .)
    LEFT_CURLY_BRACKET reduce using rule 23 (optionalBlockClosureHeader -> .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 23 (optionalBlockClosureHeader -> .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 23 (optionalBlockClosureHeader -> .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (optionalBlockClosureHeader -> .)
    DOT             reduce using rule 23 (optionalBlockClosureHeader -> .)
    COLON_COLON     reduce using rule 32 (blockArguments -> .)
    COLON           reduce using rule 32 (blockArguments -> .)
    BAR             reduce using rule 32 (blockArguments -> .)

    optionalBlockClosureHeader     shift and go to state 72
    blockClosureHeader             shift and go to state 73
    blockArguments                 shift and go to state 74

state 39

    (94) makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET . dictionaryElements RIGHT_CURLY_BRACKET
    (90) dictionaryElements -> .
    (91) dictionaryElements -> . dictionaryElement
    (92) dictionaryElements -> . dictionaryElements DOT dictionaryElement
    (93) dictionaryElements -> . dictionaryElements DOT
    (88) dictionaryElement -> . dictionaryKey
    (89) dictionaryElement -> . dictionaryKey expression
    (86) dictionaryKey -> . KEYWORD
    (87) dictionaryKey -> . binaryExpression COLON
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_CURLY_BRACKET reduce using rule 90 (dictionaryElements -> .)
    DOT             reduce using rule 90 (dictionaryElements -> .)
    KEYWORD         shift and go to state 78
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    dictionaryElements             shift and go to state 75
    dictionaryElement              shift and go to state 76
    dictionaryKey                  shift and go to state 77
    binaryExpression               shift and go to state 79
    prefixUnaryExpression          shift and go to state 11
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 40

    (95) makeByteArray -> BYTE_ARRAY_LEFT_BRACKET . expressionList RIGHT_BRACKET
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    expressionList                 shift and go to state 80
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 41

    (2) expressionList -> expressionList DOT . optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    DOT             reduce using rule 3 (optionalExpression -> .)
    $end            reduce using rule 3 (optionalExpression -> .)
    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    RIGHT_PARENT    reduce using rule 3 (optionalExpression -> .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    optionalExpression             shift and go to state 81
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 42

    (68) commaExpression -> commaExpressionContent COMMA .
    (66) commaExpressionContent -> commaExpressionContent COMMA . assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    DOT             reduce using rule 68 (commaExpression -> commaExpressionContent COMMA .)
    $end            reduce using rule 68 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_PARENT    reduce using rule 68 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_BRACKET   reduce using rule 68 (commaExpression -> commaExpressionContent COMMA .)
    RIGHT_CURLY_BRACKET reduce using rule 68 (commaExpression -> commaExpressionContent COMMA .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    assignmentExpression           shift and go to state 82
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 43

    (64) assignmentExpression -> lowPrecedenceExpression ASSIGNMENT . assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    lowPrecedenceExpression        shift and go to state 7
    assignmentExpression           shift and go to state 83
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 44

    (61) lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator . chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    chainExpression                shift and go to state 84
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 45

    (62) lowPrecedenceOperator -> COLON_COLON . anyOperator
    (96) anyOperator -> . OPERATOR
    (97) anyOperator -> . BAR
    (98) anyOperator -> . LESS_THAN
    (99) anyOperator -> . GREATER_THAN

    OPERATOR        shift and go to state 50
    BAR             shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_THAN    shift and go to state 53

    anyOperator                    shift and go to state 85

state 46

    (57) chainExpression -> binaryExpression optionalKeywordChain .

    ASSIGNMENT      reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    COLON_COLON     reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    COMMA           reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    DOT             reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    $end            reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    RIGHT_PARENT    reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    RIGHT_BRACKET   reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)
    RIGHT_CURLY_BRACKET reduce using rule 57 (chainExpression -> binaryExpression optionalKeywordChain .)


state 47

    (44) binaryExpression -> binaryExpression anyOperator . prefixUnaryExpression
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    prefixUnaryExpression          shift and go to state 86
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 48

    (54) optionalKeywordChain -> chainedMessages .
    (52) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    COLON_COLON     reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    COMMA           reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    DOT             reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    $end            reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    RIGHT_PARENT    reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    RIGHT_BRACKET   reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 54 (optionalKeywordChain -> chainedMessages .)
    SEMICOLON       shift and go to state 87


state 49

    (55) optionalKeywordChain -> chainedMessageKeyword .
    (56) optionalKeywordChain -> chainedMessageKeyword . chainedMessages
    (51) chainedMessages -> . SEMICOLON chainedMessage
    (52) chainedMessages -> . chainedMessages SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    COLON_COLON     reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    COMMA           reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    DOT             reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    $end            reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    RIGHT_PARENT    reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    RIGHT_BRACKET   reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    RIGHT_CURLY_BRACKET reduce using rule 55 (optionalKeywordChain -> chainedMessageKeyword .)
    SEMICOLON       shift and go to state 54

    chainedMessages                shift and go to state 88

state 50

    (96) anyOperator -> OPERATOR .

    QUOTE           reduce using rule 96 (anyOperator -> OPERATOR .)
    QUASI_QUOTE     reduce using rule 96 (anyOperator -> OPERATOR .)
    QUASI_UNQUOTE   reduce using rule 96 (anyOperator -> OPERATOR .)
    SPLICE          reduce using rule 96 (anyOperator -> OPERATOR .)
    OPERATOR        reduce using rule 96 (anyOperator -> OPERATOR .)
    IDENTIFIER      reduce using rule 96 (anyOperator -> OPERATOR .)
    LEFT_PARENT     reduce using rule 96 (anyOperator -> OPERATOR .)
    FLOAT           reduce using rule 96 (anyOperator -> OPERATOR .)
    INTEGER         reduce using rule 96 (anyOperator -> OPERATOR .)
    CHARACTER       reduce using rule 96 (anyOperator -> OPERATOR .)
    STRING          reduce using rule 96 (anyOperator -> OPERATOR .)
    SYMBOL_IDENTIFIER reduce using rule 96 (anyOperator -> OPERATOR .)
    SYMBOL_KEYWORD  reduce using rule 96 (anyOperator -> OPERATOR .)
    SYMBOL_OPERATOR reduce using rule 96 (anyOperator -> OPERATOR .)
    SYMBOL_STRING   reduce using rule 96 (anyOperator -> OPERATOR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 96 (anyOperator -> OPERATOR .)
    LEFT_CURLY_BRACKET reduce using rule 96 (anyOperator -> OPERATOR .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 96 (anyOperator -> OPERATOR .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 96 (anyOperator -> OPERATOR .)
    KEYWORD         reduce using rule 96 (anyOperator -> OPERATOR .)
    RIGHT_PARENT    reduce using rule 96 (anyOperator -> OPERATOR .)
    MULTI_KEYWORD   reduce using rule 96 (anyOperator -> OPERATOR .)
    BAR             reduce using rule 96 (anyOperator -> OPERATOR .)
    LESS_THAN       reduce using rule 96 (anyOperator -> OPERATOR .)
    GREATER_THAN    reduce using rule 96 (anyOperator -> OPERATOR .)


state 51

    (97) anyOperator -> BAR .

    QUOTE           reduce using rule 97 (anyOperator -> BAR .)
    QUASI_QUOTE     reduce using rule 97 (anyOperator -> BAR .)
    QUASI_UNQUOTE   reduce using rule 97 (anyOperator -> BAR .)
    SPLICE          reduce using rule 97 (anyOperator -> BAR .)
    OPERATOR        reduce using rule 97 (anyOperator -> BAR .)
    IDENTIFIER      reduce using rule 97 (anyOperator -> BAR .)
    LEFT_PARENT     reduce using rule 97 (anyOperator -> BAR .)
    FLOAT           reduce using rule 97 (anyOperator -> BAR .)
    INTEGER         reduce using rule 97 (anyOperator -> BAR .)
    CHARACTER       reduce using rule 97 (anyOperator -> BAR .)
    STRING          reduce using rule 97 (anyOperator -> BAR .)
    SYMBOL_IDENTIFIER reduce using rule 97 (anyOperator -> BAR .)
    SYMBOL_KEYWORD  reduce using rule 97 (anyOperator -> BAR .)
    SYMBOL_OPERATOR reduce using rule 97 (anyOperator -> BAR .)
    SYMBOL_STRING   reduce using rule 97 (anyOperator -> BAR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 97 (anyOperator -> BAR .)
    LEFT_CURLY_BRACKET reduce using rule 97 (anyOperator -> BAR .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 97 (anyOperator -> BAR .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 97 (anyOperator -> BAR .)
    KEYWORD         reduce using rule 97 (anyOperator -> BAR .)
    RIGHT_PARENT    reduce using rule 97 (anyOperator -> BAR .)
    MULTI_KEYWORD   reduce using rule 97 (anyOperator -> BAR .)
    BAR             reduce using rule 97 (anyOperator -> BAR .)
    LESS_THAN       reduce using rule 97 (anyOperator -> BAR .)
    GREATER_THAN    reduce using rule 97 (anyOperator -> BAR .)


state 52

    (98) anyOperator -> LESS_THAN .

    QUOTE           reduce using rule 98 (anyOperator -> LESS_THAN .)
    QUASI_QUOTE     reduce using rule 98 (anyOperator -> LESS_THAN .)
    QUASI_UNQUOTE   reduce using rule 98 (anyOperator -> LESS_THAN .)
    SPLICE          reduce using rule 98 (anyOperator -> LESS_THAN .)
    OPERATOR        reduce using rule 98 (anyOperator -> LESS_THAN .)
    IDENTIFIER      reduce using rule 98 (anyOperator -> LESS_THAN .)
    LEFT_PARENT     reduce using rule 98 (anyOperator -> LESS_THAN .)
    FLOAT           reduce using rule 98 (anyOperator -> LESS_THAN .)
    INTEGER         reduce using rule 98 (anyOperator -> LESS_THAN .)
    CHARACTER       reduce using rule 98 (anyOperator -> LESS_THAN .)
    STRING          reduce using rule 98 (anyOperator -> LESS_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 98 (anyOperator -> LESS_THAN .)
    SYMBOL_KEYWORD  reduce using rule 98 (anyOperator -> LESS_THAN .)
    SYMBOL_OPERATOR reduce using rule 98 (anyOperator -> LESS_THAN .)
    SYMBOL_STRING   reduce using rule 98 (anyOperator -> LESS_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 98 (anyOperator -> LESS_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 98 (anyOperator -> LESS_THAN .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 98 (anyOperator -> LESS_THAN .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 98 (anyOperator -> LESS_THAN .)
    KEYWORD         reduce using rule 98 (anyOperator -> LESS_THAN .)
    RIGHT_PARENT    reduce using rule 98 (anyOperator -> LESS_THAN .)
    MULTI_KEYWORD   reduce using rule 98 (anyOperator -> LESS_THAN .)
    BAR             reduce using rule 98 (anyOperator -> LESS_THAN .)
    LESS_THAN       reduce using rule 98 (anyOperator -> LESS_THAN .)
    GREATER_THAN    reduce using rule 98 (anyOperator -> LESS_THAN .)


state 53

    (99) anyOperator -> GREATER_THAN .

    QUOTE           reduce using rule 99 (anyOperator -> GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 99 (anyOperator -> GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 99 (anyOperator -> GREATER_THAN .)
    SPLICE          reduce using rule 99 (anyOperator -> GREATER_THAN .)
    OPERATOR        reduce using rule 99 (anyOperator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 99 (anyOperator -> GREATER_THAN .)
    LEFT_PARENT     reduce using rule 99 (anyOperator -> GREATER_THAN .)
    FLOAT           reduce using rule 99 (anyOperator -> GREATER_THAN .)
    INTEGER         reduce using rule 99 (anyOperator -> GREATER_THAN .)
    CHARACTER       reduce using rule 99 (anyOperator -> GREATER_THAN .)
    STRING          reduce using rule 99 (anyOperator -> GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 99 (anyOperator -> GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 99 (anyOperator -> GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 99 (anyOperator -> GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 99 (anyOperator -> GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 99 (anyOperator -> GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 99 (anyOperator -> GREATER_THAN .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 99 (anyOperator -> GREATER_THAN .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 99 (anyOperator -> GREATER_THAN .)
    KEYWORD         reduce using rule 99 (anyOperator -> GREATER_THAN .)
    RIGHT_PARENT    reduce using rule 99 (anyOperator -> GREATER_THAN .)
    MULTI_KEYWORD   reduce using rule 99 (anyOperator -> GREATER_THAN .)
    BAR             reduce using rule 99 (anyOperator -> GREATER_THAN .)
    LESS_THAN       reduce using rule 99 (anyOperator -> GREATER_THAN .)
    GREATER_THAN    reduce using rule 99 (anyOperator -> GREATER_THAN .)


state 54

    (51) chainedMessages -> SEMICOLON . chainedMessage
    (49) chainedMessage -> . chainedMessageKeyword
    (50) chainedMessage -> . expandableIdentifier
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (45) chainedMessageArgument -> . KEYWORD binaryExpression

    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62
    KEYWORD         shift and go to state 24

    chainedMessage                 shift and go to state 89
    chainedMessageKeyword          shift and go to state 90
    expandableIdentifier           shift and go to state 91
    chainedMessageArguments        shift and go to state 12
    chainedMessageArgument         shift and go to state 15

state 55

    (59) chainExpression -> chainedMessageKeyword chainedMessages .
    (52) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    COLON_COLON     reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    COMMA           reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    DOT             reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    $end            reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    RIGHT_PARENT    reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    RIGHT_BRACKET   reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 59 (chainExpression -> chainedMessageKeyword chainedMessages .)
    SEMICOLON       shift and go to state 87


state 56

    (47) chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .

    KEYWORD         reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    SEMICOLON       reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    ASSIGNMENT      reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    COLON_COLON     reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    COMMA           reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    DOT             reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    $end            reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_PARENT    reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_BRACKET   reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)
    RIGHT_CURLY_BRACKET reduce using rule 47 (chainedMessageArguments -> chainedMessageArguments chainedMessageArgument .)


state 57

    (17) primaryExpression -> primaryExpression expandableIdentifier .

    LEFT_PARENT     reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    LEFT_BRACKET    reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    IDENTIFIER      reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    QUASI_UNQUOTE   reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    LEFT_CURLY_BRACKET reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    OPERATOR        reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    BAR             reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    LESS_THAN       reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    GREATER_THAN    reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    SEMICOLON       reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    KEYWORD         reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    ASSIGNMENT      reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    COLON_COLON     reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    COMMA           reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    DOT             reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    $end            reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    RIGHT_PARENT    reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    RIGHT_BRACKET   reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)
    COLON           reduce using rule 17 (primaryExpression -> primaryExpression expandableIdentifier .)


state 58

    (18) primaryExpression -> primaryExpression LEFT_PARENT . expressionList RIGHT_PARENT
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_PARENT    reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryExpression              shift and go to state 13
    expressionList                 shift and go to state 92
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 59

    (19) primaryExpression -> primaryExpression LEFT_BRACKET . expressionList RIGHT_BRACKET
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_BRACKET   reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryExpression              shift and go to state 13
    expressionList                 shift and go to state 93
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 60

    (20) primaryExpression -> primaryExpression block .

    LEFT_PARENT     reduce using rule 20 (primaryExpression -> primaryExpression block .)
    LEFT_BRACKET    reduce using rule 20 (primaryExpression -> primaryExpression block .)
    IDENTIFIER      reduce using rule 20 (primaryExpression -> primaryExpression block .)
    QUASI_UNQUOTE   reduce using rule 20 (primaryExpression -> primaryExpression block .)
    LEFT_CURLY_BRACKET reduce using rule 20 (primaryExpression -> primaryExpression block .)
    OPERATOR        reduce using rule 20 (primaryExpression -> primaryExpression block .)
    BAR             reduce using rule 20 (primaryExpression -> primaryExpression block .)
    LESS_THAN       reduce using rule 20 (primaryExpression -> primaryExpression block .)
    GREATER_THAN    reduce using rule 20 (primaryExpression -> primaryExpression block .)
    SEMICOLON       reduce using rule 20 (primaryExpression -> primaryExpression block .)
    KEYWORD         reduce using rule 20 (primaryExpression -> primaryExpression block .)
    ASSIGNMENT      reduce using rule 20 (primaryExpression -> primaryExpression block .)
    COLON_COLON     reduce using rule 20 (primaryExpression -> primaryExpression block .)
    COMMA           reduce using rule 20 (primaryExpression -> primaryExpression block .)
    DOT             reduce using rule 20 (primaryExpression -> primaryExpression block .)
    $end            reduce using rule 20 (primaryExpression -> primaryExpression block .)
    RIGHT_PARENT    reduce using rule 20 (primaryExpression -> primaryExpression block .)
    RIGHT_BRACKET   reduce using rule 20 (primaryExpression -> primaryExpression block .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (primaryExpression -> primaryExpression block .)
    COLON           reduce using rule 20 (primaryExpression -> primaryExpression block .)


state 61

    (39) expandableIdentifier -> IDENTIFIER .

    LEFT_PARENT     reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    QUASI_UNQUOTE   reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    OPERATOR        reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    BAR             reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    LESS_THAN       reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    KEYWORD         reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    COLON_COLON     reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    COMMA           reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    DOT             reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    $end            reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    RIGHT_PARENT    reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    RIGHT_BRACKET   reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)
    COLON           reduce using rule 39 (expandableIdentifier -> IDENTIFIER .)


state 62

    (40) expandableIdentifier -> QUASI_UNQUOTE . primaryTerm
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryTerm                    shift and go to state 94
    literal                        shift and go to state 26
    block                          shift and go to state 22
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 63

    (42) prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .

    OPERATOR        reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    BAR             reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    LESS_THAN       reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    SEMICOLON       reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    KEYWORD         reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COLON_COLON     reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COMMA           reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    DOT             reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    $end            reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)
    COLON           reduce using rule 42 (prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression .)


state 64

    (13) primaryExpression -> QUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    OPERATOR        reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    BAR             reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    LESS_THAN       reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    SEMICOLON       reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    KEYWORD         reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    COLON_COLON     reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    COMMA           reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    DOT             reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    $end            reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)
    COLON           reduce using rule 13 (primaryExpression -> QUOTE primaryTerm .)


state 65

    (14) primaryExpression -> QUASI_QUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    OPERATOR        reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    BAR             reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    LESS_THAN       reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    SEMICOLON       reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    KEYWORD         reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COLON_COLON     reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COMMA           reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    DOT             reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    $end            reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)
    COLON           reduce using rule 14 (primaryExpression -> QUASI_QUOTE primaryTerm .)


state 66

    (15) primaryExpression -> QUASI_UNQUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    OPERATOR        reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    BAR             reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    LESS_THAN       reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    SEMICOLON       reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    KEYWORD         reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COLON_COLON     reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COMMA           reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    DOT             reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    $end            reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)
    COLON           reduce using rule 15 (primaryExpression -> QUASI_UNQUOTE primaryTerm .)


state 67

    (16) primaryExpression -> SPLICE primaryTerm .

    LEFT_PARENT     reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    LEFT_BRACKET    reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    IDENTIFIER      reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    OPERATOR        reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    BAR             reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    LESS_THAN       reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    GREATER_THAN    reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    SEMICOLON       reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    KEYWORD         reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    ASSIGNMENT      reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    COLON_COLON     reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    COMMA           reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    DOT             reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    $end            reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_PARENT    reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)
    COLON           reduce using rule 16 (primaryExpression -> SPLICE primaryTerm .)


state 68

    (10) primaryTerm -> LEFT_PARENT RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    OPERATOR        reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    BAR             reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    LESS_THAN       reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    SEMICOLON       reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    KEYWORD         reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COLON_COLON     reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COMMA           reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    DOT             reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    $end            reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)
    COLON           reduce using rule 10 (primaryTerm -> LEFT_PARENT RIGHT_PARENT .)


state 69

    (11) primaryTerm -> LEFT_PARENT expression . RIGHT_PARENT

    RIGHT_PARENT    shift and go to state 95


state 70

    (45) chainedMessageArgument -> KEYWORD binaryExpression .
    (44) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (96) anyOperator -> . OPERATOR
    (97) anyOperator -> . BAR
    (98) anyOperator -> . LESS_THAN
    (99) anyOperator -> . GREATER_THAN

    KEYWORD         reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    SEMICOLON       reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    ASSIGNMENT      reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    COLON_COLON     reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    COMMA           reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    DOT             reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    $end            reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_PARENT    reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_BRACKET   reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 45 (chainedMessageArgument -> KEYWORD binaryExpression .)
    OPERATOR        shift and go to state 50
    BAR             shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_THAN    shift and go to state 53

    anyOperator                    shift and go to state 47

state 71

    (78) literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements . RIGHT_PARENT
    (80) literalArrayElements -> literalArrayElements . literalArrayElement
    (81) literalArrayElement -> . literal
    (82) literalArrayElement -> . IDENTIFIER
    (83) literalArrayElement -> . anyKeyword
    (84) literalArrayElement -> . anyOperator
    (85) literalArrayElement -> . LEFT_PARENT literalArrayElements RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (101) anyKeyword -> . KEYWORD
    (102) anyKeyword -> . MULTI_KEYWORD
    (96) anyOperator -> . OPERATOR
    (97) anyOperator -> . BAR
    (98) anyOperator -> . LESS_THAN
    (99) anyOperator -> . GREATER_THAN

    RIGHT_PARENT    shift and go to state 96
    IDENTIFIER      shift and go to state 99
    LEFT_PARENT     shift and go to state 102
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    KEYWORD         shift and go to state 103
    MULTI_KEYWORD   shift and go to state 104
    OPERATOR        shift and go to state 50
    BAR             shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_THAN    shift and go to state 53

    literalArrayElement            shift and go to state 97
    literal                        shift and go to state 98
    anyKeyword                     shift and go to state 100
    anyOperator                    shift and go to state 101

state 72

    (31) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader . pragmaList expressionList RIGHT_CURLY_BRACKET
    (24) pragmaList -> .
    (25) pragmaList -> . pragmaList pragma

    LESS_THAN       reduce using rule 24 (pragmaList -> .)
    QUOTE           reduce using rule 24 (pragmaList -> .)
    QUASI_QUOTE     reduce using rule 24 (pragmaList -> .)
    QUASI_UNQUOTE   reduce using rule 24 (pragmaList -> .)
    SPLICE          reduce using rule 24 (pragmaList -> .)
    OPERATOR        reduce using rule 24 (pragmaList -> .)
    KEYWORD         reduce using rule 24 (pragmaList -> .)
    IDENTIFIER      reduce using rule 24 (pragmaList -> .)
    LEFT_PARENT     reduce using rule 24 (pragmaList -> .)
    FLOAT           reduce using rule 24 (pragmaList -> .)
    INTEGER         reduce using rule 24 (pragmaList -> .)
    CHARACTER       reduce using rule 24 (pragmaList -> .)
    STRING          reduce using rule 24 (pragmaList -> .)
    SYMBOL_IDENTIFIER reduce using rule 24 (pragmaList -> .)
    SYMBOL_KEYWORD  reduce using rule 24 (pragmaList -> .)
    SYMBOL_OPERATOR reduce using rule 24 (pragmaList -> .)
    SYMBOL_STRING   reduce using rule 24 (pragmaList -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 24 (pragmaList -> .)
    LEFT_CURLY_BRACKET reduce using rule 24 (pragmaList -> .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 24 (pragmaList -> .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 24 (pragmaList -> .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (pragmaList -> .)
    DOT             reduce using rule 24 (pragmaList -> .)

    pragmaList                     shift and go to state 105

state 73

    (22) optionalBlockClosureHeader -> blockClosureHeader .

    LESS_THAN       reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUOTE           reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUASI_QUOTE     reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    QUASI_UNQUOTE   reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    SPLICE          reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    OPERATOR        reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    KEYWORD         reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    IDENTIFIER      reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    LEFT_PARENT     reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    FLOAT           reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    INTEGER         reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    CHARACTER       reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    STRING          reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_IDENTIFIER reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_KEYWORD  reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_OPERATOR reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    SYMBOL_STRING   reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    LEFT_CURLY_BRACKET reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)
    DOT             reduce using rule 22 (optionalBlockClosureHeader -> blockClosureHeader .)


state 74

    (21) blockClosureHeader -> blockArguments . blockResultType BAR
    (33) blockArguments -> blockArguments . blockArgument
    (37) blockResultType -> .
    (38) blockResultType -> . COLON_COLON primaryExpression
    (36) blockArgument -> . COLON optionalBlockArgumentType expandableIdentifier

    BAR             reduce using rule 37 (blockResultType -> .)
    COLON_COLON     shift and go to state 108
    COLON           shift and go to state 109

    blockResultType                shift and go to state 106
    blockArgument                  shift and go to state 107

state 75

    (94) makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements . RIGHT_CURLY_BRACKET
    (92) dictionaryElements -> dictionaryElements . DOT dictionaryElement
    (93) dictionaryElements -> dictionaryElements . DOT

    RIGHT_CURLY_BRACKET shift and go to state 110
    DOT             shift and go to state 111


state 76

    (91) dictionaryElements -> dictionaryElement .

    RIGHT_CURLY_BRACKET reduce using rule 91 (dictionaryElements -> dictionaryElement .)
    DOT             reduce using rule 91 (dictionaryElements -> dictionaryElement .)


state 77

    (88) dictionaryElement -> dictionaryKey .
    (89) dictionaryElement -> dictionaryKey . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_CURLY_BRACKET reduce using rule 88 (dictionaryElement -> dictionaryKey .)
    DOT             reduce using rule 88 (dictionaryElement -> dictionaryKey .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    expression                     shift and go to state 112
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 78

    (86) dictionaryKey -> KEYWORD .

    QUOTE           reduce using rule 86 (dictionaryKey -> KEYWORD .)
    QUASI_QUOTE     reduce using rule 86 (dictionaryKey -> KEYWORD .)
    QUASI_UNQUOTE   reduce using rule 86 (dictionaryKey -> KEYWORD .)
    SPLICE          reduce using rule 86 (dictionaryKey -> KEYWORD .)
    OPERATOR        reduce using rule 86 (dictionaryKey -> KEYWORD .)
    KEYWORD         reduce using rule 86 (dictionaryKey -> KEYWORD .)
    IDENTIFIER      reduce using rule 86 (dictionaryKey -> KEYWORD .)
    LEFT_PARENT     reduce using rule 86 (dictionaryKey -> KEYWORD .)
    FLOAT           reduce using rule 86 (dictionaryKey -> KEYWORD .)
    INTEGER         reduce using rule 86 (dictionaryKey -> KEYWORD .)
    CHARACTER       reduce using rule 86 (dictionaryKey -> KEYWORD .)
    STRING          reduce using rule 86 (dictionaryKey -> KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 86 (dictionaryKey -> KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 86 (dictionaryKey -> KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 86 (dictionaryKey -> KEYWORD .)
    SYMBOL_STRING   reduce using rule 86 (dictionaryKey -> KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 86 (dictionaryKey -> KEYWORD .)
    LEFT_CURLY_BRACKET reduce using rule 86 (dictionaryKey -> KEYWORD .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 86 (dictionaryKey -> KEYWORD .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 86 (dictionaryKey -> KEYWORD .)
    RIGHT_CURLY_BRACKET reduce using rule 86 (dictionaryKey -> KEYWORD .)
    DOT             reduce using rule 86 (dictionaryKey -> KEYWORD .)


state 79

    (87) dictionaryKey -> binaryExpression . COLON
    (44) binaryExpression -> binaryExpression . anyOperator prefixUnaryExpression
    (96) anyOperator -> . OPERATOR
    (97) anyOperator -> . BAR
    (98) anyOperator -> . LESS_THAN
    (99) anyOperator -> . GREATER_THAN

    COLON           shift and go to state 113
    OPERATOR        shift and go to state 50
    BAR             shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_THAN    shift and go to state 53

    anyOperator                    shift and go to state 47

state 80

    (95) makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList . RIGHT_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_BRACKET   shift and go to state 114
    DOT             shift and go to state 41


state 81

    (2) expressionList -> expressionList DOT optionalExpression .

    DOT             reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    $end            reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_BRACKET   reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_PARENT    reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (expressionList -> expressionList DOT optionalExpression .)


state 82

    (66) commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .

    COMMA           reduce using rule 66 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    DOT             reduce using rule 66 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    $end            reduce using rule 66 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_PARENT    reduce using rule 66 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 66 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 66 (commaExpressionContent -> commaExpressionContent COMMA assignmentExpression .)


state 83

    (64) assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .

    COMMA           reduce using rule 64 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    DOT             reduce using rule 64 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    $end            reduce using rule 64 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_PARENT    reduce using rule 64 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_BRACKET   reduce using rule 64 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 64 (assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression .)


state 84

    (61) lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .

    ASSIGNMENT      reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    COLON_COLON     reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    COMMA           reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    DOT             reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    $end            reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_PARENT    reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_BRACKET   reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 61 (lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression .)


state 85

    (62) lowPrecedenceOperator -> COLON_COLON anyOperator .

    QUOTE           reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    QUASI_QUOTE     reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    QUASI_UNQUOTE   reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SPLICE          reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    OPERATOR        reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    KEYWORD         reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    IDENTIFIER      reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LEFT_PARENT     reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    FLOAT           reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    INTEGER         reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    CHARACTER       reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    STRING          reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_IDENTIFIER reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_KEYWORD  reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_OPERATOR reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    SYMBOL_STRING   reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    LEFT_CURLY_BRACKET reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 62 (lowPrecedenceOperator -> COLON_COLON anyOperator .)


state 86

    (44) binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .

    OPERATOR        reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    BAR             reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    LESS_THAN       reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    GREATER_THAN    reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    SEMICOLON       reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    KEYWORD         reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    ASSIGNMENT      reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COLON_COLON     reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COMMA           reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    DOT             reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    $end            reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_PARENT    reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_BRACKET   reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    RIGHT_CURLY_BRACKET reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)
    COLON           reduce using rule 44 (binaryExpression -> binaryExpression anyOperator prefixUnaryExpression .)


state 87

    (52) chainedMessages -> chainedMessages SEMICOLON . chainedMessage
    (49) chainedMessage -> . chainedMessageKeyword
    (50) chainedMessage -> . expandableIdentifier
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (45) chainedMessageArgument -> . KEYWORD binaryExpression

    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62
    KEYWORD         shift and go to state 24

    chainedMessage                 shift and go to state 115
    chainedMessageKeyword          shift and go to state 90
    expandableIdentifier           shift and go to state 91
    chainedMessageArguments        shift and go to state 12
    chainedMessageArgument         shift and go to state 15

state 88

    (56) optionalKeywordChain -> chainedMessageKeyword chainedMessages .
    (52) chainedMessages -> chainedMessages . SEMICOLON chainedMessage

    ASSIGNMENT      reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    COLON_COLON     reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    COMMA           reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    DOT             reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    $end            reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    RIGHT_PARENT    reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    RIGHT_BRACKET   reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    RIGHT_CURLY_BRACKET reduce using rule 56 (optionalKeywordChain -> chainedMessageKeyword chainedMessages .)
    SEMICOLON       shift and go to state 87


state 89

    (51) chainedMessages -> SEMICOLON chainedMessage .

    SEMICOLON       reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    ASSIGNMENT      reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    COLON_COLON     reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    COMMA           reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    DOT             reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    $end            reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    RIGHT_PARENT    reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    RIGHT_BRACKET   reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (chainedMessages -> SEMICOLON chainedMessage .)


state 90

    (49) chainedMessage -> chainedMessageKeyword .

    SEMICOLON       reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    ASSIGNMENT      reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    COLON_COLON     reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    COMMA           reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    DOT             reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    $end            reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    RIGHT_PARENT    reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    RIGHT_BRACKET   reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (chainedMessage -> chainedMessageKeyword .)


state 91

    (50) chainedMessage -> expandableIdentifier .

    SEMICOLON       reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    ASSIGNMENT      reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    COLON_COLON     reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    COMMA           reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    DOT             reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    $end            reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    RIGHT_PARENT    reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    RIGHT_BRACKET   reduce using rule 50 (chainedMessage -> expandableIdentifier .)
    RIGHT_CURLY_BRACKET reduce using rule 50 (chainedMessage -> expandableIdentifier .)


state 92

    (18) primaryExpression -> primaryExpression LEFT_PARENT expressionList . RIGHT_PARENT
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_PARENT    shift and go to state 116
    DOT             shift and go to state 41


state 93

    (19) primaryExpression -> primaryExpression LEFT_BRACKET expressionList . RIGHT_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_BRACKET   shift and go to state 117
    DOT             shift and go to state 41


state 94

    (40) expandableIdentifier -> QUASI_UNQUOTE primaryTerm .

    LEFT_PARENT     reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    LEFT_BRACKET    reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    IDENTIFIER      reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    QUASI_UNQUOTE   reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    LEFT_CURLY_BRACKET reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    OPERATOR        reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    BAR             reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    LESS_THAN       reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    GREATER_THAN    reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    SEMICOLON       reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    KEYWORD         reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    ASSIGNMENT      reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COLON_COLON     reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COMMA           reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    DOT             reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    $end            reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_PARENT    reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_BRACKET   reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)
    COLON           reduce using rule 40 (expandableIdentifier -> QUASI_UNQUOTE primaryTerm .)


state 95

    (11) primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    OPERATOR        reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    BAR             reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    LESS_THAN       reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    SEMICOLON       reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    KEYWORD         reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COLON_COLON     reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COMMA           reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    DOT             reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    $end            reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)
    COLON           reduce using rule 11 (primaryTerm -> LEFT_PARENT expression RIGHT_PARENT .)


state 96

    (78) literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    OPERATOR        reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    BAR             reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LESS_THAN       reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SEMICOLON       reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    KEYWORD         reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COLON_COLON     reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COMMA           reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    DOT             reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    $end            reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    COLON           reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    FLOAT           reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    INTEGER         reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    CHARACTER       reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    STRING          reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_IDENTIFIER reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_KEYWORD  reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_OPERATOR reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_STRING   reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    MULTI_KEYWORD   reduce using rule 78 (literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT .)


state 97

    (80) literalArrayElements -> literalArrayElements literalArrayElement .

    RIGHT_PARENT    reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    IDENTIFIER      reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LEFT_PARENT     reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    FLOAT           reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    INTEGER         reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    CHARACTER       reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    STRING          reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_IDENTIFIER reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_KEYWORD  reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_OPERATOR reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    SYMBOL_STRING   reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    KEYWORD         reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    MULTI_KEYWORD   reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    OPERATOR        reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    BAR             reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    LESS_THAN       reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)
    GREATER_THAN    reduce using rule 80 (literalArrayElements -> literalArrayElements literalArrayElement .)


state 98

    (81) literalArrayElement -> literal .

    RIGHT_PARENT    reduce using rule 81 (literalArrayElement -> literal .)
    IDENTIFIER      reduce using rule 81 (literalArrayElement -> literal .)
    LEFT_PARENT     reduce using rule 81 (literalArrayElement -> literal .)
    FLOAT           reduce using rule 81 (literalArrayElement -> literal .)
    INTEGER         reduce using rule 81 (literalArrayElement -> literal .)
    CHARACTER       reduce using rule 81 (literalArrayElement -> literal .)
    STRING          reduce using rule 81 (literalArrayElement -> literal .)
    SYMBOL_IDENTIFIER reduce using rule 81 (literalArrayElement -> literal .)
    SYMBOL_KEYWORD  reduce using rule 81 (literalArrayElement -> literal .)
    SYMBOL_OPERATOR reduce using rule 81 (literalArrayElement -> literal .)
    SYMBOL_STRING   reduce using rule 81 (literalArrayElement -> literal .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 81 (literalArrayElement -> literal .)
    KEYWORD         reduce using rule 81 (literalArrayElement -> literal .)
    MULTI_KEYWORD   reduce using rule 81 (literalArrayElement -> literal .)
    OPERATOR        reduce using rule 81 (literalArrayElement -> literal .)
    BAR             reduce using rule 81 (literalArrayElement -> literal .)
    LESS_THAN       reduce using rule 81 (literalArrayElement -> literal .)
    GREATER_THAN    reduce using rule 81 (literalArrayElement -> literal .)


state 99

    (82) literalArrayElement -> IDENTIFIER .

    RIGHT_PARENT    reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    LEFT_PARENT     reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    FLOAT           reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    INTEGER         reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    CHARACTER       reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    STRING          reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_IDENTIFIER reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_KEYWORD  reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_OPERATOR reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    SYMBOL_STRING   reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    KEYWORD         reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    MULTI_KEYWORD   reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    OPERATOR        reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    BAR             reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    LESS_THAN       reduce using rule 82 (literalArrayElement -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 82 (literalArrayElement -> IDENTIFIER .)


state 100

    (83) literalArrayElement -> anyKeyword .

    RIGHT_PARENT    reduce using rule 83 (literalArrayElement -> anyKeyword .)
    IDENTIFIER      reduce using rule 83 (literalArrayElement -> anyKeyword .)
    LEFT_PARENT     reduce using rule 83 (literalArrayElement -> anyKeyword .)
    FLOAT           reduce using rule 83 (literalArrayElement -> anyKeyword .)
    INTEGER         reduce using rule 83 (literalArrayElement -> anyKeyword .)
    CHARACTER       reduce using rule 83 (literalArrayElement -> anyKeyword .)
    STRING          reduce using rule 83 (literalArrayElement -> anyKeyword .)
    SYMBOL_IDENTIFIER reduce using rule 83 (literalArrayElement -> anyKeyword .)
    SYMBOL_KEYWORD  reduce using rule 83 (literalArrayElement -> anyKeyword .)
    SYMBOL_OPERATOR reduce using rule 83 (literalArrayElement -> anyKeyword .)
    SYMBOL_STRING   reduce using rule 83 (literalArrayElement -> anyKeyword .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 83 (literalArrayElement -> anyKeyword .)
    KEYWORD         reduce using rule 83 (literalArrayElement -> anyKeyword .)
    MULTI_KEYWORD   reduce using rule 83 (literalArrayElement -> anyKeyword .)
    OPERATOR        reduce using rule 83 (literalArrayElement -> anyKeyword .)
    BAR             reduce using rule 83 (literalArrayElement -> anyKeyword .)
    LESS_THAN       reduce using rule 83 (literalArrayElement -> anyKeyword .)
    GREATER_THAN    reduce using rule 83 (literalArrayElement -> anyKeyword .)


state 101

    (84) literalArrayElement -> anyOperator .

    RIGHT_PARENT    reduce using rule 84 (literalArrayElement -> anyOperator .)
    IDENTIFIER      reduce using rule 84 (literalArrayElement -> anyOperator .)
    LEFT_PARENT     reduce using rule 84 (literalArrayElement -> anyOperator .)
    FLOAT           reduce using rule 84 (literalArrayElement -> anyOperator .)
    INTEGER         reduce using rule 84 (literalArrayElement -> anyOperator .)
    CHARACTER       reduce using rule 84 (literalArrayElement -> anyOperator .)
    STRING          reduce using rule 84 (literalArrayElement -> anyOperator .)
    SYMBOL_IDENTIFIER reduce using rule 84 (literalArrayElement -> anyOperator .)
    SYMBOL_KEYWORD  reduce using rule 84 (literalArrayElement -> anyOperator .)
    SYMBOL_OPERATOR reduce using rule 84 (literalArrayElement -> anyOperator .)
    SYMBOL_STRING   reduce using rule 84 (literalArrayElement -> anyOperator .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 84 (literalArrayElement -> anyOperator .)
    KEYWORD         reduce using rule 84 (literalArrayElement -> anyOperator .)
    MULTI_KEYWORD   reduce using rule 84 (literalArrayElement -> anyOperator .)
    OPERATOR        reduce using rule 84 (literalArrayElement -> anyOperator .)
    BAR             reduce using rule 84 (literalArrayElement -> anyOperator .)
    LESS_THAN       reduce using rule 84 (literalArrayElement -> anyOperator .)
    GREATER_THAN    reduce using rule 84 (literalArrayElement -> anyOperator .)


state 102

    (85) literalArrayElement -> LEFT_PARENT . literalArrayElements RIGHT_PARENT
    (79) literalArrayElements -> .
    (80) literalArrayElements -> . literalArrayElements literalArrayElement

    RIGHT_PARENT    reduce using rule 79 (literalArrayElements -> .)
    IDENTIFIER      reduce using rule 79 (literalArrayElements -> .)
    LEFT_PARENT     reduce using rule 79 (literalArrayElements -> .)
    FLOAT           reduce using rule 79 (literalArrayElements -> .)
    INTEGER         reduce using rule 79 (literalArrayElements -> .)
    CHARACTER       reduce using rule 79 (literalArrayElements -> .)
    STRING          reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_IDENTIFIER reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_KEYWORD  reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_OPERATOR reduce using rule 79 (literalArrayElements -> .)
    SYMBOL_STRING   reduce using rule 79 (literalArrayElements -> .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 79 (literalArrayElements -> .)
    KEYWORD         reduce using rule 79 (literalArrayElements -> .)
    MULTI_KEYWORD   reduce using rule 79 (literalArrayElements -> .)
    OPERATOR        reduce using rule 79 (literalArrayElements -> .)
    BAR             reduce using rule 79 (literalArrayElements -> .)
    LESS_THAN       reduce using rule 79 (literalArrayElements -> .)
    GREATER_THAN    reduce using rule 79 (literalArrayElements -> .)

    literalArrayElements           shift and go to state 118

state 103

    (101) anyKeyword -> KEYWORD .

    RIGHT_PARENT    reduce using rule 101 (anyKeyword -> KEYWORD .)
    IDENTIFIER      reduce using rule 101 (anyKeyword -> KEYWORD .)
    LEFT_PARENT     reduce using rule 101 (anyKeyword -> KEYWORD .)
    FLOAT           reduce using rule 101 (anyKeyword -> KEYWORD .)
    INTEGER         reduce using rule 101 (anyKeyword -> KEYWORD .)
    CHARACTER       reduce using rule 101 (anyKeyword -> KEYWORD .)
    STRING          reduce using rule 101 (anyKeyword -> KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 101 (anyKeyword -> KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 101 (anyKeyword -> KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 101 (anyKeyword -> KEYWORD .)
    SYMBOL_STRING   reduce using rule 101 (anyKeyword -> KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 101 (anyKeyword -> KEYWORD .)
    KEYWORD         reduce using rule 101 (anyKeyword -> KEYWORD .)
    MULTI_KEYWORD   reduce using rule 101 (anyKeyword -> KEYWORD .)
    OPERATOR        reduce using rule 101 (anyKeyword -> KEYWORD .)
    BAR             reduce using rule 101 (anyKeyword -> KEYWORD .)
    LESS_THAN       reduce using rule 101 (anyKeyword -> KEYWORD .)
    GREATER_THAN    reduce using rule 101 (anyKeyword -> KEYWORD .)


state 104

    (102) anyKeyword -> MULTI_KEYWORD .

    RIGHT_PARENT    reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    IDENTIFIER      reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    LEFT_PARENT     reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    FLOAT           reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    INTEGER         reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    CHARACTER       reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    STRING          reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_IDENTIFIER reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_KEYWORD  reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_OPERATOR reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    SYMBOL_STRING   reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    KEYWORD         reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    MULTI_KEYWORD   reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    OPERATOR        reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    BAR             reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    LESS_THAN       reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)
    GREATER_THAN    reduce using rule 102 (anyKeyword -> MULTI_KEYWORD .)


state 105

    (31) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList . expressionList RIGHT_CURLY_BRACKET
    (25) pragmaList -> pragmaList . pragma
    (1) expressionList -> . optionalExpression
    (2) expressionList -> . expressionList DOT optionalExpression
    (26) pragma -> . LESS_THAN expandableIdentifier GREATER_THAN
    (27) pragma -> . LESS_THAN pragmaKeywordArguments GREATER_THAN
    (3) optionalExpression -> .
    (4) optionalExpression -> . expression
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    LESS_THAN       shift and go to state 121
    RIGHT_CURLY_BRACKET reduce using rule 3 (optionalExpression -> .)
    DOT             reduce using rule 3 (optionalExpression -> .)
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    expressionList                 shift and go to state 119
    pragma                         shift and go to state 120
    optionalExpression             shift and go to state 2
    expression                     shift and go to state 3
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 106

    (21) blockClosureHeader -> blockArguments blockResultType . BAR

    BAR             shift and go to state 122


state 107

    (33) blockArguments -> blockArguments blockArgument .

    COLON_COLON     reduce using rule 33 (blockArguments -> blockArguments blockArgument .)
    COLON           reduce using rule 33 (blockArguments -> blockArguments blockArgument .)
    BAR             reduce using rule 33 (blockArguments -> blockArguments blockArgument .)


state 108

    (38) blockResultType -> COLON_COLON . primaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryExpression              shift and go to state 123
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 109

    (36) blockArgument -> COLON . optionalBlockArgumentType expandableIdentifier
    (34) optionalBlockArgumentType -> .
    (35) optionalBlockArgumentType -> . LEFT_PARENT expression RIGHT_PARENT

    IDENTIFIER      reduce using rule 34 (optionalBlockArgumentType -> .)
    QUASI_UNQUOTE   reduce using rule 34 (optionalBlockArgumentType -> .)
    LEFT_PARENT     shift and go to state 125

    optionalBlockArgumentType      shift and go to state 124

state 110

    (94) makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .

    LEFT_PARENT     reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    QUASI_UNQUOTE   reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    OPERATOR        reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    BAR             reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    LESS_THAN       reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    GREATER_THAN    reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    KEYWORD         reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    ASSIGNMENT      reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    COLON_COLON     reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    DOT             reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    RIGHT_PARENT    reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 94 (makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET .)


state 111

    (92) dictionaryElements -> dictionaryElements DOT . dictionaryElement
    (93) dictionaryElements -> dictionaryElements DOT .
    (88) dictionaryElement -> . dictionaryKey
    (89) dictionaryElement -> . dictionaryKey expression
    (86) dictionaryKey -> . KEYWORD
    (87) dictionaryKey -> . binaryExpression COLON
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    RIGHT_CURLY_BRACKET reduce using rule 93 (dictionaryElements -> dictionaryElements DOT .)
    DOT             reduce using rule 93 (dictionaryElements -> dictionaryElements DOT .)
    KEYWORD         shift and go to state 78
    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    dictionaryElement              shift and go to state 126
    dictionaryKey                  shift and go to state 77
    binaryExpression               shift and go to state 79
    prefixUnaryExpression          shift and go to state 11
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 112

    (89) dictionaryElement -> dictionaryKey expression .

    RIGHT_CURLY_BRACKET reduce using rule 89 (dictionaryElement -> dictionaryKey expression .)
    DOT             reduce using rule 89 (dictionaryElement -> dictionaryKey expression .)


state 113

    (87) dictionaryKey -> binaryExpression COLON .

    QUOTE           reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    QUASI_QUOTE     reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    QUASI_UNQUOTE   reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    SPLICE          reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    OPERATOR        reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    KEYWORD         reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    IDENTIFIER      reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    LEFT_PARENT     reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    FLOAT           reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    INTEGER         reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    CHARACTER       reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    STRING          reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    SYMBOL_IDENTIFIER reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    SYMBOL_KEYWORD  reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    SYMBOL_OPERATOR reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    SYMBOL_STRING   reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    LEFT_CURLY_BRACKET reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    RIGHT_CURLY_BRACKET reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)
    DOT             reduce using rule 87 (dictionaryKey -> binaryExpression COLON .)


state 114

    (95) makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .

    LEFT_PARENT     reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    QUASI_UNQUOTE   reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    OPERATOR        reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    BAR             reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    KEYWORD         reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COLON_COLON     reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COMMA           reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    DOT             reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    $end            reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_PARENT    reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COLON           reduce using rule 95 (makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET .)


state 115

    (52) chainedMessages -> chainedMessages SEMICOLON chainedMessage .

    SEMICOLON       reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    ASSIGNMENT      reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    COLON_COLON     reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    COMMA           reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    DOT             reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    $end            reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_PARENT    reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_BRACKET   reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)
    RIGHT_CURLY_BRACKET reduce using rule 52 (chainedMessages -> chainedMessages SEMICOLON chainedMessage .)


state 116

    (18) primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .

    LEFT_PARENT     reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LEFT_BRACKET    reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LEFT_CURLY_BRACKET reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    OPERATOR        reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    BAR             reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    LESS_THAN       reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    SEMICOLON       reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    KEYWORD         reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    ASSIGNMENT      reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COLON_COLON     reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COMMA           reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    DOT             reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    $end            reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_PARENT    reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_BRACKET   reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    RIGHT_CURLY_BRACKET reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)
    COLON           reduce using rule 18 (primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT .)


state 117

    (19) primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .

    LEFT_PARENT     reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    IDENTIFIER      reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    QUASI_UNQUOTE   reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    OPERATOR        reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    BAR             reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    LESS_THAN       reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    GREATER_THAN    reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    KEYWORD         reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    ASSIGNMENT      reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COLON_COLON     reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COMMA           reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    DOT             reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    $end            reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_PARENT    reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_BRACKET   reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)
    COLON           reduce using rule 19 (primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET .)


state 118

    (85) literalArrayElement -> LEFT_PARENT literalArrayElements . RIGHT_PARENT
    (80) literalArrayElements -> literalArrayElements . literalArrayElement
    (81) literalArrayElement -> . literal
    (82) literalArrayElement -> . IDENTIFIER
    (83) literalArrayElement -> . anyKeyword
    (84) literalArrayElement -> . anyOperator
    (85) literalArrayElement -> . LEFT_PARENT literalArrayElements RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (101) anyKeyword -> . KEYWORD
    (102) anyKeyword -> . MULTI_KEYWORD
    (96) anyOperator -> . OPERATOR
    (97) anyOperator -> . BAR
    (98) anyOperator -> . LESS_THAN
    (99) anyOperator -> . GREATER_THAN

    RIGHT_PARENT    shift and go to state 127
    IDENTIFIER      shift and go to state 99
    LEFT_PARENT     shift and go to state 102
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    KEYWORD         shift and go to state 103
    MULTI_KEYWORD   shift and go to state 104
    OPERATOR        shift and go to state 50
    BAR             shift and go to state 51
    LESS_THAN       shift and go to state 52
    GREATER_THAN    shift and go to state 53

    literalArrayElement            shift and go to state 97
    literal                        shift and go to state 98
    anyKeyword                     shift and go to state 100
    anyOperator                    shift and go to state 101

state 119

    (31) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList . RIGHT_CURLY_BRACKET
    (2) expressionList -> expressionList . DOT optionalExpression

    RIGHT_CURLY_BRACKET shift and go to state 128
    DOT             shift and go to state 41


state 120

    (25) pragmaList -> pragmaList pragma .

    LESS_THAN       reduce using rule 25 (pragmaList -> pragmaList pragma .)
    QUOTE           reduce using rule 25 (pragmaList -> pragmaList pragma .)
    QUASI_QUOTE     reduce using rule 25 (pragmaList -> pragmaList pragma .)
    QUASI_UNQUOTE   reduce using rule 25 (pragmaList -> pragmaList pragma .)
    SPLICE          reduce using rule 25 (pragmaList -> pragmaList pragma .)
    OPERATOR        reduce using rule 25 (pragmaList -> pragmaList pragma .)
    KEYWORD         reduce using rule 25 (pragmaList -> pragmaList pragma .)
    IDENTIFIER      reduce using rule 25 (pragmaList -> pragmaList pragma .)
    LEFT_PARENT     reduce using rule 25 (pragmaList -> pragmaList pragma .)
    FLOAT           reduce using rule 25 (pragmaList -> pragmaList pragma .)
    INTEGER         reduce using rule 25 (pragmaList -> pragmaList pragma .)
    CHARACTER       reduce using rule 25 (pragmaList -> pragmaList pragma .)
    STRING          reduce using rule 25 (pragmaList -> pragmaList pragma .)
    SYMBOL_IDENTIFIER reduce using rule 25 (pragmaList -> pragmaList pragma .)
    SYMBOL_KEYWORD  reduce using rule 25 (pragmaList -> pragmaList pragma .)
    SYMBOL_OPERATOR reduce using rule 25 (pragmaList -> pragmaList pragma .)
    SYMBOL_STRING   reduce using rule 25 (pragmaList -> pragmaList pragma .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 25 (pragmaList -> pragmaList pragma .)
    LEFT_CURLY_BRACKET reduce using rule 25 (pragmaList -> pragmaList pragma .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 25 (pragmaList -> pragmaList pragma .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 25 (pragmaList -> pragmaList pragma .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (pragmaList -> pragmaList pragma .)
    DOT             reduce using rule 25 (pragmaList -> pragmaList pragma .)


state 121

    (26) pragma -> LESS_THAN . expandableIdentifier GREATER_THAN
    (27) pragma -> LESS_THAN . pragmaKeywordArguments GREATER_THAN
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (29) pragmaKeywordArguments -> . pragmaKeywordArgument
    (30) pragmaKeywordArguments -> . pragmaKeywordArguments pragmaKeywordArgument
    (28) pragmaKeywordArgument -> . KEYWORD primaryExpression

    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62
    KEYWORD         shift and go to state 132

    expandableIdentifier           shift and go to state 129
    pragmaKeywordArguments         shift and go to state 130
    pragmaKeywordArgument          shift and go to state 131

state 122

    (21) blockClosureHeader -> blockArguments blockResultType BAR .

    LESS_THAN       reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUOTE           reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUASI_QUOTE     reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    QUASI_UNQUOTE   reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SPLICE          reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    OPERATOR        reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    KEYWORD         reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    IDENTIFIER      reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LEFT_PARENT     reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    FLOAT           reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    INTEGER         reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    CHARACTER       reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    STRING          reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_IDENTIFIER reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_KEYWORD  reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_OPERATOR reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    SYMBOL_STRING   reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    LEFT_CURLY_BRACKET reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)
    DOT             reduce using rule 21 (blockClosureHeader -> blockArguments blockResultType BAR .)


state 123

    (38) blockResultType -> COLON_COLON primaryExpression .
    (17) primaryExpression -> primaryExpression . expandableIdentifier
    (18) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> primaryExpression . block
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    BAR             reduce using rule 38 (blockResultType -> COLON_COLON primaryExpression .)
    LEFT_PARENT     shift and go to state 58
    LEFT_BRACKET    shift and go to state 59
    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62
    LEFT_CURLY_BRACKET shift and go to state 38

    expandableIdentifier           shift and go to state 57
    block                          shift and go to state 60

state 124

    (36) blockArgument -> COLON optionalBlockArgumentType . expandableIdentifier
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm

    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62

    expandableIdentifier           shift and go to state 133

state 125

    (35) optionalBlockArgumentType -> LEFT_PARENT . expression RIGHT_PARENT
    (69) expression -> . commaExpression
    (67) commaExpression -> . commaExpressionContent
    (68) commaExpression -> . commaExpressionContent COMMA
    (65) commaExpressionContent -> . assignmentExpression
    (66) commaExpressionContent -> . commaExpressionContent COMMA assignmentExpression
    (63) assignmentExpression -> . lowPrecedenceExpression
    (64) assignmentExpression -> . lowPrecedenceExpression ASSIGNMENT assignmentExpression
    (60) lowPrecedenceExpression -> . chainExpression
    (61) lowPrecedenceExpression -> . lowPrecedenceExpression lowPrecedenceOperator chainExpression
    (57) chainExpression -> . binaryExpression optionalKeywordChain
    (58) chainExpression -> . chainedMessageKeyword
    (59) chainExpression -> . chainedMessageKeyword chainedMessages
    (43) binaryExpression -> . prefixUnaryExpression
    (44) binaryExpression -> . binaryExpression anyOperator prefixUnaryExpression
    (48) chainedMessageKeyword -> . chainedMessageArguments
    (41) prefixUnaryExpression -> . primaryExpression
    (42) prefixUnaryExpression -> . anyPrefixOperator prefixUnaryExpression
    (46) chainedMessageArguments -> . chainedMessageArgument
    (47) chainedMessageArguments -> . chainedMessageArguments chainedMessageArgument
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (100) anyPrefixOperator -> . OPERATOR
    (45) chainedMessageArgument -> . KEYWORD binaryExpression
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    OPERATOR        shift and go to state 23
    KEYWORD         shift and go to state 24
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    expression                     shift and go to state 134
    commaExpression                shift and go to state 4
    commaExpressionContent         shift and go to state 5
    assignmentExpression           shift and go to state 6
    lowPrecedenceExpression        shift and go to state 7
    chainExpression                shift and go to state 8
    binaryExpression               shift and go to state 9
    chainedMessageKeyword          shift and go to state 10
    prefixUnaryExpression          shift and go to state 11
    chainedMessageArguments        shift and go to state 12
    primaryExpression              shift and go to state 13
    anyPrefixOperator              shift and go to state 14
    chainedMessageArgument         shift and go to state 15
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 126

    (92) dictionaryElements -> dictionaryElements DOT dictionaryElement .

    RIGHT_CURLY_BRACKET reduce using rule 92 (dictionaryElements -> dictionaryElements DOT dictionaryElement .)
    DOT             reduce using rule 92 (dictionaryElements -> dictionaryElements DOT dictionaryElement .)


state 127

    (85) literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .

    RIGHT_PARENT    reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    IDENTIFIER      reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LEFT_PARENT     reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    FLOAT           reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    INTEGER         reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    CHARACTER       reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    STRING          reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_IDENTIFIER reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_KEYWORD  reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_OPERATOR reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    SYMBOL_STRING   reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    KEYWORD         reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    MULTI_KEYWORD   reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    OPERATOR        reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    BAR             reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    LESS_THAN       reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)
    GREATER_THAN    reduce using rule 85 (literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT .)


state 128

    (31) block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .

    LEFT_PARENT     reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LEFT_BRACKET    reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    QUASI_UNQUOTE   reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    OPERATOR        reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    BAR             reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    LESS_THAN       reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    GREATER_THAN    reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    KEYWORD         reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    ASSIGNMENT      reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COLON_COLON     reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    DOT             reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_PARENT    reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_BRACKET   reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 31 (block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET .)


state 129

    (26) pragma -> LESS_THAN expandableIdentifier . GREATER_THAN

    GREATER_THAN    shift and go to state 135


state 130

    (27) pragma -> LESS_THAN pragmaKeywordArguments . GREATER_THAN
    (30) pragmaKeywordArguments -> pragmaKeywordArguments . pragmaKeywordArgument
    (28) pragmaKeywordArgument -> . KEYWORD primaryExpression

    GREATER_THAN    shift and go to state 136
    KEYWORD         shift and go to state 132

    pragmaKeywordArgument          shift and go to state 137

state 131

    (29) pragmaKeywordArguments -> pragmaKeywordArgument .

    GREATER_THAN    reduce using rule 29 (pragmaKeywordArguments -> pragmaKeywordArgument .)
    KEYWORD         reduce using rule 29 (pragmaKeywordArguments -> pragmaKeywordArgument .)


state 132

    (28) pragmaKeywordArgument -> KEYWORD . primaryExpression
    (12) primaryExpression -> . primaryTerm
    (13) primaryExpression -> . QUOTE primaryTerm
    (14) primaryExpression -> . QUASI_QUOTE primaryTerm
    (15) primaryExpression -> . QUASI_UNQUOTE primaryTerm
    (16) primaryExpression -> . SPLICE primaryTerm
    (17) primaryExpression -> . primaryExpression expandableIdentifier
    (18) primaryExpression -> . primaryExpression LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> . primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> . primaryExpression block
    (5) primaryTerm -> . IDENTIFIER
    (6) primaryTerm -> . literal
    (7) primaryTerm -> . block
    (8) primaryTerm -> . makeDictionary
    (9) primaryTerm -> . makeByteArray
    (10) primaryTerm -> . LEFT_PARENT RIGHT_PARENT
    (11) primaryTerm -> . LEFT_PARENT expression RIGHT_PARENT
    (70) literal -> . FLOAT
    (71) literal -> . INTEGER
    (72) literal -> . CHARACTER
    (73) literal -> . STRING
    (74) literal -> . SYMBOL_IDENTIFIER
    (75) literal -> . SYMBOL_KEYWORD
    (76) literal -> . SYMBOL_OPERATOR
    (77) literal -> . SYMBOL_STRING
    (78) literal -> . LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET
    (94) makeDictionary -> . DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET
    (95) makeByteArray -> . BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET

    QUOTE           shift and go to state 17
    QUASI_QUOTE     shift and go to state 18
    QUASI_UNQUOTE   shift and go to state 19
    SPLICE          shift and go to state 20
    IDENTIFIER      shift and go to state 25
    LEFT_PARENT     shift and go to state 21
    FLOAT           shift and go to state 29
    INTEGER         shift and go to state 30
    CHARACTER       shift and go to state 31
    STRING          shift and go to state 32
    SYMBOL_IDENTIFIER shift and go to state 33
    SYMBOL_KEYWORD  shift and go to state 34
    SYMBOL_OPERATOR shift and go to state 35
    SYMBOL_STRING   shift and go to state 36
    LITERAL_ARRAY_LEFT_PARENT shift and go to state 37
    LEFT_CURLY_BRACKET shift and go to state 38
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET shift and go to state 39
    BYTE_ARRAY_LEFT_BRACKET shift and go to state 40

    primaryExpression              shift and go to state 138
    primaryTerm                    shift and go to state 16
    block                          shift and go to state 22
    literal                        shift and go to state 26
    makeDictionary                 shift and go to state 27
    makeByteArray                  shift and go to state 28

state 133

    (36) blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .

    COLON_COLON     reduce using rule 36 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)
    COLON           reduce using rule 36 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)
    BAR             reduce using rule 36 (blockArgument -> COLON optionalBlockArgumentType expandableIdentifier .)


state 134

    (35) optionalBlockArgumentType -> LEFT_PARENT expression . RIGHT_PARENT

    RIGHT_PARENT    shift and go to state 139


state 135

    (26) pragma -> LESS_THAN expandableIdentifier GREATER_THAN .

    LESS_THAN       reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUOTE           reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SPLICE          reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    OPERATOR        reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    KEYWORD         reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    IDENTIFIER      reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LEFT_PARENT     reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    FLOAT           reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    INTEGER         reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    CHARACTER       reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    STRING          reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    RIGHT_CURLY_BRACKET reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)
    DOT             reduce using rule 26 (pragma -> LESS_THAN expandableIdentifier GREATER_THAN .)


state 136

    (27) pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .

    LESS_THAN       reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUOTE           reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUASI_QUOTE     reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    QUASI_UNQUOTE   reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SPLICE          reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    OPERATOR        reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    KEYWORD         reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    IDENTIFIER      reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LEFT_PARENT     reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    FLOAT           reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    INTEGER         reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    CHARACTER       reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    STRING          reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_IDENTIFIER reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_KEYWORD  reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_OPERATOR reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    SYMBOL_STRING   reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LITERAL_ARRAY_LEFT_PARENT reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    LEFT_CURLY_BRACKET reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    DICTIONARY_ARRAY_LEFT_CURLY_BRACKET reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    BYTE_ARRAY_LEFT_BRACKET reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    RIGHT_CURLY_BRACKET reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)
    DOT             reduce using rule 27 (pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN .)


state 137

    (30) pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .

    GREATER_THAN    reduce using rule 30 (pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .)
    KEYWORD         reduce using rule 30 (pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument .)


state 138

    (28) pragmaKeywordArgument -> KEYWORD primaryExpression .
    (17) primaryExpression -> primaryExpression . expandableIdentifier
    (18) primaryExpression -> primaryExpression . LEFT_PARENT expressionList RIGHT_PARENT
    (19) primaryExpression -> primaryExpression . LEFT_BRACKET expressionList RIGHT_BRACKET
    (20) primaryExpression -> primaryExpression . block
    (39) expandableIdentifier -> . IDENTIFIER
    (40) expandableIdentifier -> . QUASI_UNQUOTE primaryTerm
    (31) block -> . LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET

    GREATER_THAN    reduce using rule 28 (pragmaKeywordArgument -> KEYWORD primaryExpression .)
    KEYWORD         reduce using rule 28 (pragmaKeywordArgument -> KEYWORD primaryExpression .)
    LEFT_PARENT     shift and go to state 58
    LEFT_BRACKET    shift and go to state 59
    IDENTIFIER      shift and go to state 61
    QUASI_UNQUOTE   shift and go to state 62
    LEFT_CURLY_BRACKET shift and go to state 38

    expandableIdentifier           shift and go to state 57
    block                          shift and go to state 60

state 139

    (35) optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .

    IDENTIFIER      reduce using rule 35 (optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .)
    QUASI_UNQUOTE   reduce using rule 35 (optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT .)

