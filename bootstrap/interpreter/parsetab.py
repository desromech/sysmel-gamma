
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BAR BYTE_ARRAY_LEFT_BRACKET CHARACTER COLON COLON_COLON COMMA DICTIONARY_ARRAY_LEFT_CURLY_BRACKET DOT FLOAT GREATER_THAN IDENTIFIER INTEGER KEYWORD LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PARENT LESS_THAN LITERAL_ARRAY_LEFT_PARENT MULTI_KEYWORD OPERATOR QUASI_QUOTE QUASI_UNQUOTE QUOTE RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PARENT SEMICOLON SPLICE STRING SYMBOL_IDENTIFIER SYMBOL_KEYWORD SYMBOL_OPERATOR SYMBOL_STRINGexpressionList : optionalExpressionexpressionList : expressionList DOT optionalExpressionoptionalExpression :optionalExpression : expressionprimaryTerm : IDENTIFIERprimaryTerm : literalprimaryTerm : blockprimaryTerm : LEFT_PARENT RIGHT_PARENTprimaryTerm : LEFT_PARENT expression RIGHT_PARENTprimaryExpression : primaryTermprimaryExpression : QUOTE primaryTermprimaryExpression : QUASI_QUOTE primaryTermprimaryExpression : QUASI_UNQUOTE primaryTermprimaryExpression : SPLICE primaryTermprimaryExpression : primaryExpression expandableIdentifierprimaryExpression : primaryExpression LEFT_PARENT expressionList RIGHT_PARENTprimaryExpression : primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKETprimaryExpression : primaryExpression blockblockClosureHeader : blockArguments blockResultType BARoptionalBlockClosureHeader : blockClosureHeaderoptionalBlockClosureHeader : pragmaList : pragmaList : pragmaList pragmapragma : LESS_THAN expandableIdentifier GREATER_THANpragma : LESS_THAN pragmaKeywordArguments GREATER_THANpragmaKeywordArgument : KEYWORD primaryExpressionpragmaKeywordArguments : pragmaKeywordArgumentpragmaKeywordArguments : pragmaKeywordArguments pragmaKeywordArgumentblock : LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKETblockArguments : blockArguments : blockArguments blockArgumentoptionalBlockArgumentType : optionalBlockArgumentType : LEFT_PARENT expression RIGHT_PARENTblockArgument : COLON optionalBlockArgumentType expandableIdentifierblockResultType : blockResultType : COLON_COLON primaryExpression expandableIdentifier : IDENTIFIERexpandableIdentifier : QUASI_UNQUOTE primaryTermprefixUnaryExpression : primaryExpressionprefixUnaryExpression : anyPrefixOperator prefixUnaryExpressionbinaryExpression : prefixUnaryExpressionbinaryExpression : binaryExpression anyOperator prefixUnaryExpressionchainedMessageArgument : KEYWORD binaryExpressionchainedMessageArguments : chainedMessageArgumentchainedMessageArguments : chainedMessageArguments chainedMessageArgumentchainedMessageKeyword : chainedMessageArgumentschainedMessage : chainedMessageKeywordchainedMessage : expandableIdentifierchainedMessages : SEMICOLON chainedMessagechainedMessages : chainedMessages SEMICOLON chainedMessageoptionalKeywordChain :optionalKeywordChain : chainedMessagesoptionalKeywordChain : chainedMessageKeywordoptionalKeywordChain : chainedMessageKeyword chainedMessageschainExpression : binaryExpression optionalKeywordChainchainExpression : chainedMessageKeywordchainExpression : chainedMessageKeyword chainedMessageslowPrecedenceExpression : chainExpressionlowPrecedenceExpression : lowPrecedenceExpression lowPrecedenceOperator chainExpressionlowPrecedenceOperator : COLON_COLON anyOperatorassignmentExpression : lowPrecedenceExpressionassignmentExpression : lowPrecedenceExpression ASSIGNMENT assignmentExpressioncommaExpressionContent : assignmentExpressioncommaExpressionContent : commaExpressionContent COMMA assignmentExpressioncommaExpression : commaExpressionContentcommaExpression : commaExpressionContent COMMAexpression : commaExpressionliteral : FLOATliteral : INTEGERliteral : CHARACTERliteral : STRINGliteral : SYMBOL_IDENTIFIERliteral : SYMBOL_KEYWORDliteral : SYMBOL_OPERATORliteral : SYMBOL_STRINGliteral : LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENTliteralArrayElements :literalArrayElements : literalArrayElements literalArrayElementliteralArrayElement : literalliteralArrayElement : IDENTIFIERliteralArrayElement : anyKeywordliteralArrayElement : anyOperatorliteralArrayElement : LEFT_PARENT literalArrayElements RIGHT_PARENTanyOperator : OPERATOR\n                   | BAR\n                   | LESS_THAN\n                   | GREATER_THANanyPrefixOperator : OPERATORanyKeyword : KEYWORD\n                   | MULTI_KEYWORD'
    
_lr_action_items = {'DOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,51,52,53,54,55,56,57,59,60,61,62,63,64,66,68,69,71,72,73,74,76,78,79,80,81,82,83,84,85,86,95,100,101,102,104,105,107,112,119,120,],[-3,37,-1,-4,-67,-65,-63,-61,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-21,-3,-66,-55,-52,-53,-57,-45,-15,-3,-3,-18,-37,-40,-11,-12,-13,-14,-8,-43,-22,-20,-2,-64,-62,-59,-42,-54,-49,-47,-48,37,37,-38,-9,-76,-3,-50,-16,-17,37,-23,-19,-29,-24,-25,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,37,38,42,44,45,51,52,53,56,57,59,60,61,62,63,64,66,71,72,73,74,76,78,79,80,81,84,85,86,100,101,102,112,],[-3,0,-1,-4,-67,-65,-63,-61,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-3,-66,-55,-52,-53,-57,-45,-15,-18,-37,-40,-11,-12,-13,-14,-8,-43,-2,-64,-62,-59,-42,-54,-49,-47,-48,-38,-9,-76,-50,-16,-17,-29,]),'QUOTE':([0,14,21,23,24,36,37,38,39,40,43,46,47,48,49,54,55,68,69,75,95,98,105,107,110,116,119,120,],[17,17,17,-88,17,-21,17,17,17,17,17,-84,-85,-86,-87,17,17,-22,-20,-60,17,17,-23,-19,17,17,-24,-25,]),'QUASI_QUOTE':([0,14,21,23,24,36,37,38,39,40,43,46,47,48,49,54,55,68,69,75,95,98,105,107,110,116,119,120,],[18,18,18,-88,18,-21,18,18,18,18,18,-84,-85,-86,-87,18,18,-22,-20,-60,18,18,-23,-19,18,18,-24,-25,]),'QUASI_UNQUOTE':([0,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,43,46,47,48,49,50,53,54,55,56,57,60,61,62,63,64,68,69,75,77,84,85,86,95,98,99,101,102,105,106,107,108,109,110,112,116,119,120,122,123,],[19,58,19,-10,19,-7,-88,19,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-21,19,19,19,19,19,-84,-85,-86,-87,58,-15,19,19,-18,-37,-11,-12,-13,-14,-8,-22,-20,-60,58,-38,-9,-76,19,19,-32,-16,-17,-23,58,-19,58,58,19,-29,19,-24,-25,58,-33,]),'SPLICE':([0,14,21,23,24,36,37,38,39,40,43,46,47,48,49,54,55,68,69,75,95,98,105,107,110,116,119,120,],[20,20,20,-88,20,-21,20,20,20,20,20,-84,-85,-86,-87,20,20,-22,-20,-60,20,20,-23,-19,20,20,-24,-25,]),'OPERATOR':([0,9,11,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,46,47,48,49,53,54,55,56,57,59,60,61,62,63,64,66,67,68,69,75,76,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,105,107,110,111,112,119,120,],[23,46,-41,-39,23,-10,23,-7,-88,23,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,23,23,23,23,46,23,-84,-85,-86,-87,-15,23,23,-18,-37,-40,-11,-12,-13,-14,-8,46,46,-22,-20,-60,-42,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,23,-16,-17,46,-23,-19,23,-83,-29,-24,-25,]),'KEYWORD':([0,9,11,12,13,15,16,21,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,46,47,48,49,50,52,53,54,55,56,57,59,60,61,62,63,64,66,67,68,69,75,76,77,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,105,106,107,110,111,112,114,115,119,120,121,122,],[24,24,-41,24,-39,-44,-10,24,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,24,24,24,24,-84,-85,-86,-87,24,-45,-15,24,24,-18,-37,-40,-11,-12,-13,-14,-8,-43,93,-22,-20,-60,-42,24,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,24,-16,-17,93,-23,116,-19,24,-83,-29,116,-27,-24,-25,-28,-26,]),'IDENTIFIER':([0,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,50,53,54,55,56,57,58,60,61,62,63,64,67,68,69,75,77,84,85,86,87,88,89,90,91,92,93,94,95,98,99,101,102,103,105,106,107,108,109,110,111,112,116,119,120,122,123,],[25,57,25,-10,25,25,25,25,25,-7,-88,25,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,25,25,25,25,25,-84,-85,-86,-87,57,-15,25,25,-18,-37,25,-11,-12,-13,-14,-8,89,-22,-20,-60,57,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,25,25,-32,-16,-17,89,-23,57,-19,57,57,25,-83,-29,25,-24,-25,57,-33,]),'LEFT_PARENT':([0,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,53,54,55,56,57,58,60,61,62,63,64,67,68,69,75,84,85,86,87,88,89,90,91,92,93,94,95,98,99,101,102,103,105,107,108,110,111,112,116,119,120,122,],[21,54,21,-10,21,21,21,21,21,-7,-88,21,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,21,21,21,21,21,-84,-85,-86,-87,-15,21,21,-18,-37,21,-11,-12,-13,-14,-8,92,-22,-20,-60,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,21,21,110,-16,-17,92,-23,-19,54,21,-83,-29,21,-24,-25,54,]),'FLOAT':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[27,27,27,27,27,27,27,-88,27,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,27,27,27,27,27,-84,-85,-86,-87,27,27,27,27,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,27,27,27,-23,-19,27,-83,27,-24,-25,]),'INTEGER':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[28,28,28,28,28,28,28,-88,28,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,28,28,28,28,28,-84,-85,-86,-87,28,28,28,28,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,28,28,28,-23,-19,28,-83,28,-24,-25,]),'CHARACTER':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[29,29,29,29,29,29,29,-88,29,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,29,29,29,29,29,-84,-85,-86,-87,29,29,29,29,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,29,29,29,-23,-19,29,-83,29,-24,-25,]),'STRING':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[30,30,30,30,30,30,30,-88,30,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,30,30,30,30,30,-84,-85,-86,-87,30,30,30,30,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,30,30,30,-23,-19,30,-83,30,-24,-25,]),'SYMBOL_IDENTIFIER':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[31,31,31,31,31,31,31,-88,31,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,31,31,31,31,31,-84,-85,-86,-87,31,31,31,31,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,31,31,31,-23,-19,31,-83,31,-24,-25,]),'SYMBOL_KEYWORD':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[32,32,32,32,32,32,32,-88,32,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,32,32,32,32,32,-84,-85,-86,-87,32,32,32,32,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,32,32,32,-23,-19,32,-83,32,-24,-25,]),'SYMBOL_OPERATOR':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[33,33,33,33,33,33,33,-88,33,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,33,33,33,33,33,-84,-85,-86,-87,33,33,33,33,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,33,33,33,-23,-19,33,-83,33,-24,-25,]),'SYMBOL_STRING':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[34,34,34,34,34,34,34,-88,34,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,34,34,34,34,34,-84,-85,-86,-87,34,34,34,34,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,34,34,34,-23,-19,34,-83,34,-24,-25,]),'LITERAL_ARRAY_LEFT_PARENT':([0,14,17,18,19,20,21,23,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,49,54,55,58,67,68,69,75,86,87,88,89,90,91,92,93,94,95,98,103,105,107,110,111,116,119,120,],[35,35,35,35,35,35,35,-88,35,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,35,35,35,35,35,-84,-85,-86,-87,35,35,35,35,-22,-20,-60,-76,-78,-79,-80,-81,-82,-77,-89,-90,35,35,35,-23,-19,35,-83,35,-24,-25,]),'LEFT_CURLY_BRACKET':([0,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,43,46,47,48,49,53,54,55,56,57,58,60,61,62,63,64,68,69,75,84,85,86,95,98,101,102,105,107,108,110,112,116,119,120,122,],[36,36,36,-10,36,36,36,36,36,-7,-88,36,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-21,36,36,36,36,36,-84,-85,-86,-87,-15,36,36,-18,-37,36,-11,-12,-13,-14,-8,-22,-20,-60,-38,-9,-76,36,36,-16,-17,-23,-19,36,36,-29,36,-24,-25,36,]),'RIGHT_PARENT':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,21,22,25,26,27,28,29,30,31,32,33,34,35,37,38,42,44,45,46,47,48,49,51,52,53,54,56,57,59,60,61,62,63,64,65,66,67,71,72,73,74,76,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,100,101,102,103,111,112,118,],[-1,-4,-67,-65,-63,-61,-58,-51,-56,-41,-46,-39,-44,-10,64,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-3,-66,-55,-52,-53,-84,-85,-86,-87,-57,-45,-15,-3,-18,-37,-40,-11,-12,-13,-14,-8,85,-43,86,-2,-64,-62,-59,-42,-54,-49,-47,-48,101,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,-50,-16,-17,111,-83,-29,123,]),'RIGHT_BRACKET':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,37,38,42,44,45,51,52,53,55,56,57,59,60,61,62,63,64,66,71,72,73,74,76,78,79,80,81,83,84,85,86,100,101,102,112,],[-1,-4,-67,-65,-63,-61,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-3,-66,-55,-52,-53,-57,-45,-15,-3,-18,-37,-40,-11,-12,-13,-14,-8,-43,-2,-64,-62,-59,-42,-54,-49,-47,-48,102,-38,-9,-76,-50,-16,-17,-29,]),'RIGHT_CURLY_BRACKET':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,51,52,53,56,57,59,60,61,62,63,64,66,68,69,71,72,73,74,76,78,79,80,81,84,85,86,95,100,101,102,104,105,107,112,119,120,],[-1,-4,-67,-65,-63,-61,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-21,-3,-66,-55,-52,-53,-57,-45,-15,-18,-37,-40,-11,-12,-13,-14,-8,-43,-22,-20,-2,-64,-62,-59,-42,-54,-49,-47,-48,-38,-9,-76,-3,-50,-16,-17,112,-23,-19,-29,-24,-25,]),'COMMA':([5,6,7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,42,44,45,51,52,53,56,57,59,60,61,62,63,64,66,72,73,74,76,78,79,80,81,84,85,86,100,101,102,112,],[38,-63,-61,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-55,-52,-53,-57,-45,-15,-18,-37,-40,-11,-12,-13,-14,-8,-43,-64,-62,-59,-42,-54,-49,-47,-48,-38,-9,-76,-50,-16,-17,-29,]),'ASSIGNMENT':([7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,42,44,45,51,52,53,56,57,59,60,61,62,63,64,66,74,76,78,79,80,81,84,85,86,100,101,102,112,],[39,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-55,-52,-53,-57,-45,-15,-18,-37,-40,-11,-12,-13,-14,-8,-43,-59,-42,-54,-49,-47,-48,-38,-9,-76,-50,-16,-17,-29,]),'COLON_COLON':([7,8,9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,36,42,44,45,51,52,53,56,57,59,60,61,62,63,64,66,70,74,76,78,79,80,81,84,85,86,97,100,101,102,112,117,],[41,-58,-51,-56,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-30,-55,-52,-53,-57,-45,-15,-18,-37,-40,-11,-12,-13,-14,-8,-43,98,-59,-42,-54,-49,-47,-48,-38,-9,-76,-31,-50,-16,-17,-29,-34,]),'BAR':([9,11,13,16,22,25,26,27,28,29,30,31,32,33,34,35,36,41,46,47,48,49,53,56,57,59,60,61,62,63,64,66,67,70,76,84,85,86,87,88,89,90,91,92,93,94,96,97,101,102,103,108,111,112,117,],[47,-41,-39,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-30,47,-84,-85,-86,-87,-15,-18,-37,-40,-11,-12,-13,-14,-8,47,47,-35,-42,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,107,-31,-16,-17,47,-36,-83,-29,-34,]),'LESS_THAN':([9,11,13,16,22,25,26,27,28,29,30,31,32,33,34,35,36,41,46,47,48,49,53,56,57,59,60,61,62,63,64,66,67,68,69,76,84,85,86,87,88,89,90,91,92,93,94,95,101,102,103,105,107,111,112,119,120,],[48,-41,-39,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,-21,48,-84,-85,-86,-87,-15,-18,-37,-40,-11,-12,-13,-14,-8,48,48,-22,-20,-42,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,106,-16,-17,48,-23,-19,-83,-29,-24,-25,]),'GREATER_THAN':([9,11,13,16,22,25,26,27,28,29,30,31,32,33,34,35,41,46,47,48,49,53,56,57,59,60,61,62,63,64,66,67,76,84,85,86,87,88,89,90,91,92,93,94,101,102,103,111,112,113,114,115,121,122,],[49,-41,-39,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-77,49,-84,-85,-86,-87,-15,-18,-37,-40,-11,-12,-13,-14,-8,49,49,-42,-38,-9,-76,-78,-79,-80,-81,-82,-77,-89,-90,-16,-17,49,-83,-29,119,120,-27,-28,-26,]),'SEMICOLON':([9,10,11,12,13,15,16,22,25,26,27,28,29,30,31,32,33,34,44,45,51,52,53,56,57,59,60,61,62,63,64,66,76,78,79,80,81,84,85,86,100,101,102,112,],[50,50,-41,-46,-39,-44,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,77,50,77,-45,-15,-18,-37,-40,-11,-12,-13,-14,-8,-43,-42,77,-49,-47,-48,-38,-9,-76,-50,-16,-17,-29,]),'LEFT_BRACKET':([13,16,22,25,26,27,28,29,30,31,32,33,34,53,56,57,60,61,62,63,64,84,85,86,101,102,108,112,122,],[55,-10,-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-15,-18,-37,-11,-12,-13,-14,-8,-38,-9,-76,-16,-17,55,-29,55,]),'COLON':([22,25,26,27,28,29,30,31,32,33,34,36,57,64,70,84,85,86,97,112,117,],[-7,-5,-6,-68,-69,-70,-71,-72,-73,-74,-75,-30,-37,-8,99,-38,-9,-76,-31,-29,-34,]),'MULTI_KEYWORD':([27,28,29,30,31,32,33,34,35,46,47,48,49,67,86,87,88,89,90,91,92,93,94,103,111,],[-68,-69,-70,-71,-72,-73,-74,-75,-77,-84,-85,-86,-87,94,-76,-78,-79,-80,-81,-82,-77,-89,-90,94,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionList':([0,54,55,95,],[1,82,83,104,]),'optionalExpression':([0,37,54,55,95,],[2,71,2,2,2,]),'expression':([0,21,37,54,55,95,110,],[3,65,3,3,3,3,118,]),'commaExpression':([0,21,37,54,55,95,110,],[4,4,4,4,4,4,4,]),'commaExpressionContent':([0,21,37,54,55,95,110,],[5,5,5,5,5,5,5,]),'assignmentExpression':([0,21,37,38,39,54,55,95,110,],[6,6,6,72,73,6,6,6,6,]),'lowPrecedenceExpression':([0,21,37,38,39,54,55,95,110,],[7,7,7,7,7,7,7,7,7,]),'chainExpression':([0,21,37,38,39,40,54,55,95,110,],[8,8,8,8,8,74,8,8,8,8,]),'binaryExpression':([0,21,24,37,38,39,40,54,55,95,110,],[9,9,66,9,9,9,9,9,9,9,9,]),'chainedMessageKeyword':([0,9,21,37,38,39,40,50,54,55,77,95,110,],[10,45,10,10,10,10,10,80,10,10,80,10,10,]),'prefixUnaryExpression':([0,14,21,24,37,38,39,40,43,54,55,95,110,],[11,59,11,11,11,11,11,11,76,11,11,11,11,]),'chainedMessageArguments':([0,9,21,37,38,39,40,50,54,55,77,95,110,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'primaryExpression':([0,14,21,24,37,38,39,40,43,54,55,95,98,110,116,],[13,13,13,13,13,13,13,13,13,13,13,13,108,13,122,]),'anyPrefixOperator':([0,14,21,24,37,38,39,40,43,54,55,95,110,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'chainedMessageArgument':([0,9,12,21,37,38,39,40,50,54,55,77,95,110,],[15,15,52,15,15,15,15,15,15,15,15,15,15,15,]),'primaryTerm':([0,14,17,18,19,20,21,24,37,38,39,40,43,54,55,58,95,98,110,116,],[16,16,60,61,62,63,16,16,16,16,16,16,16,16,16,84,16,16,16,16,]),'block':([0,13,14,17,18,19,20,21,24,37,38,39,40,43,54,55,58,95,98,108,110,116,122,],[22,56,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,56,22,22,56,]),'literal':([0,14,17,18,19,20,21,24,37,38,39,40,43,54,55,58,67,95,98,103,110,116,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,88,26,26,88,26,26,]),'lowPrecedenceOperator':([7,],[40,]),'optionalKeywordChain':([9,],[42,]),'anyOperator':([9,41,66,67,103,],[43,75,43,91,91,]),'chainedMessages':([9,10,45,],[44,51,78,]),'expandableIdentifier':([13,50,77,106,108,109,122,],[53,81,81,113,53,117,53,]),'literalArrayElements':([35,92,],[67,103,]),'optionalBlockClosureHeader':([36,],[68,]),'blockClosureHeader':([36,],[69,]),'blockArguments':([36,],[70,]),'chainedMessage':([50,77,],[79,100,]),'literalArrayElement':([67,103,],[87,87,]),'anyKeyword':([67,103,],[90,90,]),'pragmaList':([68,],[95,]),'blockResultType':([70,],[96,]),'blockArgument':([70,],[97,]),'pragma':([95,],[105,]),'optionalBlockArgumentType':([99,],[109,]),'pragmaKeywordArguments':([106,],[114,]),'pragmaKeywordArgument':([106,114,],[115,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressionList","S'",1,None,None,None),
  ('expressionList -> optionalExpression','expressionList',1,'p_expressionList_single','parser.py',22),
  ('expressionList -> expressionList DOT optionalExpression','expressionList',3,'p_expressionList_pair','parser.py',29),
  ('optionalExpression -> <empty>','optionalExpression',0,'p_optionalExpression_empty','parser.py',33),
  ('optionalExpression -> expression','optionalExpression',1,'p_optionalExpression_nonEmpty','parser.py',37),
  ('primaryTerm -> IDENTIFIER','primaryTerm',1,'p_primaryTerm_identifier','parser.py',41),
  ('primaryTerm -> literal','primaryTerm',1,'p_primaryTerm_literal','parser.py',45),
  ('primaryTerm -> block','primaryTerm',1,'p_primaryTerm_block','parser.py',49),
  ('primaryTerm -> LEFT_PARENT RIGHT_PARENT','primaryTerm',2,'p_primaryTerm_emptyTuple','parser.py',53),
  ('primaryTerm -> LEFT_PARENT expression RIGHT_PARENT','primaryTerm',3,'p_primaryTerm_parent','parser.py',57),
  ('primaryExpression -> primaryTerm','primaryExpression',1,'p_primaryExpression_primaryTerm','parser.py',61),
  ('primaryExpression -> QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quote','parser.py',65),
  ('primaryExpression -> QUASI_QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiQuote','parser.py',69),
  ('primaryExpression -> QUASI_UNQUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiUnquote','parser.py',73),
  ('primaryExpression -> SPLICE primaryTerm','primaryExpression',2,'p_primaryExpression_splice','parser.py',77),
  ('primaryExpression -> primaryExpression expandableIdentifier','primaryExpression',2,'p_primaryExpression_unaryMessage','parser.py',81),
  ('primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT','primaryExpression',4,'p_primaryExpression_call','parser.py',85),
  ('primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET','primaryExpression',4,'p_primaryExpression_subscript','parser.py',89),
  ('primaryExpression -> primaryExpression block','primaryExpression',2,'p_primaryExpression_applyBlock','parser.py',93),
  ('blockClosureHeader -> blockArguments blockResultType BAR','blockClosureHeader',3,'p_blockClosureHeader','parser.py',97),
  ('optionalBlockClosureHeader -> blockClosureHeader','optionalBlockClosureHeader',1,'p_optionalBlockClosureHeader_notEmpty','parser.py',101),
  ('optionalBlockClosureHeader -> <empty>','optionalBlockClosureHeader',0,'p_optionalBlockClosureHeader_empty','parser.py',105),
  ('pragmaList -> <empty>','pragmaList',0,'p_pragmaList_empty','parser.py',109),
  ('pragmaList -> pragmaList pragma','pragmaList',2,'p_pragmaList_rest','parser.py',113),
  ('pragma -> LESS_THAN expandableIdentifier GREATER_THAN','pragma',3,'p_pragma_unary','parser.py',117),
  ('pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN','pragma',3,'p_pragma_keyword','parser.py',121),
  ('pragmaKeywordArgument -> KEYWORD primaryExpression','pragmaKeywordArgument',2,'p_pragmaKeywordArgument','parser.py',130),
  ('pragmaKeywordArguments -> pragmaKeywordArgument','pragmaKeywordArguments',1,'p_pragmaKeywordArguments_first','parser.py',134),
  ('pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument','pragmaKeywordArguments',2,'p_pragmaKeywordArguments_reset','parser.py',138),
  ('block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET','block',5,'p_block','parser.py',142),
  ('blockArguments -> <empty>','blockArguments',0,'p_blockArguments_empty','parser.py',151),
  ('blockArguments -> blockArguments blockArgument','blockArguments',2,'p_blockArguments_rest','parser.py',155),
  ('optionalBlockArgumentType -> <empty>','optionalBlockArgumentType',0,'p_optionalBlockArgumentType_empty','parser.py',159),
  ('optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT','optionalBlockArgumentType',3,'p_optionalBlockArgumentType_nonEmpty','parser.py',163),
  ('blockArgument -> COLON optionalBlockArgumentType expandableIdentifier','blockArgument',3,'p_blockArgument','parser.py',167),
  ('blockResultType -> <empty>','blockResultType',0,'p_blockResultType_empty','parser.py',171),
  ('blockResultType -> COLON_COLON primaryExpression','blockResultType',2,'p_blockResultType_nonEmpty','parser.py',175),
  ('expandableIdentifier -> IDENTIFIER','expandableIdentifier',1,'p_expandableIdentifier_identifier','parser.py',179),
  ('expandableIdentifier -> QUASI_UNQUOTE primaryTerm','expandableIdentifier',2,'p_expandableIdentifier_quasiUnquote','parser.py',183),
  ('prefixUnaryExpression -> primaryExpression','prefixUnaryExpression',1,'p_prefixUnaryExpression_receiver','parser.py',187),
  ('prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression','prefixUnaryExpression',2,'p_prefixUnaryExpression_operation','parser.py',191),
  ('binaryExpression -> prefixUnaryExpression','binaryExpression',1,'p_binaryExpression_receiver','parser.py',195),
  ('binaryExpression -> binaryExpression anyOperator prefixUnaryExpression','binaryExpression',3,'p_binaryExpression_operation','parser.py',199),
  ('chainedMessageArgument -> KEYWORD binaryExpression','chainedMessageArgument',2,'p_chainedMessageArgument','parser.py',203),
  ('chainedMessageArguments -> chainedMessageArgument','chainedMessageArguments',1,'p_chainedMessageArguments_first','parser.py',207),
  ('chainedMessageArguments -> chainedMessageArguments chainedMessageArgument','chainedMessageArguments',2,'p_chainedMessageArguments_rest','parser.py',211),
  ('chainedMessageKeyword -> chainedMessageArguments','chainedMessageKeyword',1,'p_chainedMessageKeyword','parser.py',215),
  ('chainedMessage -> chainedMessageKeyword','chainedMessage',1,'p_chainedMessage_keyword','parser.py',228),
  ('chainedMessage -> expandableIdentifier','chainedMessage',1,'p_chainedMessage_unary','parser.py',232),
  ('chainedMessages -> SEMICOLON chainedMessage','chainedMessages',2,'p_chainedMessages_first','parser.py',236),
  ('chainedMessages -> chainedMessages SEMICOLON chainedMessage','chainedMessages',3,'p_chainedMessages_rest','parser.py',240),
  ('optionalKeywordChain -> <empty>','optionalKeywordChain',0,'p_optionalKeywordChain_empty','parser.py',244),
  ('optionalKeywordChain -> chainedMessages','optionalKeywordChain',1,'p_optionalKeywordChain_nonEmpty','parser.py',248),
  ('optionalKeywordChain -> chainedMessageKeyword','optionalKeywordChain',1,'p_optionalKeywordChain_keyword','parser.py',252),
  ('optionalKeywordChain -> chainedMessageKeyword chainedMessages','optionalKeywordChain',2,'p_optionalKeywordChain_keyword_nonEmpty','parser.py',256),
  ('chainExpression -> binaryExpression optionalKeywordChain','chainExpression',2,'p_chainExpression_withReceiver','parser.py',260),
  ('chainExpression -> chainedMessageKeyword','chainExpression',1,'p_chainExpression_withoutReceiver','parser.py',267),
  ('chainExpression -> chainedMessageKeyword chainedMessages','chainExpression',2,'p_chainExpression_withoutReceiverChain','parser.py',271),
  ('lowPrecedenceExpression -> chainExpression','lowPrecedenceExpression',1,'p_lowPrecedenceExpression_first','parser.py',275),
  ('lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression','lowPrecedenceExpression',3,'p_lowPrecedenceExpression_rest','parser.py',279),
  ('lowPrecedenceOperator -> COLON_COLON anyOperator','lowPrecedenceOperator',2,'p_lowPrecedenceOperator','parser.py',283),
  ('assignmentExpression -> lowPrecedenceExpression','assignmentExpression',1,'p_assignmentExpression_last','parser.py',287),
  ('assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression','assignmentExpression',3,'p_assignmentExpression_previous','parser.py',291),
  ('commaExpressionContent -> assignmentExpression','commaExpressionContent',1,'p_commaExpressionContent_first','parser.py',295),
  ('commaExpressionContent -> commaExpressionContent COMMA assignmentExpression','commaExpressionContent',3,'p_commaExpressionContent_next','parser.py',299),
  ('commaExpression -> commaExpressionContent','commaExpression',1,'p_commaExpression_content','parser.py',303),
  ('commaExpression -> commaExpressionContent COMMA','commaExpression',2,'p_commaExpression_extraComma','parser.py',307),
  ('expression -> commaExpression','expression',1,'p_expression','parser.py',311),
  ('literal -> FLOAT','literal',1,'p_literal_float','parser.py',315),
  ('literal -> INTEGER','literal',1,'p_literal_integer','parser.py',319),
  ('literal -> CHARACTER','literal',1,'p_literal_character','parser.py',323),
  ('literal -> STRING','literal',1,'p_literal_string','parser.py',327),
  ('literal -> SYMBOL_IDENTIFIER','literal',1,'p_literal_symbolIdentifier','parser.py',331),
  ('literal -> SYMBOL_KEYWORD','literal',1,'p_literal_symbolKeyword','parser.py',335),
  ('literal -> SYMBOL_OPERATOR','literal',1,'p_literal_symbolOperator','parser.py',339),
  ('literal -> SYMBOL_STRING','literal',1,'p_literal_symbolString','parser.py',343),
  ('literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT','literal',3,'p_literal_literalArray','parser.py',347),
  ('literalArrayElements -> <empty>','literalArrayElements',0,'p_literalArrayElements_empty','parser.py',351),
  ('literalArrayElements -> literalArrayElements literalArrayElement','literalArrayElements',2,'p_literalArrayElements_nonEmpty','parser.py',355),
  ('literalArrayElement -> literal','literalArrayElement',1,'p_literalArrayElement_literal','parser.py',359),
  ('literalArrayElement -> IDENTIFIER','literalArrayElement',1,'p_literalArrayElement_identifer','parser.py',363),
  ('literalArrayElement -> anyKeyword','literalArrayElement',1,'p_literalArrayElement_keyword','parser.py',367),
  ('literalArrayElement -> anyOperator','literalArrayElement',1,'p_literalArrayElement_operator','parser.py',371),
  ('literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT','literalArrayElement',3,'p_literalArrayElement_array','parser.py',375),
  ('anyOperator -> OPERATOR','anyOperator',1,'p_anyOperator','parser.py',379),
  ('anyOperator -> BAR','anyOperator',1,'p_anyOperator','parser.py',380),
  ('anyOperator -> LESS_THAN','anyOperator',1,'p_anyOperator','parser.py',381),
  ('anyOperator -> GREATER_THAN','anyOperator',1,'p_anyOperator','parser.py',382),
  ('anyPrefixOperator -> OPERATOR','anyPrefixOperator',1,'p_anyPrefixOperator','parser.py',386),
  ('anyKeyword -> KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',390),
  ('anyKeyword -> MULTI_KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',391),
]
