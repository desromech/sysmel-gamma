
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BAR BYTE_ARRAY_LEFT_BRACKET CHARACTER COLON COLON_COLON COMMA DICTIONARY_ARRAY_LEFT_CURLY_BRACKET DOT FLOAT GREATER_THAN IDENTIFIER INTEGER KEYWORD LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PARENT LESS_THAN LITERAL_ARRAY_LEFT_PARENT MULTI_KEYWORD OPERATOR QUASI_QUOTE QUASI_UNQUOTE QUOTE RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PARENT SEMICOLON SPLICE STAR STRING SYMBOL_IDENTIFIER SYMBOL_KEYWORD SYMBOL_OPERATOR SYMBOL_STRINGexpressionList : optionalExpressionexpressionList : expressionList DOT optionalExpressionoptionalExpression :optionalExpression : expressionprimaryTerm : IDENTIFIERprimaryTerm : literalprimaryTerm : blockprimaryTerm : makeDictionaryprimaryTerm : makeByteArrayprimaryTerm : LEFT_PARENT RIGHT_PARENTprimaryTerm : LEFT_PARENT expression RIGHT_PARENTprimaryExpression : primaryTermprimaryExpression : QUOTE primaryTermprimaryExpression : QUASI_QUOTE primaryTermprimaryExpression : QUASI_UNQUOTE primaryTermprimaryExpression : SPLICE primaryTermprimaryExpression : primaryExpression expandableIdentifierprimaryExpression : primaryExpression LEFT_PARENT expressionList RIGHT_PARENTprimaryExpression : primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKETprimaryExpression : primaryExpression blockblockClosureHeader : blockArguments blockResultType BARoptionalBlockClosureHeader : blockClosureHeaderoptionalBlockClosureHeader : pragmaList : pragmaList : pragmaList pragmapragma : LESS_THAN expandableIdentifier GREATER_THANpragma : LESS_THAN pragmaKeywordArguments GREATER_THANpragmaKeywordArgument : KEYWORD primaryExpressionpragmaKeywordArguments : pragmaKeywordArgumentpragmaKeywordArguments : pragmaKeywordArguments pragmaKeywordArgumentblock : LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKETblockArguments : blockArguments : blockArguments blockArgumentblockArguments : blockArguments blockGenericArgumentoptionalBlockArgumentType : optionalBlockArgumentType : LEFT_PARENT expression RIGHT_PARENTblockGenericArgument : COLON STAR optionalBlockArgumentType expandableIdentifierblockArgument : COLON optionalBlockArgumentType expandableIdentifierblockResultType : blockResultType : COLON_COLON primaryExpression expandableIdentifier : IDENTIFIERexpandableIdentifier : QUASI_UNQUOTE primaryTermprefixUnaryExpression : primaryExpressionprefixUnaryExpression : anyPrefixOperator prefixUnaryExpressionbinaryExpression : prefixUnaryExpressionbinaryExpression : binaryExpression anyOperator prefixUnaryExpressionchainedMessageArgument : KEYWORD binaryExpressionchainedMessageArguments : chainedMessageArgumentchainedMessageArguments : chainedMessageArguments chainedMessageArgumentchainedMessageKeyword : chainedMessageArgumentschainedMessage : chainedMessageKeywordchainedMessage : expandableIdentifierchainedMessages : SEMICOLON chainedMessagechainedMessages : chainedMessages SEMICOLON chainedMessageoptionalKeywordChain :optionalKeywordChain : chainedMessageschainExpression : binaryExpression optionalKeywordChainchainExpression : binaryExpression chainedMessageKeyword optionalKeywordChainchainExpression : chainedMessageKeywordchainExpression : chainedMessageKeyword chainedMessageslowPrecedenceExpression : chainExpressionlowPrecedenceExpression : lowPrecedenceExpression lowPrecedenceOperator chainExpressionlowPrecedenceOperator : COLON_COLON anyOperatorassignmentExpression : lowPrecedenceExpressionassignmentExpression : lowPrecedenceExpression ASSIGNMENT assignmentExpressioncommaExpressionContent : assignmentExpressioncommaExpressionContent : commaExpressionContent COMMA assignmentExpressioncommaExpression : commaExpressionContentcommaExpression : commaExpressionContent COMMAexpression : commaExpressionliteral : FLOATliteral : INTEGERliteral : CHARACTERliteral : STRINGliteral : SYMBOL_IDENTIFIERliteral : SYMBOL_KEYWORDliteral : SYMBOL_OPERATORliteral : SYMBOL_STRINGliteral : LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENTliteralArrayElements :literalArrayElements : literalArrayElements literalArrayElementliteralArrayElement : literalliteralArrayElement : IDENTIFIERliteralArrayElement : anyKeywordliteralArrayElement : anyOperatorliteralArrayElement : LEFT_PARENT literalArrayElements RIGHT_PARENTdictionaryKey : KEYWORDdictionaryKey : binaryExpression COLONdictionaryElement : dictionaryKeydictionaryElement : dictionaryKey expressiondictionaryElements : dictionaryElements : dictionaryElementdictionaryElements : dictionaryElements DOT dictionaryElementdictionaryElements : dictionaryElements DOTmakeDictionary : DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKETmakeByteArray : BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKETanyOperator : OPERATOR\n                   | BAR\n                   | STAR\n                   | LESS_THAN\n                   | GREATER_THANanyPrefixOperator : OPERATOR\n                         | STARanyKeyword : KEYWORD\n                   | MULTI_KEYWORD'
    
_lr_action_items = {'DOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,47,48,50,57,58,59,60,61,62,63,65,66,67,68,69,70,72,74,75,77,78,79,80,82,83,84,85,86,88,89,91,92,93,94,95,96,97,98,107,113,114,115,116,117,118,119,120,122,123,125,130,132,140,141,],[-3,42,-1,-4,-70,-68,-66,-64,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-23,-91,-3,-3,-69,-57,-55,-56,-60,-49,-17,-3,-3,-20,-41,-44,-13,-14,-15,-16,-10,-47,-24,-22,114,-92,-89,-87,42,-2,-67,-65,-62,-58,-46,-53,-51,-52,42,42,-42,-11,-79,-3,-95,-94,-90,-88,-96,-54,-18,-19,42,-25,-21,-93,-31,-26,-27,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,42,43,47,48,50,57,58,59,62,63,65,66,67,68,69,70,72,83,84,85,86,88,89,91,92,93,96,97,98,113,117,118,119,120,132,],[-3,0,-1,-4,-70,-68,-66,-64,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-3,-69,-57,-55,-56,-60,-49,-17,-20,-41,-44,-13,-14,-15,-16,-10,-47,-2,-67,-65,-62,-58,-46,-53,-51,-52,-42,-11,-79,-95,-96,-54,-18,-19,-31,]),'QUOTE':([0,14,21,23,24,25,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,74,75,79,80,87,107,111,114,116,123,125,129,136,140,141,],[17,17,17,-102,-103,17,-23,17,17,17,17,17,17,17,-97,-98,-99,-100,-101,17,17,-24,-22,17,-87,-63,17,17,17,-88,-25,-21,17,17,-26,-27,]),'QUASI_QUOTE':([0,14,21,23,24,25,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,74,75,79,80,87,107,111,114,116,123,125,129,136,140,141,],[18,18,18,-102,-103,18,-23,18,18,18,18,18,18,18,-97,-98,-99,-100,-101,18,18,-24,-22,18,-87,-63,18,18,18,-88,-25,-21,18,18,-26,-27,]),'QUASI_UNQUOTE':([0,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,49,51,52,53,54,55,56,59,60,61,62,63,66,67,68,69,70,74,75,79,80,87,90,96,97,98,107,111,112,113,114,116,117,119,120,123,124,125,126,127,128,129,132,136,138,140,141,143,145,],[19,64,19,-12,19,-7,-102,-103,19,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-23,19,19,19,19,19,19,19,-97,-98,-99,-100,-101,64,-17,19,19,-20,-41,-13,-14,-15,-16,-10,-24,-22,19,-87,-63,64,-42,-11,-79,19,19,-35,-95,19,-88,-96,-18,-19,-25,64,-21,64,64,-35,19,-31,19,64,-26,-27,64,-36,]),'SPLICE':([0,14,21,23,24,25,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,74,75,79,80,87,107,111,114,116,123,125,129,136,140,141,],[20,20,20,-102,-103,20,-23,20,20,20,20,20,20,20,-97,-98,-99,-100,-101,20,20,-24,-22,20,-87,-63,20,20,20,-88,-25,-21,20,20,-26,-27,]),'OPERATOR':([0,9,11,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,54,55,59,60,61,62,63,65,66,67,68,69,70,72,73,74,75,79,80,81,87,89,96,97,98,99,100,101,102,103,104,105,106,107,113,114,116,117,119,120,121,123,125,129,131,132,140,141,],[23,51,-45,-43,23,-12,23,-7,-102,-103,23,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,23,23,23,23,23,23,51,23,-97,-98,-99,-100,-101,-17,23,23,-20,-41,-44,-13,-14,-15,-16,-10,51,51,-24,-22,23,-87,51,-63,-46,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,23,-95,23,-88,-96,-18,-19,51,-25,-21,23,-86,-31,-26,-27,]),'STAR':([0,9,11,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,51,52,53,54,55,59,60,61,62,63,65,66,67,68,69,70,72,73,74,75,79,80,81,87,89,96,97,98,99,100,101,102,103,104,105,106,107,112,113,114,116,117,119,120,121,123,125,129,131,132,140,141,],[24,53,-45,-43,24,-12,24,-7,-102,-103,24,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,24,24,24,24,24,24,53,24,-97,-98,-99,-100,-101,-17,24,24,-20,-41,-44,-13,-14,-15,-16,-10,53,53,-24,-22,24,-87,53,-63,-46,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,24,128,-95,24,-88,-96,-18,-19,53,-25,-21,24,-86,-31,-26,-27,]),'KEYWORD':([0,9,11,12,13,15,16,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,51,52,53,54,55,56,58,59,60,61,62,63,65,66,67,68,69,70,72,73,74,75,79,80,87,89,90,96,97,98,99,100,101,102,103,104,105,106,107,113,114,116,117,119,120,121,123,124,125,129,131,132,134,135,140,141,142,143,],[25,25,-45,25,-43,-48,-12,25,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,80,25,25,25,25,25,-97,-98,-99,-100,-101,25,-49,-17,25,25,-20,-41,-44,-13,-14,-15,-16,-10,-47,105,-24,-22,25,-87,-63,-46,25,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,25,-95,80,-88,-96,-18,-19,105,-25,136,-21,25,-86,-31,136,-29,-26,-27,-30,-28,]),'IDENTIFIER':([0,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,56,59,60,61,62,63,64,66,67,68,69,70,73,74,75,79,80,87,90,96,97,98,99,100,101,102,103,104,105,106,107,111,112,113,114,116,117,119,120,121,123,124,125,126,127,128,129,131,132,136,138,140,141,143,145,],[26,63,26,-12,26,26,26,26,26,-7,-102,-103,26,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,26,26,26,26,26,26,26,-97,-98,-99,-100,-101,63,-17,26,26,-20,-41,26,-13,-14,-15,-16,-10,101,-24,-22,26,-87,-63,63,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,26,26,-35,-95,26,-88,-96,-18,-19,101,-25,63,-21,63,63,-35,26,-86,-31,26,63,-26,-27,63,-36,]),'LEFT_PARENT':([0,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,59,60,61,62,63,64,66,67,68,69,70,73,74,75,79,80,87,96,97,98,99,100,101,102,103,104,105,106,107,111,112,113,114,116,117,119,120,121,123,125,126,128,129,131,132,136,140,141,143,],[21,60,21,-12,21,21,21,21,21,-7,-102,-103,21,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,21,21,21,21,21,21,21,-97,-98,-99,-100,-101,-17,21,21,-20,-41,21,-13,-14,-15,-16,-10,104,-24,-22,21,-87,-63,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,21,21,129,-95,21,-88,-96,-18,-19,104,-25,-21,60,129,21,-86,-31,21,-26,-27,60,]),'FLOAT':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[30,30,30,30,30,30,30,-102,-103,30,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,30,30,30,30,30,30,30,-97,-98,-99,-100,-101,30,30,30,30,-24,-22,30,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,30,30,30,-88,30,-25,-21,30,-86,30,-26,-27,]),'INTEGER':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[31,31,31,31,31,31,31,-102,-103,31,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,31,31,31,31,31,31,31,-97,-98,-99,-100,-101,31,31,31,31,-24,-22,31,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,31,31,31,-88,31,-25,-21,31,-86,31,-26,-27,]),'CHARACTER':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[32,32,32,32,32,32,32,-102,-103,32,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,32,32,32,32,32,32,32,-97,-98,-99,-100,-101,32,32,32,32,-24,-22,32,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,32,32,32,-88,32,-25,-21,32,-86,32,-26,-27,]),'STRING':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[33,33,33,33,33,33,33,-102,-103,33,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,33,33,33,33,33,33,33,-97,-98,-99,-100,-101,33,33,33,33,-24,-22,33,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,33,33,33,-88,33,-25,-21,33,-86,33,-26,-27,]),'SYMBOL_IDENTIFIER':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[34,34,34,34,34,34,34,-102,-103,34,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,34,34,34,34,34,34,34,-97,-98,-99,-100,-101,34,34,34,34,-24,-22,34,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,34,34,34,-88,34,-25,-21,34,-86,34,-26,-27,]),'SYMBOL_KEYWORD':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[35,35,35,35,35,35,35,-102,-103,35,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,35,35,35,35,35,35,35,-97,-98,-99,-100,-101,35,35,35,35,-24,-22,35,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,35,35,35,-88,35,-25,-21,35,-86,35,-26,-27,]),'SYMBOL_OPERATOR':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[36,36,36,36,36,36,36,-102,-103,36,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,36,36,36,36,36,36,36,-97,-98,-99,-100,-101,36,36,36,36,-24,-22,36,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,36,36,36,-88,36,-25,-21,36,-86,36,-26,-27,]),'SYMBOL_STRING':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[37,37,37,37,37,37,37,-102,-103,37,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,37,37,37,37,37,37,37,-97,-98,-99,-100,-101,37,37,37,37,-24,-22,37,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,37,37,37,-88,37,-25,-21,37,-86,37,-26,-27,]),'LITERAL_ARRAY_LEFT_PARENT':([0,14,17,18,19,20,21,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,73,74,75,79,80,87,98,99,100,101,102,103,104,105,106,107,111,114,116,121,123,125,129,131,136,140,141,],[38,38,38,38,38,38,38,-102,-103,38,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,38,38,38,38,38,38,38,-97,-98,-99,-100,-101,38,38,38,38,-24,-22,38,-87,-63,-79,-81,-82,-83,-84,-85,-80,-104,-105,38,38,38,-88,38,-25,-21,38,-86,38,-26,-27,]),'LEFT_CURLY_BRACKET':([0,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,49,51,52,53,54,55,59,60,61,62,63,64,66,67,68,69,70,74,75,79,80,87,96,97,98,107,111,113,114,116,117,119,120,123,125,126,129,132,136,140,141,143,],[39,39,39,-12,39,39,39,39,39,-7,-102,-103,39,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-23,39,39,39,39,39,39,39,-97,-98,-99,-100,-101,-17,39,39,-20,-41,39,-13,-14,-15,-16,-10,-24,-22,39,-87,-63,-42,-11,-79,39,39,-95,39,-88,-96,-18,-19,-25,-21,39,39,-31,39,-26,-27,39,]),'DICTIONARY_ARRAY_LEFT_CURLY_BRACKET':([0,14,17,18,19,20,21,23,24,25,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,74,75,79,80,87,107,111,114,116,123,125,129,136,140,141,],[40,40,40,40,40,40,40,-102,-103,40,-23,40,40,40,40,40,40,40,-97,-98,-99,-100,-101,40,40,40,-24,-22,40,-87,-63,40,40,40,-88,-25,-21,40,40,-26,-27,]),'BYTE_ARRAY_LEFT_BRACKET':([0,14,17,18,19,20,21,23,24,25,39,40,41,42,43,44,45,49,51,52,53,54,55,60,61,64,74,75,79,80,87,107,111,114,116,123,125,129,136,140,141,],[41,41,41,41,41,41,41,-102,-103,41,-23,41,41,41,41,41,41,41,-97,-98,-99,-100,-101,41,41,41,-24,-22,41,-87,-63,41,41,41,-88,-25,-21,41,41,-26,-27,]),'RIGHT_BRACKET':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,41,42,43,47,48,50,57,58,59,61,62,63,65,66,67,68,69,70,72,82,83,84,85,86,88,89,91,92,93,95,96,97,98,113,117,118,119,120,132,],[-1,-4,-70,-68,-66,-64,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-3,-3,-69,-57,-55,-56,-60,-49,-17,-3,-20,-41,-44,-13,-14,-15,-16,-10,-47,117,-2,-67,-65,-62,-58,-46,-53,-51,-52,120,-42,-11,-79,-95,-96,-54,-18,-19,-31,]),'RIGHT_PARENT':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,42,43,47,48,50,51,52,53,54,55,57,58,59,60,62,63,65,66,67,68,69,70,71,72,73,83,84,85,86,88,89,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,113,117,118,119,120,121,131,132,139,],[-1,-4,-70,-68,-66,-64,-61,-55,-59,-45,-50,-43,-48,-12,70,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-3,-69,-57,-55,-56,-97,-98,-99,-100,-101,-60,-49,-17,-3,-20,-41,-44,-13,-14,-15,-16,-10,97,-47,98,-2,-67,-65,-62,-58,-46,-53,-51,-52,119,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,-95,-96,-54,-18,-19,131,-86,-31,145,]),'RIGHT_CURLY_BRACKET':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,39,40,42,43,47,48,50,57,58,59,62,63,65,66,67,68,69,70,72,74,75,77,78,79,80,83,84,85,86,88,89,91,92,93,96,97,98,107,113,114,115,116,117,118,119,120,122,123,125,130,132,140,141,],[-1,-4,-70,-68,-66,-64,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-23,-91,-3,-69,-57,-55,-56,-60,-49,-17,-20,-41,-44,-13,-14,-15,-16,-10,-47,-24,-22,113,-92,-89,-87,-2,-67,-65,-62,-58,-46,-53,-51,-52,-42,-11,-79,-3,-95,-94,-90,-88,-96,-54,-18,-19,132,-25,-21,-93,-31,-26,-27,]),'COMMA':([5,6,7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,47,48,50,57,58,59,62,63,65,66,67,68,69,70,72,84,85,86,88,89,91,92,93,96,97,98,113,117,118,119,120,132,],[43,-66,-64,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-57,-55,-56,-60,-49,-17,-20,-41,-44,-13,-14,-15,-16,-10,-47,-67,-65,-62,-58,-46,-53,-51,-52,-42,-11,-79,-95,-96,-54,-18,-19,-31,]),'ASSIGNMENT':([7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,47,48,50,57,58,59,62,63,65,66,67,68,69,70,72,86,88,89,91,92,93,96,97,98,113,117,118,119,120,132,],[44,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-57,-55,-56,-60,-49,-17,-20,-41,-44,-13,-14,-15,-16,-10,-47,-62,-58,-46,-53,-51,-52,-42,-11,-79,-95,-96,-54,-18,-19,-31,]),'COLON_COLON':([7,8,9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,39,47,48,50,57,58,59,62,63,65,66,67,68,69,70,72,76,86,88,89,91,92,93,96,97,98,109,110,113,117,118,119,120,132,137,144,],[46,-61,-55,-59,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-32,-57,-55,-56,-60,-49,-17,-20,-41,-44,-13,-14,-15,-16,-10,-47,111,-62,-58,-46,-53,-51,-52,-42,-11,-79,-33,-34,-95,-96,-54,-18,-19,-31,-38,-37,]),'BAR':([9,11,13,16,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,46,51,52,53,54,55,59,62,63,65,66,67,68,69,70,72,73,76,81,89,96,97,98,99,100,101,102,103,104,105,106,108,109,110,113,117,119,120,121,126,131,132,137,144,],[52,-45,-43,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-32,52,-97,-98,-99,-100,-101,-17,-20,-41,-44,-13,-14,-15,-16,-10,52,52,-39,52,-46,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,125,-33,-34,-95,-96,-18,-19,52,-40,-86,-31,-38,-37,]),'LESS_THAN':([9,11,13,16,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,46,51,52,53,54,55,59,62,63,65,66,67,68,69,70,72,73,74,75,81,89,96,97,98,99,100,101,102,103,104,105,106,107,113,117,119,120,121,123,125,131,132,140,141,],[54,-45,-43,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,-23,54,-97,-98,-99,-100,-101,-17,-20,-41,-44,-13,-14,-15,-16,-10,54,54,-24,-22,54,-46,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,124,-95,-96,-18,-19,54,-25,-21,-86,-31,-26,-27,]),'GREATER_THAN':([9,11,13,16,22,26,27,28,29,30,31,32,33,34,35,36,37,38,46,51,52,53,54,55,59,62,63,65,66,67,68,69,70,72,73,81,89,96,97,98,99,100,101,102,103,104,105,106,113,117,119,120,121,131,132,133,134,135,142,143,],[55,-45,-43,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-80,55,-97,-98,-99,-100,-101,-17,-20,-41,-44,-13,-14,-15,-16,-10,55,55,55,-46,-42,-11,-79,-81,-82,-83,-84,-85,-80,-104,-105,-95,-96,-18,-19,55,-86,-31,140,141,-29,-30,-28,]),'SEMICOLON':([9,10,11,12,13,15,16,22,26,27,28,29,30,31,32,33,34,35,36,37,48,50,57,58,59,62,63,65,66,67,68,69,70,72,89,91,92,93,96,97,98,113,117,118,119,120,132,],[56,56,-45,-50,-43,-48,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,56,90,90,-49,-17,-20,-41,-44,-13,-14,-15,-16,-10,-47,-46,-53,-51,-52,-42,-11,-79,-95,-96,-54,-18,-19,-31,]),'COLON':([11,13,16,22,26,27,28,29,30,31,32,33,34,35,36,37,39,59,62,63,65,66,67,68,69,70,76,81,89,96,97,98,109,110,113,117,119,120,132,137,144,],[-45,-43,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-32,-17,-20,-41,-44,-13,-14,-15,-16,-10,112,116,-46,-42,-11,-79,-33,-34,-95,-96,-18,-19,-31,-38,-37,]),'LEFT_BRACKET':([13,16,22,26,27,28,29,30,31,32,33,34,35,36,37,59,62,63,66,67,68,69,70,96,97,98,113,117,119,120,126,132,143,],[61,-12,-7,-5,-6,-8,-9,-71,-72,-73,-74,-75,-76,-77,-78,-17,-20,-41,-13,-14,-15,-16,-10,-42,-11,-79,-95,-96,-18,-19,61,-31,61,]),'MULTI_KEYWORD':([30,31,32,33,34,35,36,37,38,51,52,53,54,55,73,98,99,100,101,102,103,104,105,106,121,131,],[-71,-72,-73,-74,-75,-76,-77,-78,-80,-97,-98,-99,-100,-101,106,-79,-81,-82,-83,-84,-85,-80,-104,-105,106,-86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionList':([0,41,60,61,107,],[1,82,94,95,122,]),'optionalExpression':([0,41,42,60,61,107,],[2,2,83,2,2,2,]),'expression':([0,21,41,42,60,61,79,107,129,],[3,71,3,3,3,3,115,3,139,]),'commaExpression':([0,21,41,42,60,61,79,107,129,],[4,4,4,4,4,4,4,4,4,]),'commaExpressionContent':([0,21,41,42,60,61,79,107,129,],[5,5,5,5,5,5,5,5,5,]),'assignmentExpression':([0,21,41,42,43,44,60,61,79,107,129,],[6,6,6,6,84,85,6,6,6,6,6,]),'lowPrecedenceExpression':([0,21,41,42,43,44,60,61,79,107,129,],[7,7,7,7,7,7,7,7,7,7,7,]),'chainExpression':([0,21,41,42,43,44,45,60,61,79,107,129,],[8,8,8,8,8,8,86,8,8,8,8,8,]),'binaryExpression':([0,21,25,40,41,42,43,44,45,60,61,79,107,114,129,],[9,9,72,81,9,9,9,9,9,9,9,9,9,81,9,]),'chainedMessageKeyword':([0,9,21,41,42,43,44,45,56,60,61,79,90,107,129,],[10,48,10,10,10,10,10,10,92,10,10,10,92,10,10,]),'prefixUnaryExpression':([0,14,21,25,40,41,42,43,44,45,49,60,61,79,107,114,129,],[11,65,11,11,11,11,11,11,11,11,89,11,11,11,11,11,11,]),'chainedMessageArguments':([0,9,21,41,42,43,44,45,56,60,61,79,90,107,129,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'primaryExpression':([0,14,21,25,40,41,42,43,44,45,49,60,61,79,107,111,114,129,136,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,126,13,13,143,]),'anyPrefixOperator':([0,14,21,25,40,41,42,43,44,45,49,60,61,79,107,114,129,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'chainedMessageArgument':([0,9,12,21,41,42,43,44,45,56,60,61,79,90,107,129,],[15,15,58,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'primaryTerm':([0,14,17,18,19,20,21,25,40,41,42,43,44,45,49,60,61,64,79,107,111,114,129,136,],[16,16,66,67,68,69,16,16,16,16,16,16,16,16,16,16,16,96,16,16,16,16,16,16,]),'block':([0,13,14,17,18,19,20,21,25,40,41,42,43,44,45,49,60,61,64,79,107,111,114,126,129,136,143,],[22,62,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,62,22,22,62,]),'literal':([0,14,17,18,19,20,21,25,40,41,42,43,44,45,49,60,61,64,73,79,107,111,114,121,129,136,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,100,27,27,27,27,100,27,27,]),'makeDictionary':([0,14,17,18,19,20,21,25,40,41,42,43,44,45,49,60,61,64,79,107,111,114,129,136,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'makeByteArray':([0,14,17,18,19,20,21,25,40,41,42,43,44,45,49,60,61,64,79,107,111,114,129,136,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'lowPrecedenceOperator':([7,],[45,]),'optionalKeywordChain':([9,48,],[47,88,]),'anyOperator':([9,46,72,73,81,121,],[49,87,49,103,49,103,]),'chainedMessages':([9,10,48,],[50,57,50,]),'expandableIdentifier':([13,56,90,124,126,127,138,143,],[59,93,93,133,59,137,144,59,]),'literalArrayElements':([38,104,],[73,121,]),'optionalBlockClosureHeader':([39,],[74,]),'blockClosureHeader':([39,],[75,]),'blockArguments':([39,],[76,]),'dictionaryElements':([40,],[77,]),'dictionaryElement':([40,114,],[78,130,]),'dictionaryKey':([40,114,],[79,79,]),'chainedMessage':([56,90,],[91,118,]),'literalArrayElement':([73,121,],[99,99,]),'anyKeyword':([73,121,],[102,102,]),'pragmaList':([74,],[107,]),'blockResultType':([76,],[108,]),'blockArgument':([76,],[109,]),'blockGenericArgument':([76,],[110,]),'pragma':([107,],[123,]),'optionalBlockArgumentType':([112,128,],[127,138,]),'pragmaKeywordArguments':([124,],[134,]),'pragmaKeywordArgument':([124,134,],[135,142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressionList","S'",1,None,None,None),
  ('expressionList -> optionalExpression','expressionList',1,'p_expressionList_single','parser.py',22),
  ('expressionList -> expressionList DOT optionalExpression','expressionList',3,'p_expressionList_pair','parser.py',29),
  ('optionalExpression -> <empty>','optionalExpression',0,'p_optionalExpression_empty','parser.py',36),
  ('optionalExpression -> expression','optionalExpression',1,'p_optionalExpression_nonEmpty','parser.py',40),
  ('primaryTerm -> IDENTIFIER','primaryTerm',1,'p_primaryTerm_identifier','parser.py',44),
  ('primaryTerm -> literal','primaryTerm',1,'p_primaryTerm_literal','parser.py',48),
  ('primaryTerm -> block','primaryTerm',1,'p_primaryTerm_block','parser.py',52),
  ('primaryTerm -> makeDictionary','primaryTerm',1,'p_primaryTerm_makeDictionary','parser.py',56),
  ('primaryTerm -> makeByteArray','primaryTerm',1,'p_primaryTerm_makeByteArray','parser.py',60),
  ('primaryTerm -> LEFT_PARENT RIGHT_PARENT','primaryTerm',2,'p_primaryTerm_emptyTuple','parser.py',64),
  ('primaryTerm -> LEFT_PARENT expression RIGHT_PARENT','primaryTerm',3,'p_primaryTerm_parent','parser.py',68),
  ('primaryExpression -> primaryTerm','primaryExpression',1,'p_primaryExpression_primaryTerm','parser.py',72),
  ('primaryExpression -> QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quote','parser.py',76),
  ('primaryExpression -> QUASI_QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiQuote','parser.py',80),
  ('primaryExpression -> QUASI_UNQUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiUnquote','parser.py',84),
  ('primaryExpression -> SPLICE primaryTerm','primaryExpression',2,'p_primaryExpression_splice','parser.py',88),
  ('primaryExpression -> primaryExpression expandableIdentifier','primaryExpression',2,'p_primaryExpression_unaryMessage','parser.py',92),
  ('primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT','primaryExpression',4,'p_primaryExpression_call','parser.py',96),
  ('primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET','primaryExpression',4,'p_primaryExpression_subscript','parser.py',100),
  ('primaryExpression -> primaryExpression block','primaryExpression',2,'p_primaryExpression_applyBlock','parser.py',104),
  ('blockClosureHeader -> blockArguments blockResultType BAR','blockClosureHeader',3,'p_blockClosureHeader','parser.py',108),
  ('optionalBlockClosureHeader -> blockClosureHeader','optionalBlockClosureHeader',1,'p_optionalBlockClosureHeader_notEmpty','parser.py',112),
  ('optionalBlockClosureHeader -> <empty>','optionalBlockClosureHeader',0,'p_optionalBlockClosureHeader_empty','parser.py',116),
  ('pragmaList -> <empty>','pragmaList',0,'p_pragmaList_empty','parser.py',120),
  ('pragmaList -> pragmaList pragma','pragmaList',2,'p_pragmaList_rest','parser.py',124),
  ('pragma -> LESS_THAN expandableIdentifier GREATER_THAN','pragma',3,'p_pragma_unary','parser.py',128),
  ('pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN','pragma',3,'p_pragma_keyword','parser.py',132),
  ('pragmaKeywordArgument -> KEYWORD primaryExpression','pragmaKeywordArgument',2,'p_pragmaKeywordArgument','parser.py',141),
  ('pragmaKeywordArguments -> pragmaKeywordArgument','pragmaKeywordArguments',1,'p_pragmaKeywordArguments_first','parser.py',145),
  ('pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument','pragmaKeywordArguments',2,'p_pragmaKeywordArguments_reset','parser.py',149),
  ('block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET','block',5,'p_block','parser.py',153),
  ('blockArguments -> <empty>','blockArguments',0,'p_blockArguments_empty','parser.py',162),
  ('blockArguments -> blockArguments blockArgument','blockArguments',2,'p_blockArguments_rest','parser.py',166),
  ('blockArguments -> blockArguments blockGenericArgument','blockArguments',2,'p_blockArguments_genericRest','parser.py',170),
  ('optionalBlockArgumentType -> <empty>','optionalBlockArgumentType',0,'p_optionalBlockArgumentType_empty','parser.py',174),
  ('optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT','optionalBlockArgumentType',3,'p_optionalBlockArgumentType_nonEmpty','parser.py',178),
  ('blockGenericArgument -> COLON STAR optionalBlockArgumentType expandableIdentifier','blockGenericArgument',4,'p_blockGenericArgument','parser.py',182),
  ('blockArgument -> COLON optionalBlockArgumentType expandableIdentifier','blockArgument',3,'p_blockArgument','parser.py',186),
  ('blockResultType -> <empty>','blockResultType',0,'p_blockResultType_empty','parser.py',190),
  ('blockResultType -> COLON_COLON primaryExpression','blockResultType',2,'p_blockResultType_nonEmpty','parser.py',194),
  ('expandableIdentifier -> IDENTIFIER','expandableIdentifier',1,'p_expandableIdentifier_identifier','parser.py',198),
  ('expandableIdentifier -> QUASI_UNQUOTE primaryTerm','expandableIdentifier',2,'p_expandableIdentifier_quasiUnquote','parser.py',202),
  ('prefixUnaryExpression -> primaryExpression','prefixUnaryExpression',1,'p_prefixUnaryExpression_receiver','parser.py',206),
  ('prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression','prefixUnaryExpression',2,'p_prefixUnaryExpression_operation','parser.py',210),
  ('binaryExpression -> prefixUnaryExpression','binaryExpression',1,'p_binaryExpression_receiver','parser.py',214),
  ('binaryExpression -> binaryExpression anyOperator prefixUnaryExpression','binaryExpression',3,'p_binaryExpression_operation','parser.py',218),
  ('chainedMessageArgument -> KEYWORD binaryExpression','chainedMessageArgument',2,'p_chainedMessageArgument','parser.py',222),
  ('chainedMessageArguments -> chainedMessageArgument','chainedMessageArguments',1,'p_chainedMessageArguments_first','parser.py',226),
  ('chainedMessageArguments -> chainedMessageArguments chainedMessageArgument','chainedMessageArguments',2,'p_chainedMessageArguments_rest','parser.py',230),
  ('chainedMessageKeyword -> chainedMessageArguments','chainedMessageKeyword',1,'p_chainedMessageKeyword','parser.py',234),
  ('chainedMessage -> chainedMessageKeyword','chainedMessage',1,'p_chainedMessage_keyword','parser.py',247),
  ('chainedMessage -> expandableIdentifier','chainedMessage',1,'p_chainedMessage_unary','parser.py',251),
  ('chainedMessages -> SEMICOLON chainedMessage','chainedMessages',2,'p_chainedMessages_first','parser.py',255),
  ('chainedMessages -> chainedMessages SEMICOLON chainedMessage','chainedMessages',3,'p_chainedMessages_rest','parser.py',259),
  ('optionalKeywordChain -> <empty>','optionalKeywordChain',0,'p_optionalKeywordChain_empty','parser.py',263),
  ('optionalKeywordChain -> chainedMessages','optionalKeywordChain',1,'p_optionalKeywordChain_nonEmpty','parser.py',267),
  ('chainExpression -> binaryExpression optionalKeywordChain','chainExpression',2,'p_chainExpression_withReceiver','parser.py',271),
  ('chainExpression -> binaryExpression chainedMessageKeyword optionalKeywordChain','chainExpression',3,'p_chainExpression_withReceiverFirstKeyword','parser.py',281),
  ('chainExpression -> chainedMessageKeyword','chainExpression',1,'p_chainExpression_withoutReceiver','parser.py',288),
  ('chainExpression -> chainedMessageKeyword chainedMessages','chainExpression',2,'p_chainExpression_withoutReceiverChain','parser.py',292),
  ('lowPrecedenceExpression -> chainExpression','lowPrecedenceExpression',1,'p_lowPrecedenceExpression_first','parser.py',296),
  ('lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression','lowPrecedenceExpression',3,'p_lowPrecedenceExpression_rest','parser.py',300),
  ('lowPrecedenceOperator -> COLON_COLON anyOperator','lowPrecedenceOperator',2,'p_lowPrecedenceOperator','parser.py',304),
  ('assignmentExpression -> lowPrecedenceExpression','assignmentExpression',1,'p_assignmentExpression_last','parser.py',308),
  ('assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression','assignmentExpression',3,'p_assignmentExpression_previous','parser.py',312),
  ('commaExpressionContent -> assignmentExpression','commaExpressionContent',1,'p_commaExpressionContent_first','parser.py',316),
  ('commaExpressionContent -> commaExpressionContent COMMA assignmentExpression','commaExpressionContent',3,'p_commaExpressionContent_next','parser.py',320),
  ('commaExpression -> commaExpressionContent','commaExpression',1,'p_commaExpression_content','parser.py',328),
  ('commaExpression -> commaExpressionContent COMMA','commaExpression',2,'p_commaExpression_extraComma','parser.py',332),
  ('expression -> commaExpression','expression',1,'p_expression','parser.py',339),
  ('literal -> FLOAT','literal',1,'p_literal_float','parser.py',343),
  ('literal -> INTEGER','literal',1,'p_literal_integer','parser.py',347),
  ('literal -> CHARACTER','literal',1,'p_literal_character','parser.py',351),
  ('literal -> STRING','literal',1,'p_literal_string','parser.py',355),
  ('literal -> SYMBOL_IDENTIFIER','literal',1,'p_literal_symbolIdentifier','parser.py',359),
  ('literal -> SYMBOL_KEYWORD','literal',1,'p_literal_symbolKeyword','parser.py',363),
  ('literal -> SYMBOL_OPERATOR','literal',1,'p_literal_symbolOperator','parser.py',367),
  ('literal -> SYMBOL_STRING','literal',1,'p_literal_symbolString','parser.py',371),
  ('literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT','literal',3,'p_literal_literalArray','parser.py',375),
  ('literalArrayElements -> <empty>','literalArrayElements',0,'p_literalArrayElements_empty','parser.py',379),
  ('literalArrayElements -> literalArrayElements literalArrayElement','literalArrayElements',2,'p_literalArrayElements_nonEmpty','parser.py',383),
  ('literalArrayElement -> literal','literalArrayElement',1,'p_literalArrayElement_literal','parser.py',387),
  ('literalArrayElement -> IDENTIFIER','literalArrayElement',1,'p_literalArrayElement_identifer','parser.py',391),
  ('literalArrayElement -> anyKeyword','literalArrayElement',1,'p_literalArrayElement_keyword','parser.py',395),
  ('literalArrayElement -> anyOperator','literalArrayElement',1,'p_literalArrayElement_operator','parser.py',399),
  ('literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT','literalArrayElement',3,'p_literalArrayElement_array','parser.py',403),
  ('dictionaryKey -> KEYWORD','dictionaryKey',1,'p_dictionaryKey_keyword','parser.py',407),
  ('dictionaryKey -> binaryExpression COLON','dictionaryKey',2,'p_dictionaryKey_keywordExpression','parser.py',413),
  ('dictionaryElement -> dictionaryKey','dictionaryElement',1,'p_dictionaryElement_onlyKey','parser.py',417),
  ('dictionaryElement -> dictionaryKey expression','dictionaryElement',2,'p_dictionaryElement_keyValue','parser.py',421),
  ('dictionaryElements -> <empty>','dictionaryElements',0,'p_dicionaryElements_empty','parser.py',425),
  ('dictionaryElements -> dictionaryElement','dictionaryElements',1,'p_dicionaryElements_nonEmptyFirst','parser.py',429),
  ('dictionaryElements -> dictionaryElements DOT dictionaryElement','dictionaryElements',3,'p_dicionaryElements_next','parser.py',433),
  ('dictionaryElements -> dictionaryElements DOT','dictionaryElements',2,'p_dicionaryElements_dot','parser.py',437),
  ('makeDictionary -> DICTIONARY_ARRAY_LEFT_CURLY_BRACKET dictionaryElements RIGHT_CURLY_BRACKET','makeDictionary',3,'p_makeDictionary','parser.py',441),
  ('makeByteArray -> BYTE_ARRAY_LEFT_BRACKET expressionList RIGHT_BRACKET','makeByteArray',3,'p_makeByteArray','parser.py',445),
  ('anyOperator -> OPERATOR','anyOperator',1,'p_anyOperator','parser.py',449),
  ('anyOperator -> BAR','anyOperator',1,'p_anyOperator','parser.py',450),
  ('anyOperator -> STAR','anyOperator',1,'p_anyOperator','parser.py',451),
  ('anyOperator -> LESS_THAN','anyOperator',1,'p_anyOperator','parser.py',452),
  ('anyOperator -> GREATER_THAN','anyOperator',1,'p_anyOperator','parser.py',453),
  ('anyPrefixOperator -> OPERATOR','anyPrefixOperator',1,'p_anyPrefixOperator','parser.py',457),
  ('anyPrefixOperator -> STAR','anyPrefixOperator',1,'p_anyPrefixOperator','parser.py',458),
  ('anyKeyword -> KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',462),
  ('anyKeyword -> MULTI_KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',463),
]
