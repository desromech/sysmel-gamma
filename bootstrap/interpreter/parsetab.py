
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BAR BYTE_ARRAY_LEFT_BRACKET CHARACTER COLON COLON_COLON COMMA DICTIONARY_ARRAY_LEFT_CURLY_BRACKET DOT FLOAT GREATER_THAN IDENTIFIER INTEGER KEYWORD LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PARENT LESS_THAN LITERAL_ARRAY_LEFT_PARENT MULTI_KEYWORD OPERATOR QUASI_QUOTE QUASI_UNQUOTE QUOTE RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PARENT SEMICOLON SPLICE STRING SYMBOL_IDENTIFIER SYMBOL_KEYWORD SYMBOL_OPERATOR SYMBOL_STRINGexpressionList : optionalExpressionexpressionList : expressionList DOT optionalExpressionoptionalExpression :optionalExpression : expressionprimaryTerm : literalprimaryTerm : blockprimaryTerm : LEFT_PARENT expression RIGHT_PARENTprimaryExpression : primaryTermprimaryExpression : QUOTE primaryTermprimaryExpression : QUASI_QUOTE primaryTermprimaryExpression : QUASI_UNQUOTE primaryTermprimaryExpression : SPLICE primaryTermprimaryExpression : primaryExpression LEFT_PARENT expressionList RIGHT_PARENTprimaryExpression : primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKETprimaryExpression : primaryExpression blockblockClosureHeader : blockArguments blockResultType BARoptionalBlockClosureHeader : blockClosureHeaderoptionalBlockClosureHeader : block : LEFT_CURLY_BRACKET optionalBlockClosureHeader expressionList RIGHT_CURLY_BRACKETblockArguments : blockArguments : blockArguments blockArgumentoptionalBlockArgumentType : optionalBlockArgumentType : LEFT_PARENT expression RIGHT_PARENTblockArgument : COLON optionalBlockArgumentType expandableIdentifierblockResultType : blockResultType : COLON_COLON primaryExpression expandableIdentifier : IDENTIFIERexpandableIdentifier : QUASI_UNQUOTE primaryTermprefixUnaryExpression : primaryExpressionprefixUnaryExpression : anyPrefixOperator prefixUnaryExpressionbinaryExpression : prefixUnaryExpressionbinaryExpression : binaryExpression anyOperator prefixUnaryExpressionchainExpression : binaryExpressionlowPrecedenceExpression : chainExpressionlowPrecedenceExpression : lowPrecedenceExpression lowPrecedenceOperator chainExpressionlowPrecedenceOperator : COLON_COLON anyOperatorassignmentExpression : lowPrecedenceExpressionassignmentExpression : lowPrecedenceExpression ASSIGNMENT assignmentExpressioncommaExpressionContent : assignmentExpressioncommaExpressionContent : commaExpressionContent COMMA assignmentExpressioncommaExpression : commaExpressionContentcommaExpression : commaExpressionContent COMMAexpression : commaExpressionliteral : FLOATliteral : INTEGERliteral : CHARACTERliteral : STRINGliteral : SYMBOL_IDENTIFIERliteral : SYMBOL_KEYWORDliteral : SYMBOL_OPERATORliteral : SYMBOL_STRINGliteral : LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENTliteralArrayElements :literalArrayElements : literalArrayElements literalArrayElementliteralArrayElement : literalliteralArrayElement : IDENTIFIERliteralArrayElement : anyKeywordliteralArrayElement : anyOperatorliteralArrayElement : LEFT_PARENT literalArrayElements RIGHT_PARENTanyOperator : OPERATOR\n                   | BAR\n                   | LESS_THAN\n                   | GREATER_THANanyPrefixOperator : OPERATORanyKeyword : KEYWORD\n                   | MULTI_KEYWORD'
    
_lr_action_items = {'DOT':([0,1,2,3,4,5,6,7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,31,32,33,42,43,44,45,46,47,48,49,52,53,55,56,57,58,60,61,62,63,64,73,78,79,81,82,],[-3,32,-1,-4,-43,-41,-39,-37,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-18,-3,-42,-3,-3,-15,-30,-9,-10,-11,-12,-3,-17,-2,-40,-38,-35,-32,32,32,-7,-52,32,-13,-14,-19,-16,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,32,33,44,45,46,47,48,49,55,56,57,58,60,63,64,78,79,81,],[-3,0,-1,-4,-43,-41,-39,-37,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-3,-42,-15,-30,-9,-10,-11,-12,-2,-40,-38,-35,-32,-7,-52,-13,-14,-19,]),'QUOTE':([0,12,18,20,31,32,33,34,35,37,38,39,40,41,42,43,52,53,59,76,82,85,],[14,14,14,-64,-18,14,14,14,14,14,-60,-61,-62,-63,14,14,14,-17,-36,14,-16,14,]),'QUASI_QUOTE':([0,12,18,20,31,32,33,34,35,37,38,39,40,41,42,43,52,53,59,76,82,85,],[15,15,15,-64,-18,15,15,15,15,15,-60,-61,-62,-63,15,15,15,-17,-36,15,-16,15,]),'QUASI_UNQUOTE':([0,12,18,20,31,32,33,34,35,37,38,39,40,41,42,43,52,53,59,76,77,82,84,85,92,],[16,16,16,-64,-18,16,16,16,16,16,-60,-61,-62,-63,16,16,16,-17,-36,16,-22,-16,89,16,-23,]),'SPLICE':([0,12,18,20,31,32,33,34,35,37,38,39,40,41,42,43,52,53,59,76,82,85,],[17,17,17,-64,-18,17,17,17,17,17,-60,-61,-62,-63,17,17,17,-17,-36,17,-16,17,]),'OPERATOR':([0,9,10,11,12,13,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,59,60,63,64,65,66,67,68,69,70,71,72,78,79,80,81,82,85,86,],[20,38,-31,-29,20,-8,20,-6,-64,-5,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,20,20,20,20,38,20,-60,-61,-62,-63,20,20,-15,-30,-9,-10,-11,-12,38,20,-17,-36,-32,-7,-52,-54,-55,-56,-57,-58,-53,-65,-66,-13,-14,38,-19,-16,20,-59,]),'LEFT_PARENT':([0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,51,52,53,59,63,64,65,66,67,68,69,70,71,72,76,77,78,79,80,81,82,83,85,86,89,],[18,42,18,-8,18,18,18,18,18,-6,-64,-5,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,18,18,18,18,18,-60,-61,-62,-63,18,18,-15,-9,-10,-11,-12,70,18,-17,-36,-7,-52,-54,-55,-56,-57,-58,-53,-65,-66,18,85,-13,-14,70,-19,-16,42,18,-59,18,]),'FLOAT':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[22,22,22,22,22,22,22,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,22,22,22,22,22,-60,-61,-62,-63,22,22,22,22,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,22,22,-16,22,-59,22,]),'INTEGER':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[23,23,23,23,23,23,23,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,23,23,23,23,23,-60,-61,-62,-63,23,23,23,23,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,23,23,-16,23,-59,23,]),'CHARACTER':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[24,24,24,24,24,24,24,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,24,24,24,24,24,-60,-61,-62,-63,24,24,24,24,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,24,24,-16,24,-59,24,]),'STRING':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[25,25,25,25,25,25,25,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,25,25,25,25,25,-60,-61,-62,-63,25,25,25,25,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,25,25,-16,25,-59,25,]),'SYMBOL_IDENTIFIER':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[26,26,26,26,26,26,26,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,26,26,26,26,26,-60,-61,-62,-63,26,26,26,26,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,26,26,-16,26,-59,26,]),'SYMBOL_KEYWORD':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[27,27,27,27,27,27,27,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,27,27,27,27,27,-60,-61,-62,-63,27,27,27,27,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,27,27,-16,27,-59,27,]),'SYMBOL_OPERATOR':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[28,28,28,28,28,28,28,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,28,28,28,28,28,-60,-61,-62,-63,28,28,28,28,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,28,28,-16,28,-59,28,]),'SYMBOL_STRING':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[29,29,29,29,29,29,29,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,29,29,29,29,29,-60,-61,-62,-63,29,29,29,29,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,29,29,-16,29,-59,29,]),'LITERAL_ARRAY_LEFT_PARENT':([0,12,14,15,16,17,18,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,51,52,53,59,64,65,66,67,68,69,70,71,72,76,80,82,85,86,89,],[30,30,30,30,30,30,30,-64,-44,-45,-46,-47,-48,-49,-50,-51,-53,-18,30,30,30,30,30,-60,-61,-62,-63,30,30,30,30,-17,-36,-52,-54,-55,-56,-57,-58,-53,-65,-66,30,30,-16,30,-59,30,]),'LEFT_CURLY_BRACKET':([0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,37,38,39,40,41,42,43,44,46,47,48,49,52,53,59,63,64,76,78,79,81,82,83,85,89,],[31,31,31,-8,31,31,31,31,31,-6,-64,-5,-44,-45,-46,-47,-48,-49,-50,-51,-18,31,31,31,31,31,-60,-61,-62,-63,31,31,-15,-9,-10,-11,-12,31,-17,-36,-7,-52,31,-13,-14,-19,-16,31,31,31,]),'RIGHT_PARENT':([2,3,4,5,6,7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,30,32,33,38,39,40,41,42,44,45,46,47,48,49,50,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,71,72,78,79,80,81,86,90,],[-1,-4,-43,-41,-39,-37,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-53,-3,-42,-60,-61,-62,-63,-3,-15,-30,-9,-10,-11,-12,63,64,-2,-40,-38,-35,-32,78,-7,-52,-54,-55,-56,-57,-58,-53,-65,-66,-13,-14,86,-19,-59,92,]),'RIGHT_BRACKET':([2,3,4,5,6,7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,32,33,43,44,45,46,47,48,49,55,56,57,58,60,62,63,64,78,79,81,],[-1,-4,-43,-41,-39,-37,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-3,-42,-3,-15,-30,-9,-10,-11,-12,-2,-40,-38,-35,-32,79,-7,-52,-13,-14,-19,]),'RIGHT_CURLY_BRACKET':([2,3,4,5,6,7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,31,32,33,44,45,46,47,48,49,52,53,55,56,57,58,60,63,64,73,78,79,81,82,],[-1,-4,-43,-41,-39,-37,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-18,-3,-42,-15,-30,-9,-10,-11,-12,-3,-17,-2,-40,-38,-35,-32,-7,-52,81,-13,-14,-19,-16,]),'COMMA':([5,6,7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,44,45,46,47,48,49,56,57,58,60,63,64,78,79,81,],[33,-39,-37,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-15,-30,-9,-10,-11,-12,-40,-38,-35,-32,-7,-52,-13,-14,-19,]),'ASSIGNMENT':([7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,44,45,46,47,48,49,58,60,63,64,78,79,81,],[34,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-15,-30,-9,-10,-11,-12,-35,-32,-7,-52,-13,-14,-19,]),'COLON_COLON':([7,8,9,10,11,13,19,21,22,23,24,25,26,27,28,29,31,44,45,46,47,48,49,54,58,60,63,64,75,78,79,81,87,88,91,],[36,-34,-33,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-20,-15,-30,-9,-10,-11,-12,76,-35,-32,-7,-52,-21,-13,-14,-19,-24,-27,-28,]),'BAR':([9,10,11,13,19,21,22,23,24,25,26,27,28,29,30,31,36,38,39,40,41,44,45,46,47,48,49,51,54,60,63,64,65,66,67,68,69,70,71,72,74,75,78,79,80,81,83,86,87,88,91,],[39,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-53,-20,39,-60,-61,-62,-63,-15,-30,-9,-10,-11,-12,39,-25,-32,-7,-52,-54,-55,-56,-57,-58,-53,-65,-66,82,-21,-13,-14,39,-19,-26,-59,-24,-27,-28,]),'LESS_THAN':([9,10,11,13,19,21,22,23,24,25,26,27,28,29,30,36,38,39,40,41,44,45,46,47,48,49,51,60,63,64,65,66,67,68,69,70,71,72,78,79,80,81,86,],[40,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-53,40,-60,-61,-62,-63,-15,-30,-9,-10,-11,-12,40,-32,-7,-52,-54,-55,-56,-57,-58,-53,-65,-66,-13,-14,40,-19,-59,]),'GREATER_THAN':([9,10,11,13,19,21,22,23,24,25,26,27,28,29,30,36,38,39,40,41,44,45,46,47,48,49,51,60,63,64,65,66,67,68,69,70,71,72,78,79,80,81,86,],[41,-31,-29,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-53,41,-60,-61,-62,-63,-15,-30,-9,-10,-11,-12,41,-32,-7,-52,-54,-55,-56,-57,-58,-53,-65,-66,-13,-14,41,-19,-59,]),'LEFT_BRACKET':([11,13,19,21,22,23,24,25,26,27,28,29,44,46,47,48,49,63,64,78,79,81,83,],[43,-8,-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-15,-9,-10,-11,-12,-7,-52,-13,-14,-19,43,]),'COLON':([19,21,22,23,24,25,26,27,28,29,31,54,63,64,75,81,87,88,91,],[-6,-5,-44,-45,-46,-47,-48,-49,-50,-51,-20,77,-7,-52,-21,-19,-24,-27,-28,]),'IDENTIFIER':([22,23,24,25,26,27,28,29,30,38,39,40,41,51,64,65,66,67,68,69,70,71,72,77,80,84,86,92,],[-44,-45,-46,-47,-48,-49,-50,-51,-53,-60,-61,-62,-63,67,-52,-54,-55,-56,-57,-58,-53,-65,-66,-22,67,88,-59,-23,]),'KEYWORD':([22,23,24,25,26,27,28,29,30,38,39,40,41,51,64,65,66,67,68,69,70,71,72,80,86,],[-44,-45,-46,-47,-48,-49,-50,-51,-53,-60,-61,-62,-63,71,-52,-54,-55,-56,-57,-58,-53,-65,-66,71,-59,]),'MULTI_KEYWORD':([22,23,24,25,26,27,28,29,30,38,39,40,41,51,64,65,66,67,68,69,70,71,72,80,86,],[-44,-45,-46,-47,-48,-49,-50,-51,-53,-60,-61,-62,-63,72,-52,-54,-55,-56,-57,-58,-53,-65,-66,72,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionList':([0,42,43,52,],[1,61,62,73,]),'optionalExpression':([0,32,42,43,52,],[2,55,2,2,2,]),'expression':([0,18,32,42,43,52,85,],[3,50,3,3,3,3,90,]),'commaExpression':([0,18,32,42,43,52,85,],[4,4,4,4,4,4,4,]),'commaExpressionContent':([0,18,32,42,43,52,85,],[5,5,5,5,5,5,5,]),'assignmentExpression':([0,18,32,33,34,42,43,52,85,],[6,6,6,56,57,6,6,6,6,]),'lowPrecedenceExpression':([0,18,32,33,34,42,43,52,85,],[7,7,7,7,7,7,7,7,7,]),'chainExpression':([0,18,32,33,34,35,42,43,52,85,],[8,8,8,8,8,58,8,8,8,8,]),'binaryExpression':([0,18,32,33,34,35,42,43,52,85,],[9,9,9,9,9,9,9,9,9,9,]),'prefixUnaryExpression':([0,12,18,32,33,34,35,37,42,43,52,85,],[10,45,10,10,10,10,10,60,10,10,10,10,]),'primaryExpression':([0,12,18,32,33,34,35,37,42,43,52,76,85,],[11,11,11,11,11,11,11,11,11,11,11,83,11,]),'anyPrefixOperator':([0,12,18,32,33,34,35,37,42,43,52,85,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'primaryTerm':([0,12,14,15,16,17,18,32,33,34,35,37,42,43,52,76,85,89,],[13,13,46,47,48,49,13,13,13,13,13,13,13,13,13,13,13,91,]),'block':([0,11,12,14,15,16,17,18,32,33,34,35,37,42,43,52,76,83,85,89,],[19,44,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,44,19,19,]),'literal':([0,12,14,15,16,17,18,32,33,34,35,37,42,43,51,52,76,80,85,89,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,66,21,21,66,21,21,]),'lowPrecedenceOperator':([7,],[35,]),'anyOperator':([9,36,51,80,],[37,59,69,69,]),'literalArrayElements':([30,70,],[51,80,]),'optionalBlockClosureHeader':([31,],[52,]),'blockClosureHeader':([31,],[53,]),'blockArguments':([31,],[54,]),'literalArrayElement':([51,80,],[65,65,]),'anyKeyword':([51,80,],[68,68,]),'blockResultType':([54,],[74,]),'blockArgument':([54,],[75,]),'optionalBlockArgumentType':([77,],[84,]),'expandableIdentifier':([84,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressionList","S'",1,None,None,None),
  ('expressionList -> optionalExpression','expressionList',1,'p_expressionList_single','parser.py',6),
  ('expressionList -> expressionList DOT optionalExpression','expressionList',3,'p_expressionList_pair','parser.py',13),
  ('optionalExpression -> <empty>','optionalExpression',0,'p_optionalExpression_empty','parser.py',17),
  ('optionalExpression -> expression','optionalExpression',1,'p_optionalExpression_nonEmpty','parser.py',21),
  ('primaryTerm -> literal','primaryTerm',1,'p_primaryTerm_literal','parser.py',25),
  ('primaryTerm -> block','primaryTerm',1,'p_primaryTerm_block','parser.py',29),
  ('primaryTerm -> LEFT_PARENT expression RIGHT_PARENT','primaryTerm',3,'p_primaryTerm_parent','parser.py',33),
  ('primaryExpression -> primaryTerm','primaryExpression',1,'p_primaryExpression_primaryTerm','parser.py',37),
  ('primaryExpression -> QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quote','parser.py',41),
  ('primaryExpression -> QUASI_QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiQuote','parser.py',45),
  ('primaryExpression -> QUASI_UNQUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiUnquote','parser.py',49),
  ('primaryExpression -> SPLICE primaryTerm','primaryExpression',2,'p_primaryExpression_splice','parser.py',53),
  ('primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT','primaryExpression',4,'p_primaryExpression_call','parser.py',57),
  ('primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET','primaryExpression',4,'p_primaryExpression_subscript','parser.py',61),
  ('primaryExpression -> primaryExpression block','primaryExpression',2,'p_primaryExpression_applyBlock','parser.py',65),
  ('blockClosureHeader -> blockArguments blockResultType BAR','blockClosureHeader',3,'p_blockClosureHeader','parser.py',69),
  ('optionalBlockClosureHeader -> blockClosureHeader','optionalBlockClosureHeader',1,'p_optionalBlockClosureHeader_notEmpty','parser.py',73),
  ('optionalBlockClosureHeader -> <empty>','optionalBlockClosureHeader',0,'p_optionalBlockClosureHeader_empty','parser.py',77),
  ('block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader expressionList RIGHT_CURLY_BRACKET','block',4,'p_block','parser.py',81),
  ('blockArguments -> <empty>','blockArguments',0,'p_blockArguments_empty','parser.py',90),
  ('blockArguments -> blockArguments blockArgument','blockArguments',2,'p_blockArguments_rest','parser.py',94),
  ('optionalBlockArgumentType -> <empty>','optionalBlockArgumentType',0,'p_optionalBlockArgumentType_empty','parser.py',98),
  ('optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT','optionalBlockArgumentType',3,'p_optionalBlockArgumentType_nonEmpty','parser.py',102),
  ('blockArgument -> COLON optionalBlockArgumentType expandableIdentifier','blockArgument',3,'p_blockArgument','parser.py',106),
  ('blockResultType -> <empty>','blockResultType',0,'p_blockResultType_empty','parser.py',110),
  ('blockResultType -> COLON_COLON primaryExpression','blockResultType',2,'p_blockResultType_nonEmpty','parser.py',114),
  ('expandableIdentifier -> IDENTIFIER','expandableIdentifier',1,'p_expandableIdentifier_identifier','parser.py',118),
  ('expandableIdentifier -> QUASI_UNQUOTE primaryTerm','expandableIdentifier',2,'p_expandableIdentifier_quasiUnquote','parser.py',122),
  ('prefixUnaryExpression -> primaryExpression','prefixUnaryExpression',1,'p_prefixUnaryExpression_receiver','parser.py',126),
  ('prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression','prefixUnaryExpression',2,'p_prefixUnaryExpression_operation','parser.py',130),
  ('binaryExpression -> prefixUnaryExpression','binaryExpression',1,'p_binaryExpression_receiver','parser.py',134),
  ('binaryExpression -> binaryExpression anyOperator prefixUnaryExpression','binaryExpression',3,'p_binaryExpression_operation','parser.py',138),
  ('chainExpression -> binaryExpression','chainExpression',1,'p_chainExpression_receiver','parser.py',142),
  ('lowPrecedenceExpression -> chainExpression','lowPrecedenceExpression',1,'p_lowPrecedenceExpression_first','parser.py',146),
  ('lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression','lowPrecedenceExpression',3,'p_lowPrecedenceExpression_rest','parser.py',150),
  ('lowPrecedenceOperator -> COLON_COLON anyOperator','lowPrecedenceOperator',2,'p_lowPrecedenceOperator','parser.py',154),
  ('assignmentExpression -> lowPrecedenceExpression','assignmentExpression',1,'p_assignmentExpression_last','parser.py',158),
  ('assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression','assignmentExpression',3,'p_assignmentExpression_previous','parser.py',162),
  ('commaExpressionContent -> assignmentExpression','commaExpressionContent',1,'p_commaExpressionContent_first','parser.py',166),
  ('commaExpressionContent -> commaExpressionContent COMMA assignmentExpression','commaExpressionContent',3,'p_commaExpressionContent_next','parser.py',170),
  ('commaExpression -> commaExpressionContent','commaExpression',1,'p_commaExpression_content','parser.py',174),
  ('commaExpression -> commaExpressionContent COMMA','commaExpression',2,'p_commaExpression_extraComma','parser.py',178),
  ('expression -> commaExpression','expression',1,'p_expression','parser.py',182),
  ('literal -> FLOAT','literal',1,'p_literal_float','parser.py',186),
  ('literal -> INTEGER','literal',1,'p_literal_integer','parser.py',190),
  ('literal -> CHARACTER','literal',1,'p_literal_character','parser.py',194),
  ('literal -> STRING','literal',1,'p_literal_string','parser.py',198),
  ('literal -> SYMBOL_IDENTIFIER','literal',1,'p_literal_symbolIdentifier','parser.py',202),
  ('literal -> SYMBOL_KEYWORD','literal',1,'p_literal_symbolKeyword','parser.py',206),
  ('literal -> SYMBOL_OPERATOR','literal',1,'p_literal_symbolOperator','parser.py',210),
  ('literal -> SYMBOL_STRING','literal',1,'p_literal_symbolString','parser.py',214),
  ('literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT','literal',3,'p_literal_literalArray','parser.py',218),
  ('literalArrayElements -> <empty>','literalArrayElements',0,'p_literalArrayElements_empty','parser.py',222),
  ('literalArrayElements -> literalArrayElements literalArrayElement','literalArrayElements',2,'p_literalArrayElements_nonEmpty','parser.py',226),
  ('literalArrayElement -> literal','literalArrayElement',1,'p_literalArrayElement_literal','parser.py',230),
  ('literalArrayElement -> IDENTIFIER','literalArrayElement',1,'p_literalArrayElement_identifer','parser.py',234),
  ('literalArrayElement -> anyKeyword','literalArrayElement',1,'p_literalArrayElement_keyword','parser.py',238),
  ('literalArrayElement -> anyOperator','literalArrayElement',1,'p_literalArrayElement_operator','parser.py',242),
  ('literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT','literalArrayElement',3,'p_literalArrayElement_array','parser.py',246),
  ('anyOperator -> OPERATOR','anyOperator',1,'p_anyOperator','parser.py',250),
  ('anyOperator -> BAR','anyOperator',1,'p_anyOperator','parser.py',251),
  ('anyOperator -> LESS_THAN','anyOperator',1,'p_anyOperator','parser.py',252),
  ('anyOperator -> GREATER_THAN','anyOperator',1,'p_anyOperator','parser.py',253),
  ('anyPrefixOperator -> OPERATOR','anyPrefixOperator',1,'p_anyPrefixOperator','parser.py',257),
  ('anyKeyword -> KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',261),
  ('anyKeyword -> MULTI_KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',262),
]
