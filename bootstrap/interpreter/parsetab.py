
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGNMENT BAR BYTE_ARRAY_LEFT_BRACKET CHARACTER COLON COLON_COLON COMMA DICTIONARY_ARRAY_LEFT_CURLY_BRACKET DOT FLOAT GREATER_THAN IDENTIFIER INTEGER KEYWORD LEFT_BRACKET LEFT_CURLY_BRACKET LEFT_PARENT LESS_THAN LITERAL_ARRAY_LEFT_PARENT MULTI_KEYWORD OPERATOR QUASI_QUOTE QUASI_UNQUOTE QUOTE RIGHT_BRACKET RIGHT_CURLY_BRACKET RIGHT_PARENT SEMICOLON SPLICE STRING SYMBOL_IDENTIFIER SYMBOL_KEYWORD SYMBOL_OPERATOR SYMBOL_STRINGexpressionList : optionalExpressionexpressionList : expressionList DOT optionalExpressionoptionalExpression :optionalExpression : expressionprimaryTerm : IDENTIFIERprimaryTerm : literalprimaryTerm : blockprimaryTerm : LEFT_PARENT RIGHT_PARENTprimaryTerm : LEFT_PARENT expression RIGHT_PARENTprimaryExpression : primaryTermprimaryExpression : QUOTE primaryTermprimaryExpression : QUASI_QUOTE primaryTermprimaryExpression : QUASI_UNQUOTE primaryTermprimaryExpression : SPLICE primaryTermprimaryExpression : primaryExpression LEFT_PARENT expressionList RIGHT_PARENTprimaryExpression : primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKETprimaryExpression : primaryExpression blockblockClosureHeader : blockArguments blockResultType BARoptionalBlockClosureHeader : blockClosureHeaderoptionalBlockClosureHeader : pragmaList : pragmaList : pragmaList pragmapragma : LESS_THAN expandableIdentifier GREATER_THANpragma : LESS_THAN pragmaKeywordArguments GREATER_THANpragmaKeywordArgument : KEYWORD primaryExpressionpragmaKeywordArguments : pragmaKeywordArgumentpragmaKeywordArguments : pragmaKeywordArguments pragmaKeywordArgumentblock : LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKETblockArguments : blockArguments : blockArguments blockArgumentoptionalBlockArgumentType : optionalBlockArgumentType : LEFT_PARENT expression RIGHT_PARENTblockArgument : COLON optionalBlockArgumentType expandableIdentifierblockResultType : blockResultType : COLON_COLON primaryExpression expandableIdentifier : IDENTIFIERexpandableIdentifier : QUASI_UNQUOTE primaryTermprefixUnaryExpression : primaryExpressionprefixUnaryExpression : anyPrefixOperator prefixUnaryExpressionbinaryExpression : prefixUnaryExpressionbinaryExpression : binaryExpression anyOperator prefixUnaryExpressionchainedMessageArgument : KEYWORD binaryExpressionchainedMessageArguments : chainedMessageArgumentchainedMessageArguments : chainedMessageArguments chainedMessageArgumentchainedMessage : chainedMessageArgumentschainedMessages : chainedMessagechainedMessages : chainedMessages SEMICOLON chainedMessageoptionalChainedMessages :optionalChainedMessages : chainedMessageschainExpression : binaryExpression optionalChainedMessageschainExpression : chainedMessageslowPrecedenceExpression : chainExpressionlowPrecedenceExpression : lowPrecedenceExpression lowPrecedenceOperator chainExpressionlowPrecedenceOperator : COLON_COLON anyOperatorassignmentExpression : lowPrecedenceExpressionassignmentExpression : lowPrecedenceExpression ASSIGNMENT assignmentExpressioncommaExpressionContent : assignmentExpressioncommaExpressionContent : commaExpressionContent COMMA assignmentExpressioncommaExpression : commaExpressionContentcommaExpression : commaExpressionContent COMMAexpression : commaExpressionliteral : FLOATliteral : INTEGERliteral : CHARACTERliteral : STRINGliteral : SYMBOL_IDENTIFIERliteral : SYMBOL_KEYWORDliteral : SYMBOL_OPERATORliteral : SYMBOL_STRINGliteral : LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENTliteralArrayElements :literalArrayElements : literalArrayElements literalArrayElementliteralArrayElement : literalliteralArrayElement : IDENTIFIERliteralArrayElement : anyKeywordliteralArrayElement : anyOperatorliteralArrayElement : LEFT_PARENT literalArrayElements RIGHT_PARENTanyOperator : OPERATOR\n                   | BAR\n                   | LESS_THAN\n                   | GREATER_THANanyPrefixOperator : OPERATORanyKeyword : KEYWORD\n                   | MULTI_KEYWORD'
    
_lr_action_items = {'DOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,37,38,39,43,45,51,52,53,54,55,56,57,58,59,60,62,64,65,67,68,69,70,72,73,74,75,76,77,86,91,92,94,95,97,102,111,112,],[-3,38,-1,-4,-61,-59,-57,-55,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-20,-3,-60,-50,-49,-3,-3,-17,-39,-44,-11,-12,-13,-14,-8,-42,-21,-19,-2,-58,-56,-53,-41,-47,38,38,-9,-70,-3,-15,-16,38,-22,-18,-28,-23,-24,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,38,39,43,45,53,54,55,56,57,58,59,60,62,67,68,69,70,72,73,76,77,91,92,102,],[-3,0,-1,-4,-61,-59,-57,-55,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-3,-60,-50,-49,-17,-39,-44,-11,-12,-13,-14,-8,-42,-2,-58,-56,-53,-41,-47,-9,-70,-15,-16,-28,]),'QUOTE':([0,14,21,23,27,37,38,39,40,41,44,46,47,48,49,51,52,64,65,71,86,89,95,97,100,108,111,112,],[17,17,17,-82,17,-20,17,17,17,17,17,-78,-79,-80,-81,17,17,-21,-19,-54,17,17,-22,-18,17,17,-23,-24,]),'QUASI_QUOTE':([0,14,21,23,27,37,38,39,40,41,44,46,47,48,49,51,52,64,65,71,86,89,95,97,100,108,111,112,],[18,18,18,-82,18,-20,18,18,18,18,18,-78,-79,-80,-81,18,18,-21,-19,-54,18,18,-22,-18,18,18,-23,-24,]),'QUASI_UNQUOTE':([0,14,21,23,27,37,38,39,40,41,44,46,47,48,49,51,52,64,65,71,86,89,90,95,96,97,99,100,108,111,112,116,],[19,19,19,-82,19,-20,19,19,19,19,19,-78,-79,-80,-81,19,19,-21,-19,-54,19,19,-31,-22,106,-18,106,19,19,-23,-24,-32,]),'SPLICE':([0,14,21,23,27,37,38,39,40,41,44,46,47,48,49,51,52,64,65,71,86,89,95,97,100,108,111,112,],[20,20,20,-82,20,-20,20,20,20,20,20,-78,-79,-80,-81,20,20,-21,-19,-54,20,20,-22,-18,20,20,-23,-24,]),'OPERATOR':([0,9,11,13,14,16,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,46,47,48,49,51,52,53,54,56,57,58,59,60,62,63,64,65,71,72,76,77,78,79,80,81,82,83,84,85,86,91,92,93,95,97,100,101,102,111,112,],[23,46,-40,-38,23,-10,23,-7,-82,-5,-6,23,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,23,23,23,23,46,23,-78,-79,-80,-81,23,23,-17,-39,-11,-12,-13,-14,-8,46,46,-21,-19,-54,-41,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,23,-15,-16,46,-22,-18,23,-77,-28,-23,-24,]),'IDENTIFIER':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,90,93,95,96,97,99,100,101,106,108,111,112,116,],[25,25,25,25,25,25,25,-82,25,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,25,25,25,25,25,-78,-79,-80,-81,25,25,80,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,25,25,-31,80,-22,105,-18,105,25,-77,25,25,-23,-24,-32,]),'LEFT_PARENT':([0,13,14,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,53,56,57,58,59,60,63,64,65,71,76,77,78,79,80,81,82,83,84,85,86,89,90,91,92,93,95,97,98,100,101,102,106,108,111,112,115,],[21,51,21,-10,21,21,21,21,21,-7,-82,-5,-6,21,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,21,21,21,21,21,-78,-79,-80,-81,21,21,-17,-11,-12,-13,-14,-8,83,-21,-19,-54,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,21,21,100,-15,-16,83,-22,-18,51,21,-77,-28,21,21,-23,-24,51,]),'KEYWORD':([0,9,11,13,15,16,21,22,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,71,72,76,77,78,79,80,81,82,83,84,85,86,91,92,93,95,96,97,100,101,102,104,107,111,112,113,115,],[27,27,-40,-38,27,-10,27,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,27,27,27,27,-78,-79,-80,-81,27,27,27,-17,-39,-44,-11,-12,-13,-14,-8,-42,84,-21,-19,-54,-41,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,27,-15,-16,84,-22,108,-18,27,-77,-28,108,-26,-23,-24,-27,-25,]),'FLOAT':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[28,28,28,28,28,28,28,-82,28,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,28,28,28,28,28,-78,-79,-80,-81,28,28,28,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,28,28,28,-22,-18,28,-77,28,28,-23,-24,]),'INTEGER':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[29,29,29,29,29,29,29,-82,29,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,29,29,29,29,29,-78,-79,-80,-81,29,29,29,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,29,29,29,-22,-18,29,-77,29,29,-23,-24,]),'CHARACTER':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[30,30,30,30,30,30,30,-82,30,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,30,30,30,30,30,-78,-79,-80,-81,30,30,30,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,30,30,30,-22,-18,30,-77,30,30,-23,-24,]),'STRING':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[31,31,31,31,31,31,31,-82,31,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,31,31,31,31,31,-78,-79,-80,-81,31,31,31,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,31,31,31,-22,-18,31,-77,31,31,-23,-24,]),'SYMBOL_IDENTIFIER':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[32,32,32,32,32,32,32,-82,32,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,32,32,32,32,32,-78,-79,-80,-81,32,32,32,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,32,32,32,-22,-18,32,-77,32,32,-23,-24,]),'SYMBOL_KEYWORD':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[33,33,33,33,33,33,33,-82,33,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,33,33,33,33,33,-78,-79,-80,-81,33,33,33,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,33,33,33,-22,-18,33,-77,33,33,-23,-24,]),'SYMBOL_OPERATOR':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[34,34,34,34,34,34,34,-82,34,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,34,34,34,34,34,-78,-79,-80,-81,34,34,34,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,34,34,34,-22,-18,34,-77,34,34,-23,-24,]),'SYMBOL_STRING':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[35,35,35,35,35,35,35,-82,35,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,35,35,35,35,35,-78,-79,-80,-81,35,35,35,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,35,35,35,-22,-18,35,-77,35,35,-23,-24,]),'LITERAL_ARRAY_LEFT_PARENT':([0,14,17,18,19,20,21,23,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,44,46,47,48,49,51,52,63,64,65,71,77,78,79,80,81,82,83,84,85,86,89,93,95,97,100,101,106,108,111,112,],[36,36,36,36,36,36,36,-82,36,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,36,36,36,36,36,-78,-79,-80,-81,36,36,36,-21,-19,-54,-70,-72,-73,-74,-75,-76,-71,-83,-84,36,36,36,-22,-18,36,-77,36,36,-23,-24,]),'LEFT_CURLY_BRACKET':([0,13,14,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,44,46,47,48,49,51,52,53,56,57,58,59,60,64,65,71,76,77,86,89,91,92,95,97,98,100,102,106,108,111,112,115,],[37,37,37,-10,37,37,37,37,37,-7,-82,-5,-6,37,-62,-63,-64,-65,-66,-67,-68,-69,-20,37,37,37,37,37,-78,-79,-80,-81,37,37,-17,-11,-12,-13,-14,-8,-21,-19,-54,-9,-70,37,37,-15,-16,-22,-18,37,37,-28,37,37,-23,-24,37,]),'RIGHT_PARENT':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,21,22,24,25,26,28,29,30,31,32,33,34,35,36,38,39,43,45,46,47,48,49,51,53,54,55,56,57,58,59,60,61,62,63,67,68,69,70,72,73,74,76,77,78,79,80,81,82,83,84,85,91,92,93,101,102,110,],[-1,-4,-61,-59,-57,-55,-52,-48,-51,-40,-46,-38,-45,-10,60,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-71,-3,-60,-50,-49,-78,-79,-80,-81,-3,-17,-39,-44,-11,-12,-13,-14,-8,76,-42,77,-2,-58,-56,-53,-41,-47,91,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,-15,-16,101,-77,-28,116,]),'RIGHT_BRACKET':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,38,39,43,45,52,53,54,55,56,57,58,59,60,62,67,68,69,70,72,73,75,76,77,91,92,102,],[-1,-4,-61,-59,-57,-55,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-3,-60,-50,-49,-3,-17,-39,-44,-11,-12,-13,-14,-8,-42,-2,-58,-56,-53,-41,-47,92,-9,-70,-15,-16,-28,]),'RIGHT_CURLY_BRACKET':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,37,38,39,43,45,53,54,55,56,57,58,59,60,62,64,65,67,68,69,70,72,73,76,77,86,91,92,94,95,97,102,111,112,],[-1,-4,-61,-59,-57,-55,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-20,-3,-60,-50,-49,-17,-39,-44,-11,-12,-13,-14,-8,-42,-21,-19,-2,-58,-56,-53,-41,-47,-9,-70,-3,-15,-16,102,-22,-18,-28,-23,-24,]),'COMMA':([5,6,7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,43,45,53,54,55,56,57,58,59,60,62,68,69,70,72,73,76,77,91,92,102,],[39,-57,-55,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-50,-49,-17,-39,-44,-11,-12,-13,-14,-8,-42,-58,-56,-53,-41,-47,-9,-70,-15,-16,-28,]),'ASSIGNMENT':([7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,43,45,53,54,55,56,57,58,59,60,62,70,72,73,76,77,91,92,102,],[40,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-50,-49,-17,-39,-44,-11,-12,-13,-14,-8,-42,-53,-41,-47,-9,-70,-15,-16,-28,]),'COLON_COLON':([7,8,9,10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,37,43,45,53,54,55,56,57,58,59,60,62,66,70,72,73,76,77,88,91,92,102,105,109,114,],[42,-52,-48,-51,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-29,-50,-49,-17,-39,-44,-11,-12,-13,-14,-8,-42,89,-53,-41,-47,-9,-70,-30,-15,-16,-28,-36,-33,-37,]),'BAR':([9,11,13,16,22,25,26,28,29,30,31,32,33,34,35,36,37,42,46,47,48,49,53,54,56,57,58,59,60,62,63,66,72,76,77,78,79,80,81,82,83,84,85,87,88,91,92,93,98,101,102,105,109,114,],[47,-40,-38,-10,-7,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-71,-29,47,-78,-79,-80,-81,-17,-39,-11,-12,-13,-14,-8,47,47,-34,-41,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,97,-30,-15,-16,47,-35,-77,-28,-36,-33,-37,]),'LESS_THAN':([9,11,13,16,22,25,26,28,29,30,31,32,33,34,35,36,37,42,46,47,48,49,53,54,56,57,58,59,60,62,63,64,65,72,76,77,78,79,80,81,82,83,84,85,86,91,92,93,95,97,101,102,111,112,],[48,-40,-38,-10,-7,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-71,-20,48,-78,-79,-80,-81,-17,-39,-11,-12,-13,-14,-8,48,48,-21,-19,-41,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,96,-15,-16,48,-22,-18,-77,-28,-23,-24,]),'GREATER_THAN':([9,11,13,16,22,25,26,28,29,30,31,32,33,34,35,36,42,46,47,48,49,53,54,56,57,58,59,60,62,63,72,76,77,78,79,80,81,82,83,84,85,91,92,93,101,102,103,104,105,107,113,114,115,],[49,-40,-38,-10,-7,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-71,49,-78,-79,-80,-81,-17,-39,-11,-12,-13,-14,-8,49,49,-41,-9,-70,-72,-73,-74,-75,-76,-71,-83,-84,-15,-16,49,-77,-28,111,112,-36,-26,-27,-37,-25,]),'SEMICOLON':([10,11,12,13,15,16,22,24,25,26,28,29,30,31,32,33,34,35,45,53,54,55,56,57,58,59,60,62,72,73,76,77,91,92,102,],[50,-40,-46,-38,-45,-10,-7,-43,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,50,-17,-39,-44,-11,-12,-13,-14,-8,-42,-41,-47,-9,-70,-15,-16,-28,]),'LEFT_BRACKET':([13,16,22,25,26,28,29,30,31,32,33,34,35,53,56,57,58,59,60,76,77,91,92,98,102,115,],[52,-10,-7,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-17,-11,-12,-13,-14,-8,-9,-70,-15,-16,52,-28,52,]),'COLON':([22,25,26,28,29,30,31,32,33,34,35,37,60,66,76,77,88,102,105,109,114,],[-7,-5,-6,-62,-63,-64,-65,-66,-67,-68,-69,-29,-8,90,-9,-70,-30,-28,-36,-33,-37,]),'MULTI_KEYWORD':([28,29,30,31,32,33,34,35,36,46,47,48,49,63,77,78,79,80,81,82,83,84,85,93,101,],[-62,-63,-64,-65,-66,-67,-68,-69,-71,-78,-79,-80,-81,85,-70,-72,-73,-74,-75,-76,-71,-83,-84,85,-77,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressionList':([0,51,52,86,],[1,74,75,94,]),'optionalExpression':([0,38,51,52,86,],[2,67,2,2,2,]),'expression':([0,21,38,51,52,86,100,],[3,61,3,3,3,3,110,]),'commaExpression':([0,21,38,51,52,86,100,],[4,4,4,4,4,4,4,]),'commaExpressionContent':([0,21,38,51,52,86,100,],[5,5,5,5,5,5,5,]),'assignmentExpression':([0,21,38,39,40,51,52,86,100,],[6,6,6,68,69,6,6,6,6,]),'lowPrecedenceExpression':([0,21,38,39,40,51,52,86,100,],[7,7,7,7,7,7,7,7,7,]),'chainExpression':([0,21,38,39,40,41,51,52,86,100,],[8,8,8,8,8,70,8,8,8,8,]),'binaryExpression':([0,21,27,38,39,40,41,51,52,86,100,],[9,9,62,9,9,9,9,9,9,9,9,]),'chainedMessages':([0,9,21,38,39,40,41,51,52,86,100,],[10,45,10,10,10,10,10,10,10,10,10,]),'prefixUnaryExpression':([0,14,21,27,38,39,40,41,44,51,52,86,100,],[11,54,11,11,11,11,11,11,72,11,11,11,11,]),'chainedMessage':([0,9,21,38,39,40,41,50,51,52,86,100,],[12,12,12,12,12,12,12,73,12,12,12,12,]),'primaryExpression':([0,14,21,27,38,39,40,41,44,51,52,86,89,100,108,],[13,13,13,13,13,13,13,13,13,13,13,13,98,13,115,]),'anyPrefixOperator':([0,14,21,27,38,39,40,41,44,51,52,86,100,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'chainedMessageArguments':([0,9,21,38,39,40,41,50,51,52,86,100,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'primaryTerm':([0,14,17,18,19,20,21,27,38,39,40,41,44,51,52,86,89,100,106,108,],[16,16,56,57,58,59,16,16,16,16,16,16,16,16,16,16,16,16,114,16,]),'block':([0,13,14,17,18,19,20,21,27,38,39,40,41,44,51,52,86,89,98,100,106,108,115,],[22,53,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,53,22,22,22,53,]),'chainedMessageArgument':([0,9,15,21,38,39,40,41,50,51,52,86,100,],[24,24,55,24,24,24,24,24,24,24,24,24,24,]),'literal':([0,14,17,18,19,20,21,27,38,39,40,41,44,51,52,63,86,89,93,100,106,108,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,79,26,26,79,26,26,26,]),'lowPrecedenceOperator':([7,],[41,]),'optionalChainedMessages':([9,],[43,]),'anyOperator':([9,42,62,63,93,],[44,71,44,82,82,]),'literalArrayElements':([36,83,],[63,93,]),'optionalBlockClosureHeader':([37,],[64,]),'blockClosureHeader':([37,],[65,]),'blockArguments':([37,],[66,]),'literalArrayElement':([63,93,],[78,78,]),'anyKeyword':([63,93,],[81,81,]),'pragmaList':([64,],[86,]),'blockResultType':([66,],[87,]),'blockArgument':([66,],[88,]),'pragma':([86,],[95,]),'optionalBlockArgumentType':([90,],[99,]),'expandableIdentifier':([96,99,],[103,109,]),'pragmaKeywordArguments':([96,],[104,]),'pragmaKeywordArgument':([96,104,],[107,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressionList","S'",1,None,None,None),
  ('expressionList -> optionalExpression','expressionList',1,'p_expressionList_single','parser.py',6),
  ('expressionList -> expressionList DOT optionalExpression','expressionList',3,'p_expressionList_pair','parser.py',13),
  ('optionalExpression -> <empty>','optionalExpression',0,'p_optionalExpression_empty','parser.py',17),
  ('optionalExpression -> expression','optionalExpression',1,'p_optionalExpression_nonEmpty','parser.py',21),
  ('primaryTerm -> IDENTIFIER','primaryTerm',1,'p_primaryTerm_identifier','parser.py',25),
  ('primaryTerm -> literal','primaryTerm',1,'p_primaryTerm_literal','parser.py',29),
  ('primaryTerm -> block','primaryTerm',1,'p_primaryTerm_block','parser.py',33),
  ('primaryTerm -> LEFT_PARENT RIGHT_PARENT','primaryTerm',2,'p_primaryTerm_emptyTuple','parser.py',37),
  ('primaryTerm -> LEFT_PARENT expression RIGHT_PARENT','primaryTerm',3,'p_primaryTerm_parent','parser.py',41),
  ('primaryExpression -> primaryTerm','primaryExpression',1,'p_primaryExpression_primaryTerm','parser.py',45),
  ('primaryExpression -> QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quote','parser.py',49),
  ('primaryExpression -> QUASI_QUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiQuote','parser.py',53),
  ('primaryExpression -> QUASI_UNQUOTE primaryTerm','primaryExpression',2,'p_primaryExpression_quasiUnquote','parser.py',57),
  ('primaryExpression -> SPLICE primaryTerm','primaryExpression',2,'p_primaryExpression_splice','parser.py',61),
  ('primaryExpression -> primaryExpression LEFT_PARENT expressionList RIGHT_PARENT','primaryExpression',4,'p_primaryExpression_call','parser.py',65),
  ('primaryExpression -> primaryExpression LEFT_BRACKET expressionList RIGHT_BRACKET','primaryExpression',4,'p_primaryExpression_subscript','parser.py',69),
  ('primaryExpression -> primaryExpression block','primaryExpression',2,'p_primaryExpression_applyBlock','parser.py',73),
  ('blockClosureHeader -> blockArguments blockResultType BAR','blockClosureHeader',3,'p_blockClosureHeader','parser.py',77),
  ('optionalBlockClosureHeader -> blockClosureHeader','optionalBlockClosureHeader',1,'p_optionalBlockClosureHeader_notEmpty','parser.py',81),
  ('optionalBlockClosureHeader -> <empty>','optionalBlockClosureHeader',0,'p_optionalBlockClosureHeader_empty','parser.py',85),
  ('pragmaList -> <empty>','pragmaList',0,'p_pragmaList_empty','parser.py',89),
  ('pragmaList -> pragmaList pragma','pragmaList',2,'p_pragmaList_rest','parser.py',93),
  ('pragma -> LESS_THAN expandableIdentifier GREATER_THAN','pragma',3,'p_pragma_unary','parser.py',97),
  ('pragma -> LESS_THAN pragmaKeywordArguments GREATER_THAN','pragma',3,'p_pragma_keyword','parser.py',101),
  ('pragmaKeywordArgument -> KEYWORD primaryExpression','pragmaKeywordArgument',2,'p_pragmaKeywordArgument','parser.py',110),
  ('pragmaKeywordArguments -> pragmaKeywordArgument','pragmaKeywordArguments',1,'p_pragmaKeywordArguments_first','parser.py',114),
  ('pragmaKeywordArguments -> pragmaKeywordArguments pragmaKeywordArgument','pragmaKeywordArguments',2,'p_pragmaKeywordArguments_reset','parser.py',118),
  ('block -> LEFT_CURLY_BRACKET optionalBlockClosureHeader pragmaList expressionList RIGHT_CURLY_BRACKET','block',5,'p_block','parser.py',122),
  ('blockArguments -> <empty>','blockArguments',0,'p_blockArguments_empty','parser.py',131),
  ('blockArguments -> blockArguments blockArgument','blockArguments',2,'p_blockArguments_rest','parser.py',135),
  ('optionalBlockArgumentType -> <empty>','optionalBlockArgumentType',0,'p_optionalBlockArgumentType_empty','parser.py',139),
  ('optionalBlockArgumentType -> LEFT_PARENT expression RIGHT_PARENT','optionalBlockArgumentType',3,'p_optionalBlockArgumentType_nonEmpty','parser.py',143),
  ('blockArgument -> COLON optionalBlockArgumentType expandableIdentifier','blockArgument',3,'p_blockArgument','parser.py',147),
  ('blockResultType -> <empty>','blockResultType',0,'p_blockResultType_empty','parser.py',151),
  ('blockResultType -> COLON_COLON primaryExpression','blockResultType',2,'p_blockResultType_nonEmpty','parser.py',155),
  ('expandableIdentifier -> IDENTIFIER','expandableIdentifier',1,'p_expandableIdentifier_identifier','parser.py',159),
  ('expandableIdentifier -> QUASI_UNQUOTE primaryTerm','expandableIdentifier',2,'p_expandableIdentifier_quasiUnquote','parser.py',163),
  ('prefixUnaryExpression -> primaryExpression','prefixUnaryExpression',1,'p_prefixUnaryExpression_receiver','parser.py',167),
  ('prefixUnaryExpression -> anyPrefixOperator prefixUnaryExpression','prefixUnaryExpression',2,'p_prefixUnaryExpression_operation','parser.py',171),
  ('binaryExpression -> prefixUnaryExpression','binaryExpression',1,'p_binaryExpression_receiver','parser.py',175),
  ('binaryExpression -> binaryExpression anyOperator prefixUnaryExpression','binaryExpression',3,'p_binaryExpression_operation','parser.py',179),
  ('chainedMessageArgument -> KEYWORD binaryExpression','chainedMessageArgument',2,'p_chainedMessageArgument','parser.py',183),
  ('chainedMessageArguments -> chainedMessageArgument','chainedMessageArguments',1,'p_chainedMessageArguments_first','parser.py',187),
  ('chainedMessageArguments -> chainedMessageArguments chainedMessageArgument','chainedMessageArguments',2,'p_chainedMessageArguments_rest','parser.py',191),
  ('chainedMessage -> chainedMessageArguments','chainedMessage',1,'p_chainedMessage','parser.py',195),
  ('chainedMessages -> chainedMessage','chainedMessages',1,'p_chainedMessages_first','parser.py',199),
  ('chainedMessages -> chainedMessages SEMICOLON chainedMessage','chainedMessages',3,'p_chainedMessages_rest','parser.py',203),
  ('optionalChainedMessages -> <empty>','optionalChainedMessages',0,'p_optionalChainedMessages_empty','parser.py',207),
  ('optionalChainedMessages -> chainedMessages','optionalChainedMessages',1,'p_optionalChainedMessages_nonEmpty','parser.py',211),
  ('chainExpression -> binaryExpression optionalChainedMessages','chainExpression',2,'p_chainExpression_withReceiver','parser.py',215),
  ('chainExpression -> chainedMessages','chainExpression',1,'p_chainExpression_withoutReceiver','parser.py',219),
  ('lowPrecedenceExpression -> chainExpression','lowPrecedenceExpression',1,'p_lowPrecedenceExpression_first','parser.py',223),
  ('lowPrecedenceExpression -> lowPrecedenceExpression lowPrecedenceOperator chainExpression','lowPrecedenceExpression',3,'p_lowPrecedenceExpression_rest','parser.py',227),
  ('lowPrecedenceOperator -> COLON_COLON anyOperator','lowPrecedenceOperator',2,'p_lowPrecedenceOperator','parser.py',231),
  ('assignmentExpression -> lowPrecedenceExpression','assignmentExpression',1,'p_assignmentExpression_last','parser.py',235),
  ('assignmentExpression -> lowPrecedenceExpression ASSIGNMENT assignmentExpression','assignmentExpression',3,'p_assignmentExpression_previous','parser.py',239),
  ('commaExpressionContent -> assignmentExpression','commaExpressionContent',1,'p_commaExpressionContent_first','parser.py',243),
  ('commaExpressionContent -> commaExpressionContent COMMA assignmentExpression','commaExpressionContent',3,'p_commaExpressionContent_next','parser.py',247),
  ('commaExpression -> commaExpressionContent','commaExpression',1,'p_commaExpression_content','parser.py',251),
  ('commaExpression -> commaExpressionContent COMMA','commaExpression',2,'p_commaExpression_extraComma','parser.py',255),
  ('expression -> commaExpression','expression',1,'p_expression','parser.py',259),
  ('literal -> FLOAT','literal',1,'p_literal_float','parser.py',263),
  ('literal -> INTEGER','literal',1,'p_literal_integer','parser.py',267),
  ('literal -> CHARACTER','literal',1,'p_literal_character','parser.py',271),
  ('literal -> STRING','literal',1,'p_literal_string','parser.py',275),
  ('literal -> SYMBOL_IDENTIFIER','literal',1,'p_literal_symbolIdentifier','parser.py',279),
  ('literal -> SYMBOL_KEYWORD','literal',1,'p_literal_symbolKeyword','parser.py',283),
  ('literal -> SYMBOL_OPERATOR','literal',1,'p_literal_symbolOperator','parser.py',287),
  ('literal -> SYMBOL_STRING','literal',1,'p_literal_symbolString','parser.py',291),
  ('literal -> LITERAL_ARRAY_LEFT_PARENT literalArrayElements RIGHT_PARENT','literal',3,'p_literal_literalArray','parser.py',295),
  ('literalArrayElements -> <empty>','literalArrayElements',0,'p_literalArrayElements_empty','parser.py',299),
  ('literalArrayElements -> literalArrayElements literalArrayElement','literalArrayElements',2,'p_literalArrayElements_nonEmpty','parser.py',303),
  ('literalArrayElement -> literal','literalArrayElement',1,'p_literalArrayElement_literal','parser.py',307),
  ('literalArrayElement -> IDENTIFIER','literalArrayElement',1,'p_literalArrayElement_identifer','parser.py',311),
  ('literalArrayElement -> anyKeyword','literalArrayElement',1,'p_literalArrayElement_keyword','parser.py',315),
  ('literalArrayElement -> anyOperator','literalArrayElement',1,'p_literalArrayElement_operator','parser.py',319),
  ('literalArrayElement -> LEFT_PARENT literalArrayElements RIGHT_PARENT','literalArrayElement',3,'p_literalArrayElement_array','parser.py',323),
  ('anyOperator -> OPERATOR','anyOperator',1,'p_anyOperator','parser.py',327),
  ('anyOperator -> BAR','anyOperator',1,'p_anyOperator','parser.py',328),
  ('anyOperator -> LESS_THAN','anyOperator',1,'p_anyOperator','parser.py',329),
  ('anyOperator -> GREATER_THAN','anyOperator',1,'p_anyOperator','parser.py',330),
  ('anyPrefixOperator -> OPERATOR','anyPrefixOperator',1,'p_anyPrefixOperator','parser.py',334),
  ('anyKeyword -> KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',338),
  ('anyKeyword -> MULTI_KEYWORD','anyKeyword',1,'p_anyKeyword','parser.py',339),
]
