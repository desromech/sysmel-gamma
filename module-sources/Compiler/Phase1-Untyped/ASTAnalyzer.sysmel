Reflection Semantic ASTAnalyzer __type__
    withSelector: #forEnvironment: addMethod: {:(Reflection Semantic ASTAnalyzer __type__)self :(Reflection Semantic EvaluationEnvironment)environment :: self |
        self basicNewWithNamedSlots: #{
            environment: environment.
            typeInferenceEnvironment: Reflection Semantic AutoTypeInferenceEnvironment basicNew.
        }
    };
    withSelector: #forEnvironment:withExpectedType: addMethod: {:(Reflection Semantic ASTAnalyzer __type__)self :(Reflection Semantic EvaluationEnvironment)environment :(Type)expectedType :: self |
        self basicNewWithNamedSlots: #{
            environment: environment.
            typeInferenceEnvironment: (Reflection Semantic ExpectedTypeInferenceEnvironment basicNewWithNamedSlots: #{
                expectedType: expectedType
            }).
        }
    };
    withSelector: #forScriptEvaluationScope: addMethod: {:(Reflection Semantic ASTAnalyzer __type__)self :(Reflection Semantic ScriptEvaluationScope)scope :: self |
        self forEnvironment: (Reflection Semantic EvaluationEnvironment forScriptEvaluationScope: scope)
    };
    withSelector: #forDefaultEnvironment addMethod: {:(Reflection Semantic ASTAnalyzer __type__)self :: self |
        self forEnvironment: Reflection Semantic EvaluationEnvironment default
    }.

Reflection Semantic ASTAnalyzer
    withSelector: #makeSemanticAnalysisError:at: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(String)errorMessage :(Reflection SourcePosition)sourcePosition :: Reflection AST SemanticErrorNode |
        Reflection AST SemanticErrorNode basicNewWithNamedSlots: #{
            analyzedType: CompilationError.
            sourcePosition: sourcePosition.
            message: errorMessage.
        }.
    };
    withSelector: #makeSemanticAnalysisError:atNode: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(String)errorMessage :(Reflection AST Node)node :: Reflection AST SemanticErrorNode |
        Reflection AST SemanticErrorNode basicNewWithNamedSlots: #{
            analyzedType: (if: node analyzedType isNil then: CompilationError else: node analyzedType _).
            sourcePosition: node sourcePosition.
            message: errorMessage.
            innerNode: node
        }.
    };

    withSelector: #computeBranchResultTypeOf:with: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(Type)leftType :(Type)rightType :: Type |
        if: leftType == rightType then: {
            leftType
        } else: {
            Void
        }
    };
    withSelector: #addImplicitCoercionTo:node: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(Type)targetType :(Reflection AST Node)node :: Reflection AST Node |
        node analyzedType _ addImplicitCoercionToNode: node targetType: targetType with: self
    };
    withSelector: #withEnvironment:do: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(Reflection Semantic EvaluationEnvironment)environment :(Void => Void)aBlock :: Void |
        let: #oldEnvironment with: self environment.
        self environment: environment.

        aBlock().
        self environment: oldEnvironment.

        void
    };
    withSelector: #analyzeNodeIfNeeded:withEnvironment: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(Reflection AST Node)node :(Reflection Semantic EvaluationEnvironment)environment :: Reflection AST Node |
        let: #oldEnvironment with: self environment.
        self environment: environment.

        let: #analyzedNode with: (self analyzeNodeIfNeededWithCurrentExpectedType: node).
        self environment: oldEnvironment.

        analyzedNode
    };
    withSelector: #analyzeNodeIfNeeded:withEnvironment:expectedType: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(Reflection AST Node)node :(Reflection Semantic EvaluationEnvironment)environment :(Type)expectedType :: Reflection AST Node |
        let: #oldEnvironment with: self environment.
        self environment: environment.

        let: #analyzedNode with: (self analyzeNodeIfNeeded: node withExpectedType: expectedType).
        self environment: oldEnvironment.

        analyzedNode
    };
    withSelector: #analyzeNodeIfNeeded:withTypeInferenceEnvironment: addMethod: {:(Reflection Semantic ASTAnalyzer)self :(Reflection AST Node)node :(Reflection Semantic TypeInferenceEnvironment)typeInferenceEnvironment :: Reflection AST Node |
        let: #oldTypeInferenceEnvironment with: (self typeInferenceEnvironment).
        self typeInferenceEnvironment: typeInferenceEnvironment.

        let: #analyzedNode with: (self analyzeNodeIfNeededWithCurrentExpectedType: node).
        self typeInferenceEnvironment: oldTypeInferenceEnvironment.
        analyzedNode
    }.
