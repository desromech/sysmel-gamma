if: true then: {
__BootstrapCompiler__
    print: false;
    print: true;
    print: nil;
    print: Boolean basicNew;
    print: (Boolean basicNew: false);
    print: (Boolean basicNew: true);

    print: 1 + 1;
    print: 2 * 3;
    print: 6 // 3;

    print: 2 = 2;

    print: Int32 -- Int32;
    print: Int32 -- Int32 -- Int32;
    print: Void => Void;
    print: (Int32 -- Int32) => Void;
    print: (Int32 -- Int32 -- Int32) => Void;
    print: Float32 -- Int32 -- Float64;

    print: "Some number: " -- 1 asString;
    print: ("Some number: {0} " format: (1 asString,));

    print: ((Integer array: 3sz) basicNewWithSlots: (1, 2, 3)) asArraySlice;
    print: (((Integer array: 3sz) basicNewWithSlots: (1, 2, 3)) asArraySlice collect: {:(Integer)x :: Size |
        x sz
    });
    print: (((Integer array: 3sz) basicNewWithSlots: (1, 2, 3)) asArraySlice collectWithIndex: {:(Integer)x :(Size)index :: Size |
        index
    });

    print: Reflection SourcePosition basicNew;
    print: (Reflection AST Node basicNewWithNamedSlots: #{
        sourcePosition: Reflection SourcePosition basicNew
    });
    print: Int32 basicNew;
    print: (Int32 basicNew: -42);
    print: Reflection Semantic ASTAnalyzer __type__;

    print: (`'1 analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'1 analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'(1 + 1) analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'(1 + 1) analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'{} analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'{} analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'{1 . 1 + 1} analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'{1 . 1 + 1} analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'(1 negated) analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'(if: true then: 1 else: 2) analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'(if: true then: 1 else: 2) analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'(if: false then: 1 else: 2) analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'(if: true then: 1) analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'(if: false then: 1) analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'{let: #testVar with: 1 . testVar} analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'{let: #testVar with: 1 . testVar} analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    ##print: (`'(let: #testVar type: Int32 with: 1s32) analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: (`'(let testVar := 42) analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    print: nil isNil;
    print: nil isNotNil;

    print: (`'{:(Int32)a :(Int32)b :: Int32 | a + b } analyzeNodeIfNeededWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'{:(Int32)a :(Int32)b :: Int32 | a + b } analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    print: (`'{:(Int32)a :(Int32)b :: Int32 | a + b } analyzeAndEvaluateNodeWith: Reflection Semantic ASTAnalyzer forDefaultEnvironment)(1i32, 2i32).

if: true then: {
    __BootstrapCompiler__ print: "then branch"
} else: {
    __BootstrapCompiler__ print: "else branch"
}.
} else: {}.
