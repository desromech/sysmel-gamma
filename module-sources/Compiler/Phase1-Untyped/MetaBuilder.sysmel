__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #MetaBuilderInstanceNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST LiteralValueNode publicSlots: #{});

    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #MetaProgramming;
    addBindingNamed: #ProgramEntityMetaBuilderAttributes with: (__TypeBuilder__ newRecordTypeWith: #{
        visibility: Std Reflection ProgramEntityVisibility.
    });

    addBindingNamed: #MetaBuilder with: (__TypeBuilder__ newGCClassWithSuperclass: Object publicSlots: #{
        metaContext: MacroInvocationContext.
        programEntityAttributes: Std MetaProgramming ProgramEntityMetaBuilderAttributes.
        finishResultNode: Std Reflection AST Node optional.
        hasFinished: Boolean.
    });
    addBindingNamed: #NamedMetaBuilder with: (__TypeBuilder__ newGCClassWithSuperclass: Std MetaProgramming MetaBuilder publicSlots: #{
        hasSeenName: Boolean.
        name: Object optional.
        nameExpression: Std Reflection AST Node optional.
    }).

Std Reflection AST Node
    withSelector: #isMetaBuilderInstanceNode addMethod: {:(Std Reflection AST MetaBuilderInstanceNode)self :: Boolean |
        false
    }.

Std Reflection AST MetaBuilderInstanceNode
    withSelector: #asCollapsedNodeWith: addMethod: {:(Std Reflection AST Node)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        analyzer analyzeNodeIfNeededWithCurrentExpectedType: self value concretizeMetaBuilder
    };
    withSelector: #isMetaBuilderInstanceNode addMethod: {:(Std Reflection AST MetaBuilderInstanceNode)self :: Boolean |
        true
    }.

Function
    withSelector: #hasMetaBuilderFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #metaBuilder
    }.

Std MetaProgramming MetaBuilder __type__
    withSelector: #withContext: addMethod: {:(Std MetaProgramming MetaBuilder __type__)self :(MacroInvocationContext)context :: self |
        self basicNewWithNamedSlots: #{
            metaContext: context
        }
    };
    withSelector: #constructInheritingStateFrom: addMethod: {:(Std MetaProgramming MetaBuilder __type__)self :(Std MetaProgramming MetaBuilder)otherMetaBuilder :: self |
         self basicNewWithNamedSlots: #{
            metaContext: otherMetaBuilder metaContext.
            programEntityAttributes: otherMetaBuilder programEntityAttributes.
        }
    };
    withSelector: #nodeWithContext: addMethod: {:(Std MetaProgramming MetaBuilder __type__)self :(MacroInvocationContext)context :: Std Reflection AST MetaBuilderInstanceNode |
       (self withContext: context) makeInstanceNode
    };
    withSelector: #analyzeMessageSendNode:with: addMethod: {:(Std MetaProgramming MetaBuilder __type__)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: (if: node receiver isNotNil then: node receiver _ isMetaBuilderInstanceNode else: false) then: {
            node receiver _ evaluateLiteralValue analyzeMessageSendNode: node with: analyzer
        } else: {
            self analyzeNormalMessageSendNode: node with: analyzer
        }
    };
    withSelector: #analyzeMessageChainNode:with: addMethod: {:(Type)self :(Std Reflection AST MessageChainNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: node receiver isMetaBuilderInstanceNode then: {
            node receiver evaluateLiteralValue analyzeMessageChainNode: node with: analyzer
        } else: {
            node expandAndAnalyzeNodeWith: analyzer
        }
    }.

Std Reflection AST MessageChainNode
    withSelector: #replaceFirstChainedMessageWithNewReceiver: addMethod: {:(Std Reflection AST MessageChainNode)self :(Std Reflection AST Node)newReceiver :: Std Reflection AST Node |
        if: (self chainedMessages size <= 1sz) then: {
            newReceiver
        } else: {
            if: self chainedMessages size = 2sz then: {
                self chainedMessages second asMessageSendNodeWithReceiver: newReceiver
            } else: {
                self shallowCopy
                    receiver: newReceiver;
                    chainedMessages: (self chainedMessages allButFirst);
                    yourself
            }
        }
    }.

Std MetaProgramming MetaBuilder
    withSelector: #makeInstanceNode addMethod: {:(Std MetaProgramming MetaBuilder)self :: Std Reflection AST MetaBuilderInstanceNode |
        Std Reflection AST MetaBuilderInstanceNode basicNewWithNamedSlots: #{
            sourcePosition: self metaContext sourcePosition.
            value: self.
            analyzedType: self __type__.
        }
    };

    withSelector: #analyzeMessageSendNode:with: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        self analyzeMetaBuilderDirectMessageNode: node with: analyzer
    };
    withSelector: #analyzeMetaBuilderDirectMessageNode:with: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: node selector isLiteralValueNode then: {
            let: #selector with: (node selector evaluateLiteralValue).
            let: #method with: (self __type__ lookupSelector: selector).

            if: (if: method isNotNil then: method hasMetaBuilderFlag else: false) then: {
                method run: (node selector analyzeAndEvaluateNodeWith: analyzer)
                    with: node arguments
                    in: self.

                if: self hasFinished then: {
                    analyzer analyzeNodeIfNeededWithCurrentExpectedType: self emitResultNode
                } else: {
                    node receiver _
                }
            } else: {
                self analyzeMetaBuilderFailedMessageNode: node with: analyzer
            }
        } else: {
            self analyzeMetaBuilderFailedMessageNode: node with: analyzer
        }
    };
    withSelector: #analyzeMetaBuilderFailedMessageNode:with: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        analyzer analyzeNodeIfNeededWithCurrentExpectedType: (node shallowCopy
            receiver: self emitResultNode;
            yourself
        )
    };
    withSelector: #analyzeMessageChainNode:with: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std Reflection AST MessageChainNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        self analyzeMetaBuilderDirectMessageChainNode: node with: analyzer
    };
    withSelector: #analyzeMetaBuilderDirectMessageChainNode:with: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std Reflection AST MessageChainNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #firstMessage with: node chainedMessages first.
        let: #firstMessageNode with: (firstMessage asMessageSendNodeWithReceiver: node receiver).
        let: #firstAnalyzedMessageNode with: (analyzer analyzeNodeIfNeededWithDirectAutoType: firstMessageNode).
        let: #shouldContinue with: (firstAnalyzedMessageNode isMetaBuilderInstanceNode).

        if: shouldContinue then: {
            analyzer analyzeNodeIfNeededWithCurrentExpectedType: (node replaceFirstChainedMessageWithNewReceiver: firstAnalyzedMessageNode)
        } else: {
            __BootstrapCompiler__ error: "TODO: expand aborted metabuilder message chain"
            ##node expandAndAnalyzeNodeWith: analyzer
        }.
    };
    withSelector: #emitResultNode addMethod: {:(Std MetaProgramming MetaBuilder)self :: Std Reflection AST Node |
        if: self finishResultNode isNotNil then: {
            self finishResultNode _
        } else: {
            self concretizeMetaBuilder
        }
    };
    withSelector: #concretizeMetaBuilder addMethod: {:(Std MetaProgramming MetaBuilder)self :: Std Reflection AST Node |
        Std Reflection AST LiteralValueNode basicNewWithNamedSlots: #{
            sourcePosition: self metaContext sourcePosition.
            value: void.
            analyzedType: Void
        }
    };
    withSelector: #delegateToMetaBuilderClass: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std MetaProgramming MetaBuilder __type__)metaBuilderClass :: Void |
        self delegateToMetaBuilder: (metaBuilderClass constructInheritingStateFrom: self)
    };
    withSelector: #delegateToMetaBuilder: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std MetaProgramming MetaBuilder)delegatedMetaBuilder :: Void |
        self finishWithNode: delegatedMetaBuilder makeInstanceNode.
        void
    };
    withSelector: #finishWithNode: addMethod: {:(Std MetaProgramming MetaBuilder)self :(Std Reflection AST Node)resultNode :: Void |
        self hasFinished: true.
        self finishResultNode: resultNode.
        void
    };
    withSelector: #finish addMethod: {:(Std MetaProgramming MetaBuilder)self :: Void |
        self hasFinished: true.
        void
    }.

Std MetaProgramming NamedMetaBuilder
    withSelector: #analyzeMessageSendNode:with: addMethod: {:(Std MetaProgramming NamedMetaBuilder)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #selectorNode with: node selector.
        if: self hasSeenName not & selectorNode isLiteralValueNode & node arguments isEmpty then: {
            let: #selectorValue with: (selectorNode evaluateNodeWith: analyzer environment).

            self
                hasSeenName: true;
                name: selectorValue;
                nameExpression: selectorNode.
            node receiver _
        } else: {
            self analyzeMetaBuilderDirectMessageNode: node with: analyzer
        }
    }.
