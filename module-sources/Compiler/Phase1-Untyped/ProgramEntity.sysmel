__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #ProgramEntityDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Reflection AST Node publicSlots: #{
        analyzedProgramEntity: Reflection ProgramEntity optional
    }).

Reflection ProgramEntity
    withSelector: #canHaveTypes addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveMethods addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveFunctions addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveFields addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveGlobals addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveNamespaces addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #lookupPublicSymbol: addMethod: {:(Reflection ProgramEntity)self :(Object)symbol :: Reflection SymbolBinding optional |
        nil
    };
    withSelector: #lookupScopeSymbol: addMethod: {:(Reflection ProgramEntity)self :(Object)symbol :: Reflection SymbolBinding optional |
        nil
    };
    withSelector: #asReceiverType addMethod: {:(Reflection ProgramEntity)self :: Type optional |
        nil
    };
    withSelector: #setSymbol:visibility:immutableValue: addMethod: {:(Reflection ProgramEntity)self :(Object)symbol :(Reflection ProgramEntityVisibility)visibility :(AnyValue)immutableValue :: Void |
        __BootstrapCompiler__ subclassResponsibility
    }.

Reflection ProgramEntity __type__
    withSelector: #analyzeUnboundMessageSendNode:with: addMethod: {:(Reflection ProgramEntity __type__)self :(Reflection AST MessageSendNode)node :(Reflection Semantic ASTAnalyzer)analyzer :: Reflection AST Node |
        if: (if: node arguments isEmpty then: (if: node receiver isNotNil then:
                (if: node receiver _ isLiteralValueNode
                then: node selector isLiteralValueNode
                else: false) else: false)
            else: false) then: {
            let: #receiver with: (node receiver _ evaluateLiteralValue).
            let: #selector with: (node selector evaluateLiteralValue).
            let: #publicBinding with: (receiver lookupPublicSymbol: selector).

            if: publicBinding isNotNil then: {
                publicBinding _ analyzeMessageSendNode: node with: analyzer
            } else: {
                self analyzeUnboundOrDynamicMessageSendNode: node with: analyzer
            }
        } else: {
            self analyzeUnboundOrDynamicMessageSendNode: node with: analyzer
        }.
    }.