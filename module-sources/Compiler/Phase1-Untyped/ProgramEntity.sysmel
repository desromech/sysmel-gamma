__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #ProgramEntityDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Reflection AST Node publicSlots: #{
        analyzedProgramEntity: Reflection ProgramEntity optional
    }).

Reflection ProgramEntity
    withSelector: #canHaveTypes addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveMethods addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveFunctions addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveFields addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveGlobals addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveNamespaces addMethod: {:(Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #lookupPublicSymbol: addMethod: {:(Reflection ProgramEntity)self :(Object)symbol :: Reflection SymbolBinding optional |
        nil
    };
    withSelector: #lookupScopeSymbol: addMethod: {:(Reflection ProgramEntity)self :(Object)symbol :: Reflection SymbolBinding optional |
        nil
    };
    withSelector: #asReceiverType addMethod: {:(Reflection ProgramEntity)self :: Type optional |
        nil
    };
    withSelector: #setSymbol:visibility:immutableValue: addMethod: {:(Reflection ProgramEntity)self :(Object)symbol :(Reflection ProgramEntityVisibility)visibility :(AnyValue)immutableValue :: Void |
        __BootstrapCompiler__ subclassResponsibility
    }.