## This is the Phase1, where the core basic type system is defined.
## In this stage the compiler environment itself is completely empty,
## except for a single reference to the bootstrap compiler itself.

## Add opaque definitions for the basic literal types.
__BootstrapCompiler__
    addPrimitiveGCTypeNamed: #String;
    addPrimitiveGCTypeNamed: #Symbol;
    addPrimitiveGCTypeNamed: #Array;
    addPrimitiveGCTypeNamed: #Association;
    addPrimitiveGCTypeNamed: #Dictionary;

    addPrimitiveGCTypeNamed: #Integer;
    addPrimitiveGCTypeNamed: #Float;

    ## The primitive types.
    addPrimitiveBooleanTypeNamed: #Boolean8 size: 1 alignment: 1;
    addPrimitiveBooleanTypeNamed: #Boolean16 size: 2 alignment: 2;
    addPrimitiveBooleanTypeNamed: #Boolean32 size: 4 alignment: 4;
    addBasicType: #Boolean withName: Boolean8;

    addPrimitiveUnsignedIntegerTypeNamed: #UInt8 size: 1 alignment: 1;
    addPrimitiveUnsignedIntegerTypeNamed: #UInt16 size: 2 alignment: 2;
    addPrimitiveUnsignedIntegerTypeNamed: #UInt32 size: 4 alignment: 4;
    addPrimitiveUnsignedIntegerTypeNamed: #UInt64 size: 8 alignment: 8;

    addPrimitiveSignedIntegerTypeNamed: #Int8 size: 1 alignment: 1;
    addPrimitiveSignedIntegerTypeNamed: #Int16 size: 2 alignment: 2;
    addPrimitiveSignedIntegerTypeNamed: #Int32 size: 4 alignment: 4;
    addPrimitiveSignedIntegerTypeNamed: #Int64 size: 8 alignment: 8;

    addPrimitiveCharacterTypeNamed: #Char8 size: 1 alignment: 1;
    addPrimitiveCharacterTypeNamed: #Char16 size: 2 alignment: 2;
    addPrimitiveCharacterTypeNamed: #Char32 size: 4 alignment: 4;
    addBasicType: #Character withName: Char32;

    addPrimitiveUnsignedIntegerTypeNamed: #Float16 size: 2 alignment: 2;
    addPrimitiveUnsignedIntegerTypeNamed: #Float32 size: 4 alignment: 4;
    addPrimitiveUnsignedIntegerTypeNamed: #Float64 size: 8 alignment: 8.

## The AST nodes.
__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #BootstrapCompiler;
    enterNamespaceNamed: #AST;
    addGCClassNamed: #SourceCollection instanceVariables: #{};
    addGCClassNamed: #SourcePosition instanceVariables: #{};
    addGCClassNamed: #Node instanceVariables: #{
        sourcePosition: BootstrapCompiler AST SourcePosition
    };
    addGCClassNamed: #ArgumentDefinitionNode superclass: BootstrapCompiler AST Node instanceVariables: #{
        name: BootstrapCompiler AST Node.
        type: BootstrapCompiler AST Node.
    };
    addGCClassNamed: #CleanUpScopeNode superclass: BootstrapCompiler AST Node instanceVariables: #{
        body: BootstrapCompiler AST Node
    };
    addGCClassNamed: #SequenceNode superclass: BootstrapCompiler AST Node instanceVariables: #{
        ##expressions: BootstrapCompiler AST Node[]
    };
    addGCClassNamed: #SemanticErrorNode superclass: BootstrapCompiler AST Node instanceVariables: #{
        message: String
    }.

## At the end of this phase we can enable the actual type system.
__BootstrapCompiler__
    enableTypeSystem