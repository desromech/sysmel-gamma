__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #BlockClosureNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST Node publicSlots: #{
        arguments: Std Reflection AST Node sharedArraySlice.
        resultTypeExpression: Std Reflection AST Node optional.
        body: Std Reflection AST Node.
        analyzedBody: Std Reflection AST Node optional.
        analyzedResultTypeExpression: Std Reflection AST Node optional.
        analyzedResultType: Type optional.
        argumentAnalysisScope: Std Reflection Semantic LexicalScope optional.
        hasGenericForAllArguments: Boolean.
        hasDependentArguments: Boolean.
        hasCompileTimeDefinedType: Boolean.
        hasLazyBodyAnalysis: Boolean.
        isMacro: Boolean.
        isMessageMethod: Boolean.
    }).

Std Reflection BlockClosure
    definePublicSlots: #{
        functionType: Function __type__ optional.
        node: Std Reflection AST BlockClosureNode optional.
        environment: Std Reflection Semantic EvaluationEnvironment.
        isMacro: Boolean.
        isMessageMethod: Boolean.
    }.

Std Reflection AST BlockClosureNode
    withSelector: #defaultArgumentType addMethod: {:(Std Reflection AST BlockClosureNode)self :: Type optional |
        if: self isMacro then: {
            Std Reflection AST Node
        } else: {
            nil
        }
    };
    withSelector: #defaultResultType addMethod: {:(Std Reflection AST BlockClosureNode)self :: Type optional |
        if: self isMacro then: {
            Std Reflection AST Node
        } else: {
            nil
        }
    };
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST BlockClosureNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #analyzedNode with: self shallowCopy.

        let: #argumentAnalysisScope with: analyzer environment lexicalScope makeChildLexicalScope.
        let: #argumentAnalysisEnvironment with: (analyzer environment copyWithLexicalScope: argumentAnalysisScope) copyWithEmptyCleanUpScope.
        let: #hasError with: (Boolean valueBox with: false).

        ## Perform the analysis of the arguments.
        analyzer withEnvironment: argumentAnalysisEnvironment do: { :: Void |
            ## Analyze the arguments.
            analyzedNode arguments: (analyzedNode arguments collect: {:argumentNode :: Std Reflection AST Node |
                let: #analyzedArgument with: (argumentNode analyzeArgumentDefinitionNodeWith: analyzer withDefaultArgumentType: analyzedNode defaultArgumentType).
                if: analyzedArgument isErrorNode then: {
                    hasError _: true
                } else: {void}.

                analyzedArgument
            }).

            ## Analyze the result type.
            if: analyzedNode resultTypeExpression isNotNil then: {
                analyzedNode analyzedResultTypeExpression: (analyzer analyzeNodeIfNeeded: analyzedNode resultTypeExpression _ withExpectedType: Type)
            } else: {
                let: #defaultResultType with: self defaultResultType.
                if: defaultResultType isNotNil then: {
                    analyzedNode analyzedResultTypeExpression: (Std Reflection AST LiteralValueNode#{
                        sourcePosition: self sourcePosition.
                        value: defaultResultType _.
                        analyzedType: defaultResultType _ __type__
                    }).
                } else: {
                    analyzedNode analyzedResultTypeExpression: (analyzer makeSemanticAnalysisError: "Result type specification is required." at: self sourcePosition).
                }.
            }.

            if: analyzedNode analyzedResultTypeExpression _ isErrorNode then: {
                hasError _: true
            } else: {void}.

            void
        }.

        if: hasError _ then: {
            analyzedNode
                argumentAnalysisScope: argumentAnalysisScope;
                hasCompilationError: true.
                analyzedType: CompilationError;
                yourself
        } else: {
            analyzedNode
                argumentAnalysisScope: argumentAnalysisScope;
                analyzeCompileTimeTypeConstraintsWith: argumentAnalysisEnvironment;
                analyzedType: (analyzedNode computeFunctionTypeWith: argumentAnalysisEnvironment).

            if: self hasLazyBodyAnalysis not then: {
                analyzedNode ensureBodyAnalysis.
            } else: { void }.

            analyzedNode
        }.
    };
    withSelector: #ensureBodyAnalysis addMethod: {:(Std Reflection AST BlockClosureNode)self :: Void |
        if: (if: self hasCompileTimeDefinedType then: self analyzedBody isNil else: false) then: {
            let: #analyzer with: (Std Reflection Semantic ASTAnalyzer forEnvironment: (Std Reflection Semantic EvaluationEnvironment forLexicalScope: self argumentAnalysisScope _)).
            self analyzedBody: (analyzer analyzeNodeIfNeeded: self body withExpectedType: self analyzedResultType _).
            void
        } else: { void }
    };
    withSelector: #enqueuePendingBodyAnalysis addMethod: {:(Std Reflection AST BlockClosureNode)self :: Void |
        if: self analyzedBody isNil then: {
            __BootstrapCompiler__ enqueuePendingEvaluation: {:: Void | self ensureBodyAnalysis }
        } else: { void }
    };
    withSelector: #analyzeCompileTimeTypeConstraintsWith: addMethod: {:(Std Reflection AST BlockClosureNode)self :(Std Reflection EvaluationEnvironment)environment :: Void |
        self
            hasGenericForAllArguments: false;
            hasDependentArguments: false;
            hasCompileTimeDefinedType: true.

        self arguments do: {:argumentNode :: Void |
            if: argumentNode isGenericForallArgument then: {
                self hasGenericForAllArguments: true.
            } else: {void}.

            let: #argumentVariable with: argumentNode getArgumentVariable.
            argumentVariable isAnalyzingSignature: false.

            if: argumentVariable hasDependentTypeAccess then: {
                self hasDependentArguments: true
            } else: { void }.

            if: (argumentNode analyzedTypeExpression _ isCompileTimeDirectlyEvaluableWith: environment) then: {
                argumentNode analyzedTypeExpression: (argumentNode analyzedTypeExpression _ optimizeViaCompileTimeEvaluationWith: environment)
            } else: {
                self hasCompileTimeDefinedType: false
            }.

            void
        }.

        if: (self analyzedResultTypeExpression _ isCompileTimeDirectlyEvaluableWith: environment) then: {
            self analyzedResultTypeExpression: (self analyzedResultTypeExpression _ optimizeViaCompileTimeEvaluationWith: environment)
        } else: {
            self hasCompileTimeDefinedType: false
        }.

        void
    };
    withSelector: #computeFunctionTypeWith: addMethod: {:(Std Reflection AST BlockClosureNode)self :(Std Reflection EvaluationEnvironment)environment :: Type |
        if: self hasCompileTimeDefinedType then: {
            let: #argumentTypes with: (self arguments collect: {:argumentNode :: Type |
                argumentNode analyzedTypeExpression _ evaluateNodeWith: environment
            }).

            let: #resultType with: (self analyzedResultTypeExpression _ evaluateNodeWith: environment).
            self analyzedResultType: resultType.
            Function newSimpleFunctionTypeWithArguments: argumentTypes resultType: resultType
        } else: {
            Function newDependentFunctionTypeWithEnvironment: environment arguments: self arguments resultType: self analyzedResultTypeExpression.
        }.
    };
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST BlockClosureNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        let: #blockClosure with: (Std Reflection BlockClosure#{
            functionType: self analyzedType _.
            node: self.
            environment: evaluationEnvironment.
            isMacro: self isMacro.
            isMessageMethod: self isMessageMethod.
        }).

        self enqueuePendingBodyAnalysis.

        self analyzedType _ newWithImplementation: blockClosure
    };
    withSelector: #evaluateWithEnvironment:arguments: addMethod: {:(Std Reflection AST BlockClosureNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :(AnyValue arraySlice)arguments :: AnyValue |
        self ensureBodyAnalysis.

        if: self analyzedBody isNotNil then: {
            let: #evaluationScope with: environment lexicalScope makeChildLexicalScope.
            let: #evaluationEnvironment with: (environment copyWithLexicalScope: evaluationScope) copyWithEmptyCleanUpScope.
            let: #currentArgumentIndex with: (Size valueBox with: 0sz).

            self arguments do: {:(Std Reflection AST Node)argumentNode :: Void |
                let: #argumentVariable with: argumentNode getArgumentVariable.

                if: argumentNode isGenericForallArgument then: {
                    void.
                } else: {
                    if: currentArgumentIndex _ < arguments size then: {
                        let: #argumentValue with: (arguments basicAt: currentArgumentIndex _).
                        evaluationScope setSymbol: argumentVariable immutableValue: argumentValue.
                        currentArgumentIndex _: currentArgumentIndex _ + 1sz
                    } else: {
                        __BootstrapCompiler__ error: "Missing arguments required for function evaluation."
                    }
                }.
                void
            }.

            if: currentArgumentIndex _ < arguments size then: {
                __BootstrapCompiler__ error: "Excessive arguments passed to function evaluation."
            } else: {
                void
            }.

            self analyzedBody _ evaluateNodeWith: evaluationEnvironment
        } else: {
            __BootstrapCompiler__ printLine: "TODO: BlockClosureNode evaluateWithEnvironment:arguments: handle generic case generic case and or dependent case.".
            __BootstrapCompiler__ printLine: arguments.
            __BootstrapCompiler__ primitiveFailed
        }.
    }.

Std Reflection BlockClosure
    withSelector: #run:with:in: addMethod: {:(Std Reflection BlockClosure)self :(AnyValue)selector :(AnyValue arraySlice)arguments :(AnyValue)receiver :: AnyValue |
        __BootstrapCompiler__ printLine: "TODO: BlockClosure run:with:in:".
        __BootstrapCompiler__ printLine: selector.
        __BootstrapCompiler__ printLine: arguments.
        __BootstrapCompiler__ printLine: receiver.
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #evaluateWithArguments: addMethod: {:(Std Reflection BlockClosure)self :(AnyValue arraySlice)arguments :: AnyValue |
        self node _ evaluateWithEnvironment: self environment arguments: arguments
    };
    withSelector: #hasMethodFlag: addMethod: {:(Std Reflection BlockClosure)self :(Symbol)flag :: Boolean |
        if: flag == #macro then: {
            self isMacro
        } else: {
            if: flag == #messageMethod then: {
                self isMessageMethod
            } else: {
                false
            }
        }
    }.