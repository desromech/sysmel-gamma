__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #MethodDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST ProgramEntityDefinitionNode publicSlots: #{
        selectorExpression: Std Reflection AST Node optional.
        arguments: Std Reflection AST Node sharedArraySlice.
        resultTypeExpression: Std Reflection AST Node optional.
        body: Std Reflection AST Node optional.
        visibility: Std Reflection ProgramEntityVisibility.
        analyzedSelector: Object optional.
        analyzedOwnerProgramEntity: Std Reflection ProgramEntity optional.
        analyzedBlockClosureNode: Std Reflection AST Node optional.
    }).

Std Reflection AST MethodDefinitionNode
    withSelector: #makeImplicitArgumentsFor: addMethod: {:(Std Reflection AST MethodDefinitionNode)self :(Std Reflection ProgramEntity)programEntity :: Std Reflection AST Node sharedArraySlice |
        let: #receiverType with: programEntity asReceiverType.
        if: receiverType isNil then: {
            Std Reflection AST Node sharedArraySlice basicNew
        } else: {
            Std Reflection AST Node sharedArraySlice with:
                ((Std Reflection AST ArgumentDefinitionNode withName: #self type: receiverType _ at: self sourcePosition)
                    isImplicitArgument: true;
                    yourself)
        }
    };
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST MethodDefinitionNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #ownerProgramEntity with: (analyzer environment lexicalScope lookupCurrentProgramEntity).
        let: #hasValidOwner with: (if: ownerProgramEntity isNotNil then: ownerProgramEntity _ canHaveMethods else: false).

        let: #selector with: (if: self selectorExpression isNotNil
            then: (self selectorExpression _ analyzeAndEvaluateNodeWith: analyzer)
            else: (AnonymousSymbol#{
                sourcePosition: self sourcePosition
            })
        ).

        if: hasValidOwner then: {
            let: #analyzedNode with: self shallowCopy.
            let: #implicitArguments with: (self makeImplicitArgumentsFor: ownerProgramEntity _).
            let: #allArguments with: implicitArguments -- self arguments.

            let: #blockClosureNode with: (Std Reflection AST BlockClosureNode#{
                arguments: allArguments.
                resultTypeExpression: self resultTypeExpression.
                body: self body _.
                hasLazyBodyAnalysis: true.
            }).
            analyzedNode
                analyzedSelector: selector;
                analyzedOwnerProgramEntity: ownerProgramEntity;
                analyzedBlockClosureNode: (analyzer analyzeNodeIfNeededWithAutoType: blockClosureNode);
                analyzedType: analyzedNode analyzedBlockClosureNode _ analyzedType.
            analyzedNode
        } else: {
            analyzer makeSemanticAnalysisError: "Methods cannot be defined in this context." at: self sourcePosition
        }.
    };
    withSelector: #evaluateNodeWith: addMethod: {:(Std Reflection AST MethodDefinitionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        let: #blockClosure with: (self analyzedBlockClosureNode _ evaluateNodeWith: evaluationEnvironment).
        self analyzedOwnerProgramEntity _ withSelector: self analyzedSelector _ addMethod: blockClosure.
        blockClosure
    }.