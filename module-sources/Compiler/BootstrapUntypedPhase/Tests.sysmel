if: false then: {
__BootstrapCompiler__
    printLine: false;
    printLine: true;
    printLine: nil;
    printLine: Boolean basicNew;
    printLine: (Boolean basicNew: false);
    printLine: (Boolean basicNew: true);

    printLine: 1 + 1;
    printLine: 2 * 3;
    printLine: 6 // 3;

    printLine: 2 = 2;

    printLine: Int32 -- Int32;
    printLine: Int32 -- Int32 -- Int32;
    printLine: Void => Void;
    printLine: (Int32 -- Int32) => Void;
    printLine: (Int32 -- Int32 -- Int32) => Void;
    printLine: Float32 -- Int32 -- Float64;

    printLine: "Some number: " -- 1 asString;
    printLine: ("Some number: {0} " format: (1 asString,));

    printLine: ((Integer array: 3sz) basicNewWithSlots: (1, 2, 3)) asArraySlice;
    printLine: (((Integer array: 3sz) basicNewWithSlots: (1, 2, 3)) asArraySlice collect: {:(Integer)x :: Size |
        x sz
    });
    printLine: (((Integer array: 3sz) basicNewWithSlots: (1, 2, 3)) asArraySlice collectWithIndex: {:(Integer)x :(Size)index :: Size |
        index
    });

    printLine: Std Reflection SourcePosition basicNew;
    printLine: (Std Reflection AST Node basicNewWithNamedSlots: #{
        sourcePosition: Std Reflection SourcePosition basicNew
    });
    printLine: Int32 basicNew;
    printLine: (Int32 basicNew: -42);
    printLine: Std Reflection Semantic ASTAnalyzer __type__;

    printLine: (`'1 analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'1 analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'(1 + 1) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'(1 + 1) analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'{} analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'{} analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'{1 . 1 + 1} analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'{1 . 1 + 1} analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'(1 negated) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'(if: true then: 1 else: 2) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'(if: true then: 1 else: 2) analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'(if: false then: 1 else: 2) analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'(if: true then: 1) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'(if: false then: 1) analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'{let: #testVar with: 1 . testVar} analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'{let: #testVar with: 1 . testVar} analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    ##printLine: (`'(let: #testVar type: Int32 with: 1s32) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: (`'(let testVar := 42) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);

    printLine: nil isNil;
    printLine: nil isNotNil;

    printLine: (`'{:(Int32)a :(Int32)b :: Int32 | a + b } analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'{:(Int32)a :(Int32)b :: Int32 | a + b } analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment);
    printLine: (`'{:(Int32)a :(Int32)b :: Int32 | a + b } analyzeAndEvaluateNodeWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment)(1i32, 2i32);

    printLine: (`'(struct testStruct) analyzeNodeIfNeededWith: Std Reflection Semantic ASTAnalyzer forDefaultEnvironment).

if: true then: {
    __BootstrapCompiler__ printLine: "then branch"
} else: {
    __BootstrapCompiler__ printLine: "else branch"
}.
} else: {}.
