__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    addBindingNamed: #FunctionVariable with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection Variable publicSlots: #{});

    enterNamespaceNamed: #AST;
    addBindingNamed: #FunctionVariableReferenceNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST VariableReferenceNode publicSlots: #{}).

Std Reflection FunctionVariable
    withSelector: #analyzeIdentifierReferenceNode:with: addMethod: {:(Std Reflection FunctionVariable)self :(Std Reflection AST IdentifierReferenceNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        Std Reflection AST FunctionVariableReferenceNode#{
            binding: self.
            analyzedType: self referenceType
        }
    }.

Std Reflection AST FunctionVariableReferenceNode
    withSelector: #evaluateNodeWith: addMethod: {:(Std Reflection AST LocalVariableReferenceNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        (evaluationEnvironment lexicalScope lookupSymbolRecursively: self binding) _ 
            evaluateBindingWithEnvironment: evaluationEnvironment
    }.
