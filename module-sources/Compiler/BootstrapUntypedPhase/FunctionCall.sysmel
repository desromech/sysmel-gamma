__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #FunctionCallNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST ProgramEntityDefinitionNode publicSlots: #{
        functionExpression: Std Reflection AST Node.
        argumentsExpression: Std Reflection AST Node optional.
        analyzedArgumentSetupExpression: Std Reflection AST Node optional.
        analyzedArgumentUnpackExpressions: Std Reflection AST Node sharedArraySlice.
    }).

Std Reflection AST Node
    withSelector: #isDirectlyUnpackableArgumentList addMethod: {:(Std Reflection AST Node)self :: Boolean |
        false
    };
    withSelector: #asDirectlyUnpackedArgumentList addMethod: {:(Std Reflection AST Node)self :: Std Reflection AST Node sharedArraySlice |
        __BootstrapCompiler__ subclassResponsibility
    }.

Std Reflection AST SequenceNode
    withSelector: #isDirectlyUnpackableArgumentList addMethod: {:(Std Reflection AST SequenceNode)self :: Boolean |
        if: self expressions size = 1sz & self pragmas isEmpty then: {
            (self expressions basicAt: 0sz) isDirectlyUnpackableArgumentList
        } else: {
            false
        }
    };
    withSelector: #asDirectlyUnpackedArgumentList addMethod: {:(Std Reflection AST SequenceNode)self :: Std Reflection AST Node sharedArraySlice |
         (self expressions basicAt: 0sz) asDirectlyUnpackedArgumentList
    }.

Std Reflection AST MakeTupleNode
    withSelector: #isDirectlyUnpackableArgumentList addMethod: {:(Std Reflection AST MakeTupleNode)self :: Boolean |
        true
    };
    withSelector: #asDirectlyUnpackedArgumentList addMethod: {:(Std Reflection AST MakeTupleNode)self :: Std Reflection AST Node sharedArraySlice |
        self elements
    }.

Std Reflection AST FunctionCallNode
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST FunctionCallNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #analyzedNode with: (self shallowCopy).

        analyzedNode functionExpression: (analyzer analyzeNodeIfNeededWithAutoType: analyzedNode functionExpression).
        
        let: #functionType with: analyzedNode functionExpression analyzedType _.
        let: #signatureAnalyzer with: functionType makeFunctionSignatureAnalyzer.

        if: analyzedNode argumentsExpression isNil then: {
            ## Nothing is required here.
        } else: {
            let: #argumentsExpression with: analyzedNode argumentsExpression.
            if: functionType argumentCount > 1sz then: {
                if: argumentsExpression _ isDirectlyUnpackableArgumentList then: {
                    analyzedNode analyzedArgumentUnpackExpressions: (argumentsExpression _ asDirectlyUnpackedArgumentList collect: {:(Std Reflection AST Node)argumentNode :: Std Reflection AST Node |
                        signatureAnalyzer analyzeArgumentNode: argumentNode with: analyzer
                    })
                } else: {
                    __BootstrapCompiler__ error: "TODO: Setup and unpack call expression."
                }
            } else: {
                analyzedNode analyzedArgumentUnpackExpressions: (Std Reflection AST Node sharedArraySlice with:
                    (signatureAnalyzer analyzeArgumentNode: argumentsExpression _ with: analyzer)
                )
            }.
        }.

        analyzedNode analyzedType: signatureAnalyzer computeResultType.
        signatureAnalyzer annotateExtraSemanticAnalysisErrorsOn: analyzedNode with: analyzer.
    };
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST FunctionCallNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        let: #function with: (self functionExpression evaluateNodeWith: evaluationEnvironment).

        if: self analyzedArgumentSetupExpression isNotNil then: {
            self analyzedArgumentSetupExpression _ evaluateNodeWith: evaluationEnvironment.
        } else: { void }.

        function evaluateWithArguments: (self analyzedArgumentUnpackExpressions collect: {:(Std Reflection AST Node)argumentNode :: AnyValue |
            argumentNode evaluateNodeWith: evaluationEnvironment
        })
    }.
    .

Function
    withSelector: #"()" addMacroMethod: {:(MacroInvocationContext)macroSelf :: Std Reflection AST FunctionCallNode |
        <macro>
        <messageMethod>
        Std Reflection AST FunctionCallNode#{
            sourcePosition: macroSelf sourcePosition.
            functionExpression: macroSelf selfNode _.
        }.
    };
    withSelector: #"():" addMacroMethod: {:(MacroInvocationContext)macroSelf :(Std Reflection AST Node)arguments :: Std Reflection AST FunctionCallNode |
        <macro>
        <messageMethod>
        Std Reflection AST FunctionCallNode#{
            sourcePosition: macroSelf sourcePosition.
            functionExpression: macroSelf selfNode _.
            argumentsExpression: arguments.
        }.
    }.