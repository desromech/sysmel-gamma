## Let meta builder.
__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #MetaProgramming;
    addBindingNamed: #LetMetaBuilder with: (__TypeBuilder__ newGCClassWithSuperclass: Std MetaProgramming NamedMetaBuilder slots: #{
        typeExpression: Std Reflection AST Node optional.
        initialValueExpression: Std Reflection AST Node optional.
        isMutable: Boolean.
        hasReferenceTypeInference: Boolean.
        hasDirectTypeInference: Boolean.
    }).

Std MetaProgramming LetMetaBuilder
    withSelector: #mutable addMethod: {:(Std MetaProgramming LetMetaBuilder)self :: Void |
        <metaBuilder>
        self isMutable: true.
        void
    };
    withSelector: #ref addMethod: {:(Std MetaProgramming LetMetaBuilder)self :: Void |
        <metaBuilder>
        self hasReferenceTypeInference: true.
        void
    };
    withSelector: #tempRef addMethod: {:(Std MetaProgramming LetMetaBuilder)self :: Void |
        <metaBuilder>
        self hasDirectTypeInference: true.
        void
    };
    withSelector: #type addMethod: {:(Std MetaProgramming LetMetaBuilder)self :(Std Reflection AST Node)typeExpression :: Void |
        <metaBuilder>
        self typeExpression: typeExpression.
        void
    };
    withSelector: #=> addMethod: {:(Std MetaProgramming LetMetaBuilder)self :(Std Reflection AST Node)typeExpression :: Void |
        <metaBuilder>
        self typeExpression: typeExpression.
        void
    };
    withSelector: #":=" addMethod: {:(Std MetaProgramming LetMetaBuilder)self :(Std Reflection AST Node)initialValueExpression :: Void |
        <metaBuilder>
        self initialValueExpression: initialValueExpression.
        self finish.
        void
    };
    withSelector: #concretizeMetaBuilder addMethod: {:(Std MetaProgramming LetMetaBuilder)self :: Std Reflection AST Node |
        (Std Reflection AST LocalVariableDefinitionNode basicNewWithNamedSlots: #{
            sourcePosition: self metaContext sourcePosition.
            nameExpression: self nameExpression.
            typeExpression: self typeExpression.
            initialValueExpression: self initialValueExpression.

            isMutable: self isMutable.
            hasReferenceTypeInference: self hasReferenceTypeInference.
            hasDirectTypeInference: self hasDirectTypeInference.
        })
    }.

__BootstrapCompiler__
    enterTopLevelNamespace;
    addBindingNamed: #let with: {:(MacroInvocationContext)macroSelf :: Std Reflection AST MetaBuilderInstanceNode |
        <macro>
        <messageMethod>
        Std MetaProgramming LetMetaBuilder nodeWithContext: macroSelf
    }.
