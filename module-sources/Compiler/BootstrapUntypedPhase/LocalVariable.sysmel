__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    addBindingNamed: #LocalVariable with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection FunctionVariable publicSlots: #{});

    enterNamespaceNamed: #AST;
    addBindingNamed: #LocalVariableDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST VariableDefinitionNode publicSlots: #{
    }).

Std Reflection AST LocalVariableDefinitionNode
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST LocalVariableDefinitionNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #analyzedNode with: self shallowCopy.
        let: #name with: (if: self nameExpression isNotNil
            then: (self nameExpression _ analyzeAndEvaluateNodeWith: analyzer)
            else: (AnonymousSymbol#{
                sourcePosition: self sourcePosition
            })
        ).
        let: #sanitizedName with: (name asSanitizedNameSymbolFor: self sourcePosition).
        let: #errorNode with: (Std Reflection AST Node optional valueBox with: nil).

        let: #existentBinding with: (analyzer environment lexicalScope lookupSymbol: sanitizedName).

        if: existentBinding isNotNil then: {
            errorNode _: (analyzer makeSemanticAnalysisError: ("Local variable definition for {0} overrides an existent binding." format: (sanitizedName printString,) at: analyzedNode sourcePosition))
        } else: { void }.

        ## Type expression evaluation, and type checking.
        if: analyzedNode typeExpression isNil then: {
            if: analyzedNode initialValueExpression isNil then: {
                if: analyzedNode isMutable then: {
                    analyzedNode analyzedExpectedValueType: AnyValue. ## TODO: Use the current expected type.
                } else: {
                    errorNode _: (analyzer makeSemanticAnalysisError: "Immutable local variable definition requires an initial value." atNode: analyzedNode)
                }.
            } else: {
                analyzedNode
                    initialValueExpression: (analyzer analyzeNodeIfNeeded: analyzedNode initialValueExpression _ withTypeInferenceEnvironment: analyzedNode makeValueTypeInferenceEnvironment);
                    analyzedExpectedValueType: analyzedNode initialValueExpression _ analyzedType.
            }.
        } else: {
            analyzedNode typeExpression: (analyzer analyzeNodeIfNeeded: analyzedNode typeExpression _ withExpectedType: Type).
            let: #typeExpressionValue with: (analyzedNode typeExpression _ evaluateNodeWith: analyzer environment).
            if: (typeExpressionValue __type__ isSubtypeOf: Type) then: {
                analyzedNode analyzedExpectedValueType: typeExpressionValue.
            } else: {
                errorNode _: (analyzer makeSemanticAnalysisError: "Expected a type expression." atNode: analyzedNode typeExpression _).
            }.
        }.

        if: errorNode _ isNotNil then: {
            errorNode _ _
        } else: {
            ## Make the variable.
            let: #valueType with: analyzedNode analyzedExpectedValueType _.

            ## TODO: Add support for mutability.
            let: #variableReferenceType with: valueType.
            let: #variable with: (Std Reflection LocalVariable#{
                name: sanitizedName.
                valueType: valueType.
                referenceType: variableReferenceType.
            }).

            ## Set the variable binding.
            analyzer environment lexicalScope setSymbol: sanitizedName variableBinding: variable.

            ## Analyze the initial value expression.
            if: analyzedNode initialValueExpression isNil then: {
                analyzedNode initialValueExpression: (typeExpressionValue makeInitialValueNodeWith: analyzer at: analyzedNode sourcePosition)
            } else: {
                analyzedNode initialValueExpression: (analyzer analyzeNodeIfNeeded: analyzedNode initialValueExpression _ withExpectedType: analyzedNode analyzedExpectedValueType _)
            }.

            analyzedNode
                analyzedType: variableReferenceType;
                analyzedVariable: variable;
                analyzedSymbol: sanitizedName.

            analyzedNode
        }.
    };
    withSelector: #evaluateNodeWith: addMethod: {:(Std Reflection AST LocalVariableDefinitionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        ## TODO: Add support for mutability.
        
        let: #initialValue with: (self initialValueExpression _ evaluateNodeWith: evaluationEnvironment).
        let: #bindingValue with: initialValue.

        evaluationEnvironment lexicalScope setSymbol: self analyzedVariable _ immutableValue: bindingValue.
        
        bindingValue
    }.
