__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;

    addBindingNamed: #TypeConversionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST Node publicSlots: #{
        expression: Std Reflection AST Node.
    });
    addBindingNamed: #ValueAsVoidNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST TypeConversionNode publicSlots: #{});
    addBindingNamed: #WrapValueInSumTypeNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST TypeConversionNode publicSlots: #{
        typeSelector: Size.
    });
    addBindingNamed: #WrapAnyValueNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST TypeConversionNode publicSlots: #{});
    addBindingNamed: #UnwrapAnyValueNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST TypeConversionNode publicSlots: #{});
    addBindingNamed: #UpcastConversionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST TypeConversionNode publicSlots: #{});
    addBindingNamed: #TraitConversionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST TypeConversionNode publicSlots: #{}).

Std Reflection AST ValueAsVoidNode
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST ValueAsVoidNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        self expression evaluateNodeWith: evaluationEnvironment.
        void
    };
    withSelector: #isCompileTimeDirectlyEvaluableWith: addMethod: {:(Std Reflection AST ValueAsVoidNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    };
    withSelector: #isPureCompileTimeEvaluableWith: addMethod: {:(Std Reflection AST ValueAsVoidNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    }.

Std Reflection AST WrapValueInSumTypeNode
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST WrapValueInSumTypeNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        self analyzedType _ basicNew: (self expression evaluateNodeWith: evaluationEnvironment) typeSelector: self typeSelector
    };
    withSelector: #isCompileTimeDirectlyEvaluableWith: addMethod: {:(Std Reflection AST WrapValueInSumTypeNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    };
    withSelector: #isPureCompileTimeEvaluableWith: addMethod: {:(Std Reflection AST WrapValueInSumTypeNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    }.

Std Reflection AST UpcastConversionNode
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST UpcastConversionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        ## This is a nop in the evaluator.
        self expression evaluateNodeWith: evaluationEnvironment
    };
    withSelector: #isCompileTimeDirectlyEvaluableWith: addMethod: {:(Std Reflection AST UpcastConversionNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    };
    withSelector: #isPureCompileTimeEvaluableWith: addMethod: {:(Std Reflection AST UpcastConversionNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    }.

Std Reflection AST WrapAnyValueNode
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST WrapAnyValueNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        ## This is a nop in the evaluator.
        self expression evaluateNodeWith: evaluationEnvironment
    };
    withSelector: #isCompileTimeDirectlyEvaluableWith: addMethod: {:(Std Reflection AST WrapAnyValueNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    };
    withSelector: #isPureCompileTimeEvaluableWith: addMethod: {:(Std Reflection AST WrapAnyValueNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isPureCompileTimeEvaluableWith: environment
    }.

Std Reflection AST UnwrapAnyValueNode
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST UnwrapAnyValueNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        ## This is a nop in the evaluator.
        self expression evaluateNodeWith: evaluationEnvironment
    };
    withSelector: #isCompileTimeDirectlyEvaluableWith: addMethod: {:(Std Reflection AST UnwrapAnyValueNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isCompileTimeDirectlyEvaluableWith: environment
    };
    withSelector: #isPureCompileTimeEvaluableWith: addMethod: {:(Std Reflection AST UnwrapAnyValueNode)self :(Std Reflection Semantic EvaluationEnvironment)environment :: Boolean |
        self expression isPureCompileTimeEvaluableWith: environment
    }.