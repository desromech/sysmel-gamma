__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    addBindingNamed: #Variable with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection ProgramEntity publicSlots: #{
        name: AnyValue.
        valueType: Type.
        referenceType: Type.
    });

    enterNamespaceNamed: #AST;
    addBindingNamed: #VariableDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST Node publicSlots: #{
        nameExpression: Std Reflection AST Node optional.
        typeExpression: Std Reflection AST Node optional.
        initialValueExpression: Std Reflection AST Node optional.
        isMutable: Boolean.
        hasReferenceTypeInference: Boolean.
        hasDirectTypeInference: Boolean.

        analyzedSymbol: Object optional.
        analyzedExpectedValueType: Type optional.
        analyzedVariable: Std Reflection Variable optional.
        analyzedOwnerProgramEntity: Std Reflection ProgramEntity optional.
    });
    addBindingNamed: #VariableReferenceNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST Node publicSlots: #{
        binding: Std Reflection Variable.
    });

    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #Semantic;
    addBindingNamed: #SymbolVariableBinding with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection SymbolBinding publicSlots: #{
        variable: Std Reflection Variable
    }).

Std Reflection Variable
    withSelector: #analyzeMessageSendNode:with: addMethod: {:(Type)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        __BootstrapCompiler__ subclassResponsibility
    };
    withSelector: #analyzeIdentifierReferenceNode:with: addMethod: {:(Std Reflection SymbolBinding)self :(Std Reflection AST IdentifierReferenceNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        __BootstrapCompiler__ subclassResponsibility
    }.

Std Reflection AST VariableDefinitionNode
    withSelector: #makeValueTypeInferenceEnvironment addMethod: {:(Std Reflection AST VariableDefinitionNode)self :: Std Reflection Semantic TypeInferenceEnvironment |
        if: self hasDirectTypeInference then: {
            Std Reflection Semantic DirectAutoTypeInferenceEnvironment basicNew
        } else: {
            if: self hasReferenceTypeInference then: {
                Std Reflection Semantic ReferenceAutoTypeInferenceEnvironment basicNew
            } else: {
                Std Reflection Semantic AutoTypeInferenceEnvironment basicNew
            }
        }
    }.

Std Reflection Semantic LexicalScope
    withSelector: #setSymbol:variableBinding: addMethod: {:(Std Reflection Semantic LexicalScope)self :(Object)symbol :(Std Reflection Variable)variable :: Void |
        self setSymbol: symbol binding: (Std Reflection Semantic SymbolVariableBinding basicNewWithNamedSlots: #{
            variable: variable
        })
    }.

Std Reflection Semantic SymbolVariableBinding
    withSelector: #analyzeMessageSendNode:with: addMethod: {:(Type)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        self variable analyzeMessageSendNode: node with: analyzer
    };
    withSelector: #analyzeIdentifierReferenceNode:with: addMethod: {:(Std Reflection Semantic SymbolValueBinding)self :(Std Reflection AST IdentifierReferenceNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        self variable analyzeIdentifierReferenceNode: node with: analyzer
    }.    