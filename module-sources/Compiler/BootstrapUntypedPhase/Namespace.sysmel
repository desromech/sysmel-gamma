__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #NamespaceDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST ProgramEntityDefinitionNode publicSlots: #{
        nameExpression: Std Reflection AST Node optional.
        bodyExpression: Std Reflection AST Node optional.
        bodyLexicalScope: Std Reflection Semantic LexicalScope optional
    }).

Std Reflection ProgramEntity
    withSelector: #getOrCreateChildNamespaceNamed: addMethod: {:(Std Reflection ProgramEntity)self :(Object)name :: Std Reflection Namespace |
        __BootstrapCompiler__ subclassResponsibility
    }.

Std Reflection Namespace
    withSelector: #isDefinitionOwner addMethod: {:(Std Reflection Namespace)self :: Boolean |
        true
    };
    withSelector: #canHaveTypes addMethod: {:(Std Reflection Namespace)self :: Boolean |
        true
    };
    withSelector: #canHaveFunctions addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        true
    };
    withSelector: #canHaveGlobals addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        true
    };
    withSelector: #canHaveMethods addMethod: {:(Std Reflection Namespace)self :: Boolean |
        true
    };
    withSelector: #canHaveNamespaces addMethod: {:(Std Reflection Namespace)self :: Boolean |
        true
    };
    withSelector: #getOrCreateChildNamespaceNamed: addMethod: {:(Std Reflection ProgramEntity)self :(Object)name :: Std Reflection Namespace |
        <primitive: #"namespace.getOrCreateChildNamespaceNamed">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #lookupPublicSymbol: addMethod: {:(Std Reflection Namespace)self :(Object)symbol :: Std Reflection SymbolBinding optional |
        self symbolTable lookupSymbol: symbol
    };
    withSelector: #lookupScopeSymbol: addMethod: {:(Std Reflection Namespace)self :(Object)symbol :: Std Reflection SymbolBinding optional |
        self symbolTable lookupSymbol: symbol
    };
    withSelector: #setSymbol:visibility:immutableValue: addMethod: {:(Std Reflection Namespace)self :(Object)symbol :(Std Reflection ProgramEntityVisibility)visibility :(AnyValue)immutableValue :: Void |
        self symbolTable setSymbol: symbol immutableValue: immutableValue
    }.

Std Reflection AST NamespaceDefinitionNode
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST NamespaceDefinitionNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #ownerProgramEntity with: (analyzer environment lexicalScope lookupCurrentProgramEntity).
        let: #hasValidOwner with: (if: ownerProgramEntity isNotNil then: ownerProgramEntity _ canHaveNamespaces else: false).

        if: hasValidOwner then: {
            let: #name with: (if: self nameExpression isNotNil
                then: (self nameExpression _ analyzeAndEvaluateNodeWith: analyzer)
                else: (Std Reflection AnonymousSymbol#{
                    sourcePosition: self sourcePosition
                })
            ).
            let: #sanitizedName with: (name asSanitizedNameSymbolFor: self sourcePosition).
            let: #childNamespace with: (ownerProgramEntity _ getOrCreateChildNamespaceNamed: sanitizedName).

            let: #analyzedNode with: self shallowCopy.

            analyzedNode
                nameExpression: nil;
                analyzedProgramEntity: childNamespace;
                analyzedType: childNamespace __type__.

            if: analyzedNode bodyExpression isNotNil then: {
                let: #namespaceScope with: (Std Reflection Semantic NamespaceLookupScope#{
                    parent: analyzer environment lexicalScope.
                    programEntity: childNamespace
                }).
                let: #bodyLexicalScope with: namespaceScope makeChildLexicalScope.
                let: #bodyEnvironment with: (analyzer environment copyWithLexicalScope: bodyLexicalScope).
                
                analyzedNode
                    bodyExpression: (analyzer analyzeNodeIfNeeded: analyzedNode bodyExpression _ withEnvironment: bodyEnvironment expectedType: Void);
                    bodyLexicalScope: bodyLexicalScope.
            } else: { 
                void
            }.

            analyzedNode
        } else: {
            analyzer makeSemanticAnalysisError: "A namespace cannot be defined in this location." at: self sourcePosition.
        }
    };
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST NamespaceDefinitionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        if: self bodyExpression isNotNil then: {
            let: #namespaceScope with: (Std Reflection Semantic NamespaceLookupScope#{
                parent: evaluationEnvironment lexicalScope.
                programEntity: self analyzedProgramEntity _
            }).
            let: #bodyLexicalScope with: namespaceScope makeChildLexicalScope.
            let: #bodyEnvironment with: (evaluationEnvironment copyWithLexicalScope: bodyLexicalScope).

            self bodyExpression _ evaluateNodeWith: bodyEnvironment.
        } else: {void}.

        self analyzedProgramEntity _
    }.