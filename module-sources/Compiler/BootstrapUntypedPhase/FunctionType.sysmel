Function __type__
    #*
    withSelector: #canonicalArgumentTypes addMethod: {:(Function __type__)self :: Type arraySlice |
        <primitive: #"functionType.getCanonicalArgumentTypes">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #canonicalResultType addMethod: {:(Function __type__)self :: Type |
        <primitive: #"functionType.getCanonicalResultType">
        __BootstrapCompiler__ primitiveFailed
    };
    *#
    withSelector: #argumentCount addMethod: {:(Function __type__)self :: Size |
        <primitive: #"functionType.getArgumentCount">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #makeFunctionSignatureAnalyzer addMethod: {:(Function __type__)self :: Std Reflection Semantic FunctionSignatureAnalyzer |
        <primitive: #"functionType.makeFunctionSignatureAnalyzer">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #analyzeMessageSendNode:with:valueBinding: addMethod: {:(Function __type__)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :(Std Reflection Semantic SymbolValueBinding)binding :: Std Reflection AST Node |
        binding value analyzeMessageSendNode: node with: analyzer
    };
    withSelector: #analyzeIdentifierReferenceNode:with:valueBinding: addMethod: {:(Function __type__)self :(Std Reflection AST IdentifierReferenceNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :(Std Reflection Semantic SymbolValueBinding)binding :: Std Reflection AST Node |
        if: binding value hasMacroFlag & binding value hasMessageMethodFlag then: {
            analyzer analyzeNodeIfNeededWithCurrentExpectedType: (binding value
                run: node value
                with: AnyValue arraySlice basicNew
                in: (analyzer makeMacroInvocationContextForIdentifierReferenceNode: node)
            )
        } else: {
            Std Reflection AST LiteralValueNode basicNewWithNamedSlots: #{
                sourcePosition: node sourcePosition.
                analyzedType: self.
                value: binding value
            }
        }
    };
    withSelector: #newSimpleFunctionTypeWithArguments:resultType: addMethod: {:(Function __type__)self :(Type arraySlice)argumentTypes :(Type)resultType :: Function __type__ |
        <primitive: #"type.newSimpleFunctionType">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #newWithImplementation: addMethod: {:(Function __type__)self :(Std Reflection FunctionProgramEntity)implementation :: self |
        <primitive: #"function.newWithImplementation">
        __BootstrapCompiler__ primitiveFailed
    }.

Std Reflection Semantic FunctionSignatureAnalyzer
    withSelector: #hasPendingArguments addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :: Boolean |
        <primitive: #"functionSignatureAnalyzer.hasPendingArguments">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #evaluateNextSignatureType addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :: Std Reflection Semantic TypeOrForAllPlaceholder |
        <primitive: #"functionSignatureAnalyzer.evaluateNextSignatureType">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #computeResultType addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :: Type |
        <primitive: #"functionSignatureAnalyzer.computeResultType">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #advanceArgumentWithAnalyzedType: addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :(Type)analyzedType :: Void |
        <primitive: #"functionSignatureAnalyzer.advanceArgument">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #analyzeReceiverArgumentNode:with: addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        self analyzeArgumentNode: node with: analyzer
    };
    withSelector: #analyzeArgumentNode:with: addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: self hasPendingArguments then: {
            let: #signatureTypeOrPlaceholder with: self evaluateNextSignatureType.
            let: #analyzedNode with: (if: (signatureTypeOrPlaceholder is: Std Reflection Semantic ForAllPlaceholderBinding) then: {
                let: #placeholder with: (signatureTypeOrPlaceholder get: Std Reflection Semantic ForAllPlaceholderBinding).
                let: #directNode with: (analyzer analyzeNodeIfNeeded: node withTypeInferenceEnvironment: signatureType makeTypeInferenceEnvironment).

                if: (signatureType matchAndSolveWithType: directNode _ analyzedType) then: {
                    directNode
                } else: {
                    analyzer makeSemanticAnalysisError: "Generic argument type is not matching" atNode: directNode
                }
            } else: {
                let: #expectedType with: (signatureTypeOrPlaceholder get: Type).
                analyzer analyzeNodeIfNeeded: node withExpectedType: expectedType
            }).

            self advanceArgumentWithAnalyzedType: analyzedNode analyzedType _.
            analyzedNode
        } else: {
            analyzer makeSemanticAnalysisError: "Unexpected excessive argument." atNode: (analyzer analyzeNodeIfNeededWithAutoType: node)
        }
    };
    withSelector: #annotateExtraSemanticAnalysisErrorsOn:with: addMethod: {:(Std Reflection Semantic FunctionSignatureAnalyzer)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: self hasPendingArguments then: {
            analyzer makeSemanticAnalysisError: "Missing required arguments." atNode: node
        } else: {
            node
        }
    }.

Function
    withSelector: #analyzeMessageSendNode:with: addMethod: {:(Function)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: self hasMacroFlag then: {
            analyzer analyzeNodeIfNeededWithCurrentExpectedType: (self
                run: (node selector analyzeAndEvaluateNodeWith: analyzer)
                with: node arguments
                in: (analyzer makeMacroInvocationContextForMessageSendNode: node)
            )
        } else: {
            let: #signatureAnalyzer with: self __type__ makeFunctionSignatureAnalyzer.
            let: #analyzedNode with: node shallowCopy.

            if: analyzedNode receiver isNotNil then: {
                analyzedNode receiver: (signatureAnalyzer analyzeReceiverArgumentNode: analyzedNode receiver _ with: analyzer)
            } else: {void}.

            analyzedNode
                arguments: (node arguments collect: {:(Std Reflection AST Node)argumentNode :: Std Reflection AST Node |
                    signatureAnalyzer analyzeArgumentNode: argumentNode with: analyzer
                });
                analyzedType: signatureAnalyzer computeResultType;
                boundMethod: self;
                usesDynamicDispatch: node receiver _ analyzedType _ supportsDynamicDispatch & self usesDynamicDispatch.

            signatureAnalyzer annotateExtraSemanticAnalysisErrorsOn: analyzedNode with: analyzer
        }.
    };
    withSelector: #run:with:in: addMethod: {:(Function)self :(AnyValue)selector :(AnyValue arraySlice)arguments :(AnyValue)receiver :: AnyValue |
        <primitive: #"object.runWithIn">
        if: bootstrapImplementation isNotNil then: {
            bootstrapImplementation _ run: selector with: arguments in: receiver
        } else: {
            implementation _ run: selector with: arguments in: receiver
        }.
    };
    withSelector: #evaluateWithArguments: addMethod: {:(Function)self :(AnyValue arraySlice)arguments :: AnyValue |
        <primitive: #"object.evaluateWithArguments">
        if: bootstrapImplementation isNotNil then: {
            bootstrapImplementation _ evaluateWithArguments: arguments
        } else: {
            implementation _ evaluateWithArguments: arguments
        }.
    };
    withSelector: #hasMethodFlag: addMethod: {:(Function)self :(AnyValue)methodFlag :: Boolean |
        <primitive: #"function.hasMethodFlag">
        __BootstrapCompiler__ primitiveFailed
    };

    ## Macro
    withSelector: #hasMacroFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #macro
    };
    withSelector: #hasMessageMethodFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #messageMethod
    };
    withSelector: #hasFallbackFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #fallback
    };

    ## Side effects
    withSelector: #hasPureFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #pure
    };

    ## Dispatch mode
    withSelector: #hasAbstractFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #abstract
    };
    withSelector: #hasVirtualFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #virtual
    };
    withSelector: #hasOverrideFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #override
    };
    withSelector: #hasStaticFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #static
    };
    withSelector: #hasFinalFlag addMethod: {:(Function)self :: Boolean |
        self hasMethodFlag: #final
    };

    withSelector: #hasDynamicDispatchFlag addMethod: {:(Function)self :: Boolean |
        self hasAbstractFlag | self hasVirtualFlag | self hasOverrideFlag
    };

    withSelector: #usesDynamicDispatch addMethod: {:(Function)self :: Boolean |
        self hasDynamicDispatchFlag & self hasFinalFlag not 
    }.
