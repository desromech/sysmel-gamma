__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #ProgramEntityDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST Node publicSlots: #{
        analyzedProgramEntity: Std Reflection ProgramEntity optional
    });
    addBindingNamed: #ProgramEntityExtensionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST Node publicSlots: #{
        programEntity: Std Reflection AST Node.
        bodyExpression: Std Reflection AST Node optional.
    }).

Std Reflection ProgramEntity
    withSelector: #canHaveTypes addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveMethods addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveFunctions addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveFields addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveGlobals addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #canHaveNamespaces addMethod: {:(Std Reflection ProgramEntity)self :: Boolean |
        false
    };
    withSelector: #lookupPublicSymbol: addMethod: {:(Std Reflection ProgramEntity)self :(Object)symbol :: Std Reflection SymbolBinding optional |
        nil
    };
    withSelector: #lookupScopeSymbol: addMethod: {:(Std Reflection ProgramEntity)self :(Object)symbol :: Std Reflection SymbolBinding optional |
        nil
    };
    withSelector: #asReceiverType addMethod: {:(Std Reflection ProgramEntity)self :: Type optional |
        nil
    };
    withSelector: #setSymbol:visibility:immutableValue: addMethod: {:(Std Reflection ProgramEntity)self :(Object)symbol :(Std Reflection ProgramEntityVisibility)visibility :(AnyValue)immutableValue :: Void |
        __BootstrapCompiler__ subclassResponsibility
    }.

Std Reflection ProgramEntity __type__
    withSelector: #analyzeUnboundMessageSendNode:with: addMethod: {:(Std Reflection ProgramEntity __type__)self :(Std Reflection AST MessageSendNode)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        if: (if: node arguments isEmpty then: (if: node receiver isNotNil then:
                (if: node receiver _ isLiteralValueNode
                then: node selector isLiteralValueNode
                else: false) else: false)
            else: false) then: {
            let: #receiver with: (node receiver _ evaluateLiteralValue).
            let: #selector with: (node selector evaluateLiteralValue).
            let: #publicBinding with: (receiver lookupPublicSymbol: selector).

            if: publicBinding isNotNil then: {
                publicBinding _ analyzeMessageSendNode: node with: analyzer
            } else: {
                self analyzeUnboundOrDynamicMessageSendNode: node with: analyzer
            }
        } else: {
            self analyzeUnboundOrDynamicMessageSendNode: node with: analyzer
        }.
    }.

Std Reflection AST ProgramEntityExtensionNode
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST ProgramEntityExtensionNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #programEntity with: (analyzer analyzeNodeIfNeeded: self programEntity withExpectedType: Std Reflection ProgramEntity).
        self shallowCopy
            programEntity: programEntity;
            analyzedType: programEntity analyzedType;
            yourself 
    };
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST ProgramEntityExtensionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        let: #programEntity with: (self programEntity evaluateNodeWith: evaluationEnvironment).

        if: self bodyExpression isNotNil then: {
            let: #programEntityExtensionScope with: (Std Reflection Semantic ProgramEntityLookupScope#{
                parent: evaluationEnvironment lexicalScope.
                programEntity: programEntity
            }).
            let: #bodyLexicalScope with: programEntityExtensionScope makeChildLexicalScope.
            let: #bodyEnvironment with: (evaluationEnvironment copyWithLexicalScope: bodyLexicalScope) copyWithEmptyCleanUpScope.

            programEntity addPendingBodyExpression: {:: Void |
                self bodyExpression _ analyzeAndEvaluateNodeWith: (Std Reflection Semantic ASTAnalyzer forEnvironment: bodyEnvironment withExpectedType: Void).
                void
            }.
        } else: {void}.

        programEntity
    }.