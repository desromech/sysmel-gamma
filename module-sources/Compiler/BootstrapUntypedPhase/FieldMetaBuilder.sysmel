## Let meta builder.
__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #MetaProgramming;
    addBindingNamed: #FieldMetaBuilder with: (__TypeBuilder__ newGCClassWithSuperclass: Std MetaProgramming NamedMetaBuilder slots: #{
        typeExpression: Std Reflection AST Node optional.
        initialValueExpression: Std Reflection AST Node optional.
    }).

Std MetaProgramming FieldMetaBuilder
    withSelector: #type: addMethod: {:(Std MetaProgramming LetMetaBuilder)self :(Std Reflection AST Node)typeExpression :: Void |
        <metaBuilder>
        self typeExpression: typeExpression.
        void
    };
    withSelector: #=> addMethod: {:(Std MetaProgramming LetMetaBuilder)self :(Std Reflection AST Node)typeExpression :: Void |
        <metaBuilder>
        self typeExpression: typeExpression.
        void
    };
    withSelector: #":=" addMethod: {:(Std MetaProgramming LetMetaBuilder)self :(Std Reflection AST Node)initialValueExpression :: Void |
        <metaBuilder>
        self initialValueExpression: initialValueExpression.
        self finish.
        void
    };
    withSelector: #concretizeMetaBuilder addMethod: {:(Std MetaProgramming LetMetaBuilder)self :: Std Reflection AST Node |
        (Std Reflection AST FieldVariableDefinitionNode#{
            sourcePosition: self metaContext sourcePosition.
            nameExpression: self nameExpression.
            typeExpression: self typeExpression.
            initialValueExpression: self initialValueExpression.
        })
    }.

Std MetaProgramming FlagMetaBuilder
    withSelector: #field addMethod: {:(Std MetaProgramming FlagMetaBuilder)self :: Void |
        <metaBuilder>
        self delegateToMetaBuilderClass: Std MetaProgramming FieldMetaBuilder.
        void
    }.