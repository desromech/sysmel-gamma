Std Reflection Semantic TypeInferenceEnvironment
    withSelector: #solveAnalyzedNodeType:with: addMethod: {:(Std Reflection Semantic TypeInferenceEnvironment)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer |
        __BootstrapCompiler__ subclassResponsibility
    }.

Std Reflection Semantic DirectAutoTypeInferenceEnvironment
    withSelector: #solveAnalyzedNodeType:with: addMethod: {:(Std Reflection Semantic TypeInferenceEnvironment)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        node
    }.

Std Reflection Semantic ReferenceAutoTypeInferenceEnvironment
    withSelector: #solveAnalyzedNodeType:with: addMethod: {:(Std Reflection Semantic TypeInferenceEnvironment)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #collapsedNode with: (node asCollapsedNodeWith: analyzer).
        analyzer addImplicitCoercionTo: collapsedNode analyzedType _ asReferenceDecayedType node: collapsedNode
    }.

Std Reflection Semantic AutoTypeInferenceEnvironment
    withSelector: #solveAnalyzedNodeType:with: addMethod: {:(Std Reflection Semantic TypeInferenceEnvironment)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node  |
        let: #collapsedNode with: (node asCollapsedNodeWith: analyzer).
        analyzer addImplicitCoercionTo: collapsedNode analyzedType _ asDecayedType node: collapsedNode
    }.

Std Reflection Semantic ExpectedTypeInferenceEnvironment
    withSelector: #solveAnalyzedNodeType:with: addMethod: {:(Std Reflection Semantic TypeInferenceEnvironment)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node  |
        analyzer addImplicitCoercionTo: self expectedType node: (node asCollapsedNodeWith: analyzer).
    }.

Std Reflection Semantic ExpectedSubtypeInferenceEnvironment
    withSelector: #solveAnalyzedNodeType:with: addMethod: {:(Std Reflection Semantic ExpectedSubtypeInferenceEnvironment)self :(Std Reflection AST Node)node :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node  |
        let: #collapsedNode with: (node asCollapsedNodeWith: analyzer).
        if: (node analyzedType _ isSubtypeOrDoesImplementTrait: self expectedType) then: {
            collapsedNode
        } else: {
            analyzer addImplicitCoercionTo: self expectedType node: collapsedNode.
        }
    }.

Std Reflection Semantic ASTAnalyzer
    withSelector: #analyzeNodeIfNeededWithDirectAutoType: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Std Reflection AST Node)node :: Std Reflection AST Node |
        self analyzeNodeIfNeeded: node withTypeInferenceEnvironment: Std Reflection Semantic DirectAutoTypeInferenceEnvironment basicNew
    };
    withSelector: #analyzeNodeIfNeededWithReferenceAutoType: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Std Reflection AST Node)node :: Std Reflection AST Node |
        self analyzeNodeIfNeeded: node withTypeInferenceEnvironment: Std Reflection Semantic ReferenceAutoTypeInferenceEnvironment basicNew
    };
    withSelector: #analyzeNodeIfNeededWithAutoType: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Std Reflection AST Node)node :: Std Reflection AST Node |
        self analyzeNodeIfNeeded: node withTypeInferenceEnvironment: Std Reflection Semantic AutoTypeInferenceEnvironment basicNew
    };
    withSelector: #analyzeNodeIfNeeded:withExpectedType: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Std Reflection AST Node)node :(Type)expectedType :: Std Reflection AST Node |
        self analyzeNodeIfNeeded: node withTypeInferenceEnvironment: (Std Reflection Semantic ExpectedTypeInferenceEnvironment#{
            expectedType: expectedType
        })
    };
    withSelector: #analyzeNodeIfNeeded:withExpectedSubtypeOf: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Std Reflection AST Node)node :(Type)expectedType :: Std Reflection AST Node |
        self analyzeNodeIfNeeded: node withTypeInferenceEnvironment: (Std Reflection Semantic ExpectedSubtypeInferenceEnvironment#{
            expectedType: expectedType
        })
    };
    withSelector: #analyzeNodeIfNeededWithCurrentExpectedType: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Std Reflection AST Node)node :: Std Reflection AST Node |
        self typeInferenceEnvironment solveAnalyzedNodeType: (node analyzeNodeIfNeededWith: self) with: self
    };
    withSelector: #copyWithExpectedType: addMethod: {:(Std Reflection Semantic ASTAnalyzer)self :(Type)expectedType |
        self shallowCopy
            typeInferenceEnvironment: (Std Reflection Semantic ExpectedTypeInferenceEnvironment#{
                expectedType: expectedType
            });
            yourself
    }
