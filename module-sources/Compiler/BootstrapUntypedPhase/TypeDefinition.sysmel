__BootstrapCompiler__
    enterTopLevelNamespace;
    enterNamespaceNamed: #Std;
    enterNamespaceNamed: #Reflection;
    enterNamespaceNamed: #AST;
    addBindingNamed: #TypeDefinitionNode with: (__TypeBuilder__ newGCClassWithSuperclass: Std Reflection AST ProgramEntityDefinitionNode publicSlots: #{
        nameExpression: Std Reflection AST Node optional.
        supertypeExpression: Std Reflection AST Node optional.
        traitExpressions: Std Reflection AST Node arraySlice.
        bodyExpression: Std Reflection AST Node optional.
        visibility: Std Reflection ProgramEntityVisibility.
        analyzedName: Object optional.
        isAnalyzedLocalDefinition: Boolean.
        localDefinitionVariable: Std Reflection LocalVariable optional.
    }).

Type
    withSelector: #addPendingSupertypeExpression: addMethod: {:(Type)self :(Void => Type)supertypeExpression :: Void |
        <primitive: #"type.addPendingSupertypeExpression">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #addPendingTraitExpression: addMethod: {:(Type)self :(Void => Void)traitExpressions :: Void |
        <primitive: #"type.addPendingTraitExpression">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #addPendingBodyExpression: addMethod: {:(Type)self :(Void => Void)bodyExpression :: Void |
        <primitive: #"type.addPendingBodyExpression">
        __BootstrapCompiler__ primitiveFailed
    };
    withSelector: #extend: addMacroMethod: {:(MacroInvocationContext)macroSelf :(Std Reflection AST Node)body :: Std Reflection AST Node |
        <macro>
        <messageMethod>
        Std Reflection AST ProgramEntityExtensionNode#{
            sourcePosition: macroSelf sourcePosition.
            programEntity: macroSelf selfNode _.
            bodyExpression: body
        }.
    }.

Std Reflection AST TypeDefinitionNode
    withSelector: #constructTypeInstance addMethod: {:(Std Reflection AST TypeDefinitionNode)self :: Type |
        __TypeBuilder__ newTrivialType
    };
    withSelector: #getGenericResultMetaType addMethod: {:(Std Reflection AST TypeDefinitionNode)self :: Type |
        Type __type__
    };
    withSelector: #analyzeNodeWith: addMethod: {:(Std Reflection AST TypeDefinitionNode)self :(Std Reflection Semantic ASTAnalyzer)analyzer :: Std Reflection AST Node |
        let: #analyzedNode with: self shallowCopy.
        if: (analyzedNode visibility is: Undefined) then: {
            analyzedNode visibility: Std Reflection ProgramEntityVisibility LexicalScope basicNew
        } else: { void }.

        ## Check the name.
        let: #name with: (if: self nameExpression isNotNil
            then: (self nameExpression _ analyzeAndEvaluateNodeWith: analyzer)
            else: (Std Reflection AnonymousSymbol#{
                sourcePosition: self sourcePosition
            })
        ).
        let: #sanitizedName with: (name asSanitizedNameSymbolFor: self sourcePosition).
        analyzedNode analyzedName: sanitizedName.

        ## Make sure the name is not duplicated.
        let: #errorNode with: (Std Reflection AST Node optional valueBox with: nil).
        if: (analyzedNode visibility is: Std Reflection ProgramEntityVisibility LexicalScope) then: {
            let: #existentBinding with: (analyzer environment lexicalScope lookupSymbol: sanitizedName).

            if: existentBinding isNil then: {
                let: #expectedMetaType with: analyzedNode getGenericResultMetaType.
                let: #variable with: (Std Reflection LocalVariable#{
                    name: sanitizedName.
                    valueType: expectedMetaType.
                    referenceType: expectedMetaType.
                }).

                analyzer environment lexicalScope setSymbol: sanitizedName variableBinding: variable.
                
                analyzedNode
                    analyzedType: expectedMetaType;
                    isAnalyzedLocalDefinition: true;
                    localDefinitionVariable: variable.
            } else: {
                analyzer makeSemanticAnalysisError: "Non-lexical scoped type definition is not inside a program entity with visibility." at: node sourcePosition
            }.
        } else: {
            let: #ownerProgramEntity with: (analyzer environment lexicalScope lookupCurrentProgramEntity).
            let: #hasValidOwner with: (if: ownerProgramEntity isNotNil then: ownerProgramEntity _ canHaveTypes else: false).
            
            if: hasValidOwner then: {
                let: #existentBinding with: (ownerProgramEntity _ lookupScopeSymbol: sanitizedName).

                if: existentBinding isNil then: {
                    let: #typeInstance with: analyzedNode constructTypeInstance.
                    typeInstance name: sanitizedName.

                    if: sanitizedName isAnonymousSymbol not then: {
                        ownerProgramEntity _ setSymbol: sanitizedName visibility: analyzedNode visibility immutableValue: typeInstance
                    } else: {void}.

                    analyzedNode
                        analyzedName: sanitizedName;
                        analyzedProgramEntity: typeInstance;
                        analyzedType: typeInstance __type__;
                        isAnalyzedLocalDefinition: false.
                } else: {
                    __BootstrapCompiler__ printLine: self sourcePosition printString -- ": TODO: check existent binding compatibility with type definition.".
                }.
            } else: {
                errorNode _: (analyzer makeSemanticAnalysisError: "Non-lexical scoped type definition is not inside a program entity with visibility." at: node sourcePosition)
            }.
        }.

        if: errorNode _ isNotNil then: {
            errorNode _ _
        } else: {
            analyzedNode
        }.
    };
    withSelector: #performEvaluationWith: addMethod: {:(Std Reflection AST TypeDefinitionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :: AnyValue |
        let: #typeProgramEntity with: (if: self isAnalyzedLocalDefinition then: {
            let: #typeInstance with: self constructTypeInstance.
            if: self analyzedName isNotNil then: {
                typeInstance name: self analyzedName _
            } else: { void }.

            evaluationEnvironment lexicalScope setSymbol: self localDefinitionVariable _ immutableValue: typeInstance.
            typeInstance
        } else: {
            self analyzedProgramEntity _
        }).

        self evaluateTypeDefinitionComponentsWith: evaluationEnvironment on: typeProgramEntity.

        typeProgramEntity
    };
    withSelector: #evaluateTypeDefinitionComponentsWith:on: addMethod: {:(Std Reflection AST TypeDefinitionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :(Type)typeProgramEntity :: Void |
        self evaluateCommonTypeDefinitionComponentsWith: evaluationEnvironment on: typeProgramEntity.
        void
    };
    withSelector: #evaluateCommonTypeDefinitionComponentsWith:on: addMethod: {:(Std Reflection AST TypeDefinitionNode)self :(Std Reflection Semantic EvaluationEnvironment)evaluationEnvironment :(Type)typeProgramEntity :: Void |
        if: self supertypeExpression isNotNil then: {
            typeProgramEntity addPendingSupertypeExpression: {:: Type |
                self supertypeExpression _ analyzeAndEvaluateNodeWith: (Std Reflection Semantic ASTAnalyzer forEnvironment: evaluationEnvironment withExpectedType: Type).
            }.
        } else: {void}.

        self traitExpressions do: {:(Std Reflection AST Node)traitExpression :: Void |
            typeProgramEntity addPendingTraitExpression: {:: Type |
                traitExpression analyzeAndEvaluateNodeWith: (Std Reflection Semantic ASTAnalyzer forEnvironment: evaluationEnvironment withExpectedType: Trait).
            }.
        }.

        if: self bodyExpression isNotNil then: {
            let: #typeDefinitionScope with: (Std Reflection Semantic TypeDefinitionLookupScope#{
                parent: evaluationEnvironment lexicalScope.
                programEntity: typeProgramEntity
            }).
            let: #bodyLexicalScope with: typeDefinitionScope makeChildLexicalScope.
            let: #bodyEnvironment with: (evaluationEnvironment copyWithLexicalScope: bodyLexicalScope) copyWithEmptyCleanUpScope.

            typeProgramEntity addPendingBodyExpression: {:: Void |
                self bodyExpression _ analyzeAndEvaluateNodeWith: (Std Reflection Semantic ASTAnalyzer forEnvironment: bodyEnvironment withExpectedType: Void).
                void
            }.
        } else: {void}.

        void
    }.
